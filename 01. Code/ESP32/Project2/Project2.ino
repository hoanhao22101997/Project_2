#include <WiFi.h>
#include <ESP32Firebase.h>
// #include <HTTPClient.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>
#include "ArduinoJson.h"

#include  <Adafruit_ST7735.h>
#include  <Adafruit_GFX.h>
#include  <SPI.h>

const unsigned short ute[750] PROGMEM={
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0021, 0x0021, 0x0020,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0041, 0x0862, 0x08A3, 0x0883, 0x1063, 0x0863, 0x0862, 0x0883, 0x0883,   // 0x0030 (48) pixels
0x0862, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
0x0000, 0x0000, 0x0000, 0x0021, 0x10C4, 0x10A3, 0x0041, 0x0000, 0x0000, 0x4041, 0x2020, 0x0000, 0x0000, 0x0020, 0x0882, 0x10C4,   // 0x0050 (80) pixels
0x0862, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
0x0862, 0x08A3, 0x0041, 0x0000, 0x0000, 0x0000, 0x0800, 0x8882, 0x9082, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0862, 0x08A3,   // 0x0070 (112) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0862, 0x08A3, 0x0020,   // 0x0080 (128) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x4041, 0xB0A3, 0x9882, 0x6062, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0862, 0x10C4, 0x0000,   // 0x0090 (144) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0041, 0x1949, 0x21EE, 0x196A, 0x0041, 0x0000,   // 0x00A0 (160) pixels
0x0000, 0x0000, 0x5862, 0xA0A3, 0x88A4, 0xA0A3, 0x0000, 0x0000, 0x0000, 0x0000, 0x10C6, 0x21CD, 0x21AC, 0x08A4, 0x0000, 0x0000,   // 0x00B0 (176) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1106, 0x2A72, 0x2A72, 0x08A4, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00C0 (192) pixels
0x4041, 0x6083, 0x40C4, 0x6083, 0x0800, 0x0800, 0x0000, 0x0000, 0x0041, 0x21CC, 0x2A94, 0x198B, 0x0041, 0x0000, 0x0000, 0x0000,   // 0x00D0 (208) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0883, 0x21EE, 0x2A94, 0x10E7, 0x0000, 0x0800, 0x2861, 0x2861, 0x2041, 0x2882, 0x18C4,   // 0x00E0 (224) pixels
0x2105, 0x2882, 0x2041, 0x2861, 0x2882, 0x1841, 0x0000, 0x0041, 0x2210, 0x2A73, 0x1106, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00F0 (240) pixels
0x0000, 0x0000, 0x0000, 0x1107, 0x2A93, 0x21CD, 0x0000, 0x0000, 0x40A2, 0x1841, 0x0000, 0x0000, 0x0862, 0x198B, 0x2A0F, 0x0883,   // 0x0100 (256) pixels
0x0000, 0x0000, 0x0000, 0x40A2, 0x1841, 0x0000, 0x10E7, 0x2A94, 0x21CC, 0x0041, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0110 (272) pixels
0x0041, 0x21AC, 0x2A94, 0x10C6, 0x0000, 0x0800, 0x68E3, 0x2861, 0x0000, 0x0020, 0x198B, 0x21EF, 0x2231, 0x21CC, 0x0863, 0x0000,   // 0x0120 (288) pixels
0x0000, 0x60E3, 0x3061, 0x0000, 0x0021, 0x2210, 0x2A51, 0x08A4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0863, 0x220F,   // 0x0130 (304) pixels
0x2A51, 0x1042, 0x3021, 0x5862, 0x68E3, 0x6124, 0x0000, 0x10C5, 0x1949, 0x1128, 0x21CD, 0x1107, 0x1128, 0x0000, 0x2861, 0x7125,   // 0x0140 (320) pixels
0x5862, 0x4861, 0x1000, 0x196A, 0x2A93, 0x1107, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0883, 0x2A51, 0x21EF, 0x6083,   // 0x0150 (336) pixels
0xA0A3, 0xA0A3, 0x7082, 0x8186, 0x2041, 0x0862, 0x196A, 0x1949, 0x21CD, 0x1949, 0x10C6, 0x0000, 0x6124, 0x68E3, 0x9882, 0xA0A3,   // 0x0160 (352) pixels
0x8882, 0x2928, 0x2A94, 0x1949, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x08A4, 0x2A72, 0x21EE, 0x7082, 0xA8A3, 0xB0A3,   // 0x0170 (368) pixels
0x9082, 0x60E3, 0x6124, 0x0000, 0x1128, 0x21EE, 0x2230, 0x1949, 0x0041, 0x1841, 0x7125, 0x6082, 0xA8A3, 0xA8A3, 0x9882, 0x3107,   // 0x0180 (384) pixels
0x2A94, 0x1949, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0883, 0x2A51, 0x21EE, 0x6862, 0xB0A3, 0xB0A3, 0xB0A3, 0x5862,   // 0x0190 (400) pixels
0x78E4, 0x2020, 0x1841, 0x3147, 0x39AA, 0x1841, 0x0000, 0x58C3, 0x68E3, 0x9082, 0xB0A3, 0xB0A3, 0x9882, 0x2907, 0x2A94, 0x1949,   // 0x01A0 (416) pixels
0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1063, 0x2210, 0x2210, 0x6083, 0xB8A3, 0xC0A3, 0xC8C3, 0x9082, 0x6062, 0x4861,   // 0x01B0 (432) pixels
0x2041, 0x1861, 0x1861, 0x2041, 0x3061, 0x78E4, 0x6862, 0xC0A3, 0xC8C3, 0xC0A3, 0x9082, 0x2928, 0x2A94, 0x1128, 0x0000, 0x0000,   // 0x01C0 (448) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0041, 0x21CD, 0x2A73, 0x40C4, 0xB0A3, 0xE0C4, 0xE8C4, 0xE8C4, 0xD0C4, 0x9082, 0x1000, 0x0000,   // 0x01D0 (464) pixels
0x0000, 0x0000, 0x5862, 0xC8C3, 0xE0C4, 0xE8C4, 0xE8C4, 0xD0C3, 0x7082, 0x21EE, 0x2A73, 0x10C5, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01E0 (480) pixels
0x0000, 0x0000, 0x0020, 0x1949, 0x2A94, 0x1949, 0x1000, 0x4041, 0x8082, 0xC8C3, 0xE8C4, 0xE8C4, 0x6062, 0x0000, 0x0000, 0x1000,   // 0x01F0 (496) pixels
0xC8C3, 0xE8C4, 0xE0C4, 0xA0A3, 0x5862, 0x2020, 0x0883, 0x2A73, 0x21EE, 0x0863, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0200 (512) pixels
0x0000, 0x08A4, 0x2230, 0x2A51, 0x0863, 0x0000, 0x4041, 0xD0C3, 0xE8C4, 0xE8C4, 0x6862, 0x0000, 0x0000, 0x1800, 0xD0C3, 0xE8C4,   // 0x0210 (528) pixels
0xE0C4, 0x8882, 0x0000, 0x0000, 0x198C, 0x2A94, 0x1949, 0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0041,   // 0x0220 (544) pixels
0x1949, 0x2A94, 0x21CD, 0x0020, 0x6862, 0xE8C4, 0xE8C4, 0xE8C4, 0x5862, 0x0000, 0x0000, 0x1000, 0xC0A3, 0xE8C4, 0xE8C4, 0xB8A3,   // 0x0230 (560) pixels
0x0800, 0x10E7, 0x2A93, 0x21EE, 0x08A4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0863, 0x21CC,   // 0x0240 (576) pixels
0x2A94, 0x198B, 0x80C4, 0xE8C4, 0xE8C4, 0xE0C4, 0x3021, 0x0000, 0x0000, 0x0000, 0xA0A3, 0xE8C4, 0xE8C4, 0xC8C3, 0x2907, 0x2A73,   // 0x0250 (592) pixels
0x2A51, 0x1106, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x08A4, 0x21EE, 0x2A94,   // 0x0260 (608) pixels
0x4A0F, 0x9926, 0xE0C4, 0xD0C3, 0x2020, 0x0000, 0x0000, 0x0000, 0x8082, 0xE8C4, 0xC0E5, 0x698B, 0x3273, 0x2A72, 0x1128, 0x0041,   // 0x0270 (624) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0883, 0x198C, 0x2A93, 0x3273,   // 0x0280 (640) pixels
0x59AC, 0x7127, 0x1063, 0x0021, 0x0021, 0x0041, 0x48E6, 0x718B, 0x3A30, 0x2A94, 0x2210, 0x1107, 0x0041, 0x0000, 0x0000, 0x0000,   // 0x0290 (656) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0862, 0x1128, 0x21EF, 0x2A93, 0x2A94,   // 0x02A0 (672) pixels
0x2A73, 0x2230, 0x2230, 0x2A51, 0x2A93, 0x2A94, 0x2231, 0x196A, 0x08A4, 0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02B0 (688) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0863, 0x10E7, 0x196A, 0x21EE, 0x220F,   // 0x02C0 (704) pixels
0x220F, 0x21EE, 0x198C, 0x1128, 0x08A4, 0x0041, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02D0 (720) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0041, 0x0862, 0x0862, 0x0862, 0x0862,   // 0x02E0 (736) pixels
0x0041, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};


const unsigned short temperature[100] PROGMEM={
0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x9CD4, 0xCE5C, 0x39E8, 0x0000, 0x0000, 0x28A1, 0x91C5, 0x3062, 0x0000, 0x18C3, 0xCE7A,   // 0x0010 (16) pixels
0xE71E, 0x6B2F, 0x1064, 0x1063, 0x38E2, 0xB227, 0x4883, 0x0000, 0x18C3, 0xD69B, 0xE71E, 0x6B2F, 0x1064, 0x0842, 0x0000, 0x7964,   // 0x0020 (32) pixels
0x2906, 0x0021, 0x18C3, 0xDE59, 0xE63A, 0x6B2F, 0x1064, 0x1063, 0x0000, 0x7144, 0x4A6E, 0x10A4, 0x18C3, 0xD5D7, 0xED15, 0x6B2F,   // 0x0030 (48) pixels
0x1064, 0x0842, 0x0000, 0x2061, 0x3A2D, 0x10A4, 0x18C3, 0xD5D7, 0xED15, 0x6B2F, 0x1064, 0x0842, 0x0000, 0x10E4, 0x63D6, 0x39ED,   // 0x0040 (64) pixels
0x4209, 0xDE59, 0xED15, 0x8C54, 0x18A5, 0x0843, 0x0000, 0x0021, 0x320C, 0x18E6, 0x9CD4, 0xFE36, 0xFB8E, 0xD5DA, 0x3187, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x9CD4, 0xFE36, 0xF451, 0xCDBA, 0x3187, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xC619,   // 0x0060 (96) pixels
0xCE5C, 0x73B0, 0x0021, 0x0000
};
const unsigned short humidity[100] PROGMEM={
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x18A2, 0x6B0B, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x31E8, 0x1082,   // 0x0010 (16) pixels
0x2124, 0x9450, 0x1082, 0x0000, 0x0000, 0x0000, 0x0000, 0x3229, 0x4BF4, 0x3A8C, 0x2965, 0x8BEF, 0x1082, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x2965, 0x5C35, 0x5D9F, 0x4C56, 0x4AAB, 0x83AE, 0x18A2, 0x0000, 0x0000, 0x0841, 0x4B2F, 0x4CDB, 0x5D7E, 0x551C, 0x6B90, 0x8B0B,   // 0x0030 (48) pixels
0x41C6, 0x0000, 0x0000, 0x2145, 0x4C56, 0x43D5, 0x3B73, 0x4CDB, 0x5C35, 0x7B4D, 0x2104, 0x0000, 0x0000, 0x31E8, 0x5CFA, 0x551C,   // 0x0040 (64) pixels
0x3B73, 0x4458, 0x4CDB, 0x3A6B, 0x0000, 0x0000, 0x0000, 0x31A7, 0x5CFA, 0x5D9F, 0x43D5, 0x3B73, 0x4458, 0x3229, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x1082, 0x4B2F, 0x54B9, 0x5D3D, 0x54B9, 0x4350, 0x10A3, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A3, 0x42AC, 0x534F, 0x42AC,   // 0x0060 (96) pixels
0x18E4, 0x0000, 0x0000, 0x0000
};
const unsigned short pollution[100] PROGMEM={
0x0021, 0x3186, 0x39E7, 0x2965, 0x10A2, 0x39E8, 0x4A6A, 0x4208, 0x18C3, 0x0000, 0x2966, 0x8451, 0x6B6D, 0x4A8A, 0x3209, 0x31A7,   // 0x0010 (16) pixels
0x5B0C, 0x8C92, 0x6B6D, 0x0841, 0x31A7, 0x8451, 0x4A8A, 0x5308, 0x5B68, 0x1902, 0x10A2, 0x5B0C, 0x8C92, 0x3186, 0x2966, 0x7BF0,   // 0x0020 (32) pixels
0x39E7, 0xACA4, 0xCE27, 0xAD03, 0x3A42, 0x2125, 0x73AF, 0x3A08, 0x2125, 0x52AA, 0x5B62, 0xC6C5, 0xCF06, 0xCF06, 0x8E90, 0x2AAD,   // 0x0030 (48) pixels
0x18C3, 0x1082, 0x1082, 0x1925, 0x7D47, 0x8E90, 0x8674, 0x7E56, 0x6558, 0x7493, 0x3A08, 0x0000, 0x18C3, 0x1925, 0x756C, 0x9ECB,   // 0x0040 (64) pixels
0x7638, 0x7638, 0x9E8E, 0xA5E8, 0x2983, 0x0000, 0x1082, 0x6B6D, 0x958B, 0x9E48, 0x7615, 0x75F8, 0x9651, 0xA5EC, 0x52A9, 0x18C3,   // 0x0050 (80) pixels
0x0861, 0x31C7, 0x4267, 0x7D47, 0x6D52, 0x6CD3, 0x742D, 0x7BF0, 0x5B0C, 0x18C3, 0x0000, 0x0000, 0x0000, 0x1963, 0x4307, 0x4307,   // 0x0060 (96) pixels
0x2162, 0x10A2, 0x0021, 0x0000
};
const unsigned short wind[100] PROGMEM={
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x21C9, 0x12D0,   // 0x0010 (16) pixels
0x0168, 0x0000, 0x0000, 0x0000, 0x0000, 0x1125, 0x1946, 0x08C3, 0x32EE, 0x1146, 0x0AB0, 0x1146, 0x2A8C, 0x1987, 0x10C4, 0x32ED,   // 0x0020 (32) pixels
0x436F, 0x2209, 0x1125, 0x09A9, 0x0A8F, 0x32EE, 0x220A, 0x3B71, 0x32EE, 0x32EE, 0x32EE, 0x32EE, 0x32EE, 0x0A8F, 0x00A4, 0x1105,   // 0x0030 (48) pixels
0x1125, 0x3B71, 0x436F, 0x436F, 0x436F, 0x436F, 0x436F, 0x32EE, 0x3350, 0x3350, 0x32EE, 0x21C9, 0x10C4, 0x2A8C, 0x3B0F, 0x3B0F,   // 0x0040 (64) pixels
0x21C9, 0x0906, 0x09A9, 0x12D0, 0x0041, 0x0000, 0x0000, 0x1105, 0x1125, 0x1125, 0x08A3, 0x0AB0, 0x0127, 0x0AB0, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01CA, 0x0AB0, 0x0127, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
0x0000, 0x0000, 0x0000, 0x0000
};
const unsigned short fan[100] PROGMEM={
0x29C7, 0x63B0, 0x63F0, 0x6C11, 0x6C11, 0x6C11, 0x6C11, 0x63F0, 0x5390, 0x29C7, 0x63F0, 0xB63A, 0xC6DC, 0x9535, 0x63B0, 0x63B0,   // 0x0010 (16) pixels
0x9535, 0xC6DC, 0xB63A, 0x4B8F, 0x7C93, 0xCF1D, 0x84D4, 0x3AEE, 0x6453, 0x6453, 0x3AEE, 0x8D57, 0xC6DC, 0x53B0, 0x6C11, 0x9535,   // 0x0020 (32) pixels
0x3B30, 0x4350, 0xA67C, 0x8D57, 0x3B0F, 0x4350, 0x8CF5, 0x5BD1, 0x63F0, 0x63D0, 0x3B0F, 0x3AEE, 0x6C11, 0x5B8F, 0x432F, 0x3B0F,   // 0x0030 (48) pixels
0x5BB0, 0x53B0, 0x63F0, 0x5B8F, 0x5C12, 0x9E3B, 0x7C93, 0x6C32, 0xA67C, 0x5BD1, 0x536F, 0x53B0, 0x6C11, 0x8CD5, 0x432F, 0x95FA,   // 0x0040 (64) pixels
0x5C12, 0x432F, 0x9E3B, 0x536F, 0x84D4, 0x5BD1, 0x63F0, 0xC6DC, 0x8CD5, 0x3AEE, 0x3B30, 0x3B0F, 0x3AEE, 0x536F, 0x9535, 0x53B0,   // 0x0050 (80) pixels
0x63B0, 0xB63A, 0xC6DC, 0x8CD5, 0x5BB0, 0x5BB0, 0x8CD5, 0x84D4, 0x532E, 0x4B8F, 0x29C7, 0x63B0, 0x63F0, 0x6C11, 0x63F0, 0x63F0,   // 0x0060 (96) pixels
0x6C11, 0x63D0, 0x536F, 0x29C7
};
const unsigned short light[100] PROGMEM={
0x0000, 0x0000, 0x0020, 0x5A44, 0xBD2B, 0xBD2B, 0x4A04, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x5A44, 0xF64D, 0xFF0F, 0xFECF,   // 0x0010 (16) pixels
0xB4EA, 0x4A04, 0x0000, 0x0000, 0x0000, 0x0840, 0xC4C8, 0xFF0F, 0xFF0F, 0xFF0F, 0xEE8E, 0xA469, 0x1081, 0x0000, 0x0000, 0x0840,   // 0x0020 (32) pixels
0xCD29, 0xEE8E, 0xB4EA, 0xB4EA, 0xEE8E, 0xD5CD, 0x1081, 0x0000, 0x0000, 0x0000, 0x8B66, 0xEE2D, 0xBD2B, 0xBD2B, 0xEE6E, 0x8BE8,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x1881, 0xA407, 0xB4EA, 0xB4EA, 0xA469, 0x1881, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3122,   // 0x0040 (64) pixels
0x93C8, 0x9409, 0x3163, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2945, 0x83EF, 0x83EF, 0x2945, 0x0000, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x2104, 0x7BF0, 0x7BF0, 0x20E4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x2946, 0x2946,   // 0x0060 (96) pixels
0x0020, 0x0000, 0x0000, 0x0000
};
#define MAGENTA 0xF81F  // Định nghĩa màu Magenta 16-bit

constexpr int Pin_LCD_CS = 27;
constexpr int Pin_LCD_RS = 23;
constexpr int Pin_LCD_RST = 22;
constexpr int Pin_LCD_SCLK = 14;
constexpr int Pin_LCD_MISO = 12;
constexpr int Pin_LCD_SDA = 13;
Adafruit_ST7735 tft = Adafruit_ST7735(Pin_LCD_CS, Pin_LCD_RS, Pin_LCD_SDA, Pin_LCD_SCLK, Pin_LCD_RST);  // CS, DC, MOSI, SCLK, RST

const char* ssid = "Hao Hao";              // Tên mạng WiFi của bạn
const char* password = "hoanhao159";    // Mật khẩu mạng của bạn

const char* mqtt_server = "34f44a99a7284fa3955ec554253306f3.s1.eu.hivemq.cloud";
const int mqtt_port = 8883;
const char* mqtt_username = "phatquserver";  //User
const char* mqtt_password = "123456789aA";   //Password
WiFiClientSecure espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];
// #define REFERENCE_URL "https://project2-ec524-default-rtdb.firebaseio.com/"  // URL tham chiếu Firebase của bạn

// WiFiClient client;
// Firebase firebase(REFERENCE_URL);

uint8_t id, rw, temp,humi,crc;
uint16_t ppm,co;
#define RXD2 16  // Chân RX cho UART2 (nhận dữ liệu)
#define TXD2 17  // Chân TX cho UART2 (gửi dữ liệu)
#define ID_ESP 0x03
#define ID_STM32_1 0x01
#define ID_STM32_2 0x02
int tick =0;
typedef struct {
	uint8_t id;        // ID 8 bit
	uint8_t rw;        // Read (0) hoặc Write (1) 1 bit
	uint8_t d_humi;
	uint8_t d_temp;
	uint16_t d_ppm;
	uint16_t d_co;
  uint8_t speed;
  uint8_t RL1;
  uint8_t RL2;
} LoRaFrame;
LoRaFrame LoRaRx1;
LoRaFrame LoRaRx2;

LoRaFrame LoRaTx;
uint8_t flat = 0;
void setupTFT(){
  tft.initR(INITR_BLACKTAB);   // initialize a ST7735S chip, black tab
  tft.fillScreen(ST7735_BLACK);
  tft.setRotation(1);

  tft.setTextColor(ST7735_RED);  // Màu chữ
  tft.setTextSize(1);              // Kích thước chữ
  tft.setCursor(55, 20);           // Vị trí của chữ (x, y)
  tft.print("Node 1");

  tft.setTextColor(ST7735_RED);  // Màu chữ
  tft.setTextSize(1);              // Kích thước chữ
  tft.setCursor(115, 20);           // Vị trí của chữ (x, y)
  tft.print("Node 2");

  tft.drawRGBBitmap(5,12,ute,30,25);
  tft.drawRGBBitmap(15,42,temperature,10,10);
  tft.drawRGBBitmap(15,56,humidity,10,10);
  tft.drawRGBBitmap(15,70,pollution,10,10);
  tft.drawRGBBitmap(15,84,wind,10,10);
  tft.drawRGBBitmap(15,98,fan,10,10);
  tft.drawRGBBitmap(15,112,light,10,10);

  tft.drawRect(0, 10,160, 31,ST7735_WHITE);
  tft.drawRect(0, 10,40, 31,ST7735_WHITE);
  tft.drawRect(0, 10,100,31,ST7735_WHITE);

  tft.drawRect(0, 40,160, 15,ST7735_WHITE);
  tft.drawRect(0, 40,40, 15,ST7735_WHITE);
  tft.drawRect(0, 40,100, 15,ST7735_WHITE);

  tft.drawRect(0, 54,160, 15,ST7735_WHITE);
  tft.drawRect(0, 54,40, 15,ST7735_WHITE);
  tft.drawRect(0, 54,100, 15,ST7735_WHITE);

  tft.drawRect(0, 68,160, 15,ST7735_WHITE);
  tft.drawRect(0, 68,40, 15,ST7735_WHITE);
  tft.drawRect(0, 68,100, 15,ST7735_WHITE);

  tft.drawRect(0, 82,160, 15,ST7735_WHITE);
  tft.drawRect(0, 82,40, 15,ST7735_WHITE);
  tft.drawRect(0, 82,100, 15,ST7735_WHITE);

  tft.drawRect(0, 96,160, 15,ST7735_WHITE);
  tft.drawRect(0, 96,40, 15,ST7735_WHITE);
  tft.drawRect(0, 96,100, 15,ST7735_WHITE);

  tft.drawRect(0, 110,160, 15,ST7735_WHITE);
  tft.drawRect(0, 110,40, 15,ST7735_WHITE);
  tft.drawRect(0, 110,100, 15,ST7735_WHITE);

  tft.setCursor(55, 101);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  String newCoText1 = "OFF";
  tft.print(newCoText1);   

  tft.setCursor(55, 115);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  String newCoText2 = "OFF"; 
  tft.print(newCoText2);   
 
}
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientID = "ESPClient-";
    clientID += String(random(0xffff), HEX);
    if (client.connect(clientID.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("connected");
      client.subscribe("Data/input");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.println("Co data");
  String incommingMessage = "";
  for (int i = 0; i < length; i++) incommingMessage += (char)payload[i];
  Serial.println("Message arived [" + String(topic) + "]" + incommingMessage);

  // Sử dụng c_str() để chuyển đổi String thành const char*
  if(strstr(incommingMessage.c_str(), "FAN1")) {

    char buf[258];
    if(strstr(incommingMessage.c_str(), "ON")) {
      sprintf(buf, "{\"FAN1\": %u}\n", 1);
      Serial2.print(buf);
      flat = 1;
    } else {
      sprintf(buf, "{\"FAN1\": %u}\n", 0);
      Serial2.print(buf);  
      flat = 2;
    }
  }
  if(strstr(incommingMessage.c_str(), "LIGHT1")) {
    char buf[258];
    if(strstr(incommingMessage.c_str(), "ON")) {
      sprintf(buf, "{\"LIGHT1\": %u}\n", 1);
      Serial2.print(buf);
      flat = 3;
    } else {
      sprintf(buf, "{\"LIGHT1\": %u}\n", 0);
      Serial2.print(buf);      
      flat = 4;
    }
  }
}

//-----Method for Publishing MQTT Messages---------
void publishMessage(const char* topic, String payload, boolean retained) {
  if (client.publish(topic, payload.c_str(), true))
    Serial.println("Message published [" + String(topic) + "]: " + payload);
}

void LoRa_SendFrame(uint8_t id, uint8_t rw, LoRaFrame *data) {
	char buf[258];
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id, data->rw,
			data->d_humi, data->d_temp,data->d_ppm,data->d_co);
  Serial2.write(buf);
}
void UpdateTFT(LoRaFrame *pLoraFrame1, LoRaFrame *pLoraFrame2) {
  // Xóa nhiệt độ cũ
  tft.fillRect(54, 45, 30, 8, ST7735_BLACK);  // Tăng kích thước vùng xóa
  // In số mới với màu trắng
  tft.setCursor(54, 45);
  tft.setTextColor(ST7735_WHITE);  
  tft.setTextSize(1);
  String newTempText = String(pLoraFrame1->d_temp);
  tft.print(newTempText);

  // Xóa độ ẩm cũ
  tft.fillRect(54, 59, 30, 8, ST7735_BLACK);
  // In số mới với màu trắng
  tft.setCursor(54, 59);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  String newHumiText = String(pLoraFrame1->d_humi);
  tft.print(newHumiText);

  // Xóa nồng độ PPM cũ
  tft.fillRect(54, 73, 30, 8, ST7735_BLACK);
  // In số mới với màu trắng
  tft.setCursor(54, 73);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  String newPpmText = String(pLoraFrame1->d_ppm);
  tft.print(newPpmText);

  // Xóa nồng độ CO cũ
  tft.fillRect(54, 87, 30, 8, ST7735_BLACK);
  // In số mới với màu trắng
  tft.setCursor(54, 87);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  String newCoText = String(pLoraFrame1->d_co);
  tft.print(newCoText);

  // RL1 trạng thái quạt
  tft.fillRect(54, 101, 30, 8, ST7735_BLACK);
  tft.setCursor(54, 101);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  if (pLoraFrame1->RL1 == 0) {
      tft.print("ON"); 
  } else {
      tft.print("OFF");
  }

  // RL2 trạng thái đèn
  tft.fillRect(54, 115, 30, 8, ST7735_BLACK);
  tft.setCursor(54, 115);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextSize(1);
  if (pLoraFrame1->RL2 == 0) {
      tft.print("ON");
  } else {
      tft.print("OFF");
  }
}


void setup() {
  Serial.begin(115200);
  setupTFT();
  setup_wifi();
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2); 
  espClient.setInsecure();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  Serial.println("UART2 initialized on GPIO 16 (RX) and GPIO 17 (TX)");
  tick = millis();
}

void loop() {
  // Kiểm tra nếu có dữ liệu từ UART2 (thiết bị kết nối)
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
if (Serial2.available()) {
    String a;      // Khai báo biến kiểu String
    String b;      // Sử dụng String cho dữ liệu
    a = Serial2.readStringUntil('\r');  // Đọc dữ liệu từ Serial2 cho đến khi gặp '\r'

    // Chuyển đổi String thành mảng ký tự để sử dụng trong sscanf
    char buffer[512];
    a.toCharArray(buffer, sizeof(buffer));  // Chuyển đổi thành mảng ký tự
    JsonDocument doc;
    deserializeJson(doc, buffer);
    LoRaRx1.id = doc["ID"];
    LoRaRx1.rw = doc["RW"];
    LoRaRx1.d_humi = doc["HUMI"];
    LoRaRx1.d_temp = doc["TEMP"];
    LoRaRx1.d_ppm  = doc["PPM"];
    LoRaRx1.d_co   = doc["CO"];
    LoRaRx1.RL1    = doc["RL1"];
    LoRaRx1.RL2    = doc["RL2"];
    // In ra kết quả
    // In ra kết quả
    // Serial.print("Received: ");
    // Serial.println(buffer);  // In ra chuỗi đã nhận
    if(LoRaRx1.id == ID_STM32_1){
      // Serial.print("Dung ID STM32 1");
      if(LoRaRx1.rw == 1){
        // Serial.print("STM32 gui toi ESP voi quyen la gui");
        // Serial.print("Received: ");
        // Serial.print("ID: "); Serial.println(LoRaRx1.id);
        // Serial.print("RW: "); Serial.println(LoRaRx1.rw);
        // Serial.print("HUMI: "); Serial.println(LoRaRx1.d_humi);
        // Serial.print("TEMP: "); Serial.println(LoRaRx1.d_temp);
        // Serial.print("PPM: "); Serial.println(LoRaRx1.d_ppm);
        // Serial.print("CO: "); Serial.println(LoRaRx1.d_co);
        // Serial.print("RL1: "); Serial.println(LoRaRx1.RL1);
        Serial.print("RL2: "); Serial.println(LoRaRx1.RL2);
        publishMessage("Data", buffer, true);
        Serial.println("Da Gui Len MQTT BROKER");
        UpdateTFT(&LoRaRx1,&LoRaRx2);
      }else{
        Serial.print("STM32 gui toi ESP voi quyen la nhan");
        //TODO
      }
    }
}
if(millis() - tick >= 1700){
	char buf[258];
	sprintf(buf,
			"{\"ID\": %u}\n",ID_STM32_1);
    // LoRa_SendFrame(ID_ESP,1,&LoRaTx);
    Serial2.print(buf);
    // Serial.println("DA GUI XUONG STM32 1");
    tick = millis();

  }





// if(millis() - tick >= 5000){
// 	char buf[258];
// 	sprintf(buf,
// 			"{\"FAN1\": %u}\n",ID_STM32_1);
//     // LoRa_SendFrame(ID_ESP,1,&LoRaTx);
//     Serial2.print(buf);
//     Serial.println("DA GUI XUONG STM32 1");
//     tick = millis();
//   }
// if (millis() - tick >= 1200) {
//     char buf[258];
//     sprintf(buf,
//             "{\"ID\": %u, \"RL1\": 3, \"RL2\": 3}\n",
//             ID_STM32_2);  // Thay RL1_value và RL2_value bằng giá trị thực tế của RL1 và RL2
//     Serial2.print(buf);
//     Serial.println("DA GUI XUONG STM32 2");
//     tick = millis();
// }

  // Serial2.println("Hello World");
  // delay(500);

  // // Gửi dữ liệu từ Serial Monitor tới UART2
  // if (Serial.available()) {
  //   String input = Serial.readString();  // Đọc dữ liệu từ máy tính
  //   Serial2.println(input);              // Gửi dữ liệu tới UART2
  //   Serial.println("Sent to UART2: " + input);  // Xác nhận đã gửi
  // }
}

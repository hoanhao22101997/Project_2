
Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08008108  08008108  00018108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008998  08008998  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008998  08008998  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080089a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000078  08008a18  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08008a18  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012af4  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb1  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00035890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e03  00000000  00000000  00036a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f65  00000000  00000000  0003785b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cb3  00000000  00000000  000517c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009836e  00000000  00000000  00068473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054f0  00000000  00000000  001007e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00105cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080080ec 	.word	0x080080ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080080ec 	.word	0x080080ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2uiz>:
 8000f94:	0042      	lsls	r2, r0, #1
 8000f96:	d20e      	bcs.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30b      	bcc.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d409      	bmi.n	8000fbc <__aeabi_f2uiz+0x28>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr
 8000fbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc0:	d101      	bne.n	8000fc6 <__aeabi_f2uiz+0x32>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_f2uiz+0x38>
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <HAL_UART_RxCpltCallback>:
	uint8_t crc;       // CRC 8 bit dùng để kiểm tra lỗi
	uint8_t endframe;
} LoRaFrame;
LoRaFrame LoRaTx;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_UART_RxCpltCallback+0x70>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12a      	bne.n	800103c <HAL_UART_RxCpltCallback+0x68>
		// Kiểm tra ký tự nhận được
		if (rx_data[0] == ID_ESP) {
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d102      	bne.n	8000ff4 <HAL_UART_RxCpltCallback+0x20>
			flat = 1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_RxCpltCallback+0x78>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
		}
		if (rx_data[0] != '\r')  // So sánh ký tự
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b0d      	cmp	r3, #13
 8000ffa:	d00b      	beq.n	8001014 <HAL_UART_RxCpltCallback+0x40>
				{
			buffer[index_buffer++] = rx_data[0];  // Lưu vào buffer
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_RxCpltCallback+0x7c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	b2d1      	uxtb	r1, r2
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_UART_RxCpltCallback+0x7c>)
 8001006:	7011      	strb	r1, [r2, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 800100c:	7819      	ldrb	r1, [r3, #0]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_RxCpltCallback+0x80>)
 8001010:	5499      	strb	r1, [r3, r2]
 8001012:	e00e      	b.n	8001032 <HAL_UART_RxCpltCallback+0x5e>
		} else {
			if (buffer[3] == ID_ESP) {
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_UART_RxCpltCallback+0x80>)
 8001016:	78db      	ldrb	r3, [r3, #3]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d102      	bne.n	8001022 <HAL_UART_RxCpltCallback+0x4e>
				flat = 1;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_UART_RxCpltCallback+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
////            uint8_t test = CalculateCRC(&LoRaRx.data,index_buffer - 2);
//			if (LoRaRx.crc == test) {
//				int a = 1;
//			}
			// Xử lý dữ liệu đã nhận, hoặc g�?i hàm xử lý tại đây
			memset(buffer, '\0', sizeof(buffer));
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	2100      	movs	r1, #0
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_UART_RxCpltCallback+0x80>)
 8001028:	f005 fcc6 	bl	80069b8 <memset>

			index_buffer = 0;  // Reset lại chỉ số buffer để nhận tiếp
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_UART_RxCpltCallback+0x7c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
		}

		// Kích hoạt lại ngắt UART để nhận byte tiếp theo
		HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	4904      	ldr	r1, [pc, #16]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <HAL_UART_RxCpltCallback+0x84>)
 8001038:	f004 fa59 	bl	80054ee <HAL_UART_Receive_IT>
	}
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013800 	.word	0x40013800
 8001048:	200002ec 	.word	0x200002ec
 800104c:	20000374 	.word	0x20000374
 8001050:	20000370 	.word	0x20000370
 8001054:	200002f0 	.word	0x200002f0
 8001058:	20000268 	.word	0x20000268

0800105c <LoRa_SendFrame>:

// Hàm gửi khung dữ liệu (chuỗi) qua UART cho LoRa E32
void LoRa_SendFrame(LoRaFrame *data) {
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b0c9      	sub	sp, #292	; 0x124
 8001060:	af04      	add	r7, sp, #16
 8001062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001066:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800106a:	6018      	str	r0, [r3, #0]
//	uint8_t end = sizeof(frame.data) - 1;
//	frame.data[end] = '/0';
//	uint8_t len = strlen(data);
//	frame.crc = CalculateCRC(&frame, len);
	char buf[258];
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id,
 800106c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001070:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461d      	mov	r5, r3
			data->rw, data->d_humi, data->d_temp, data->d_ppm, data->d_co);
 800107a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800107e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	785b      	ldrb	r3, [r3, #1]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id,
 8001086:	461e      	mov	r6, r3
			data->rw, data->d_humi, data->d_temp, data->d_ppm, data->d_co);
 8001088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id,
 8001094:	461a      	mov	r2, r3
			data->rw, data->d_humi, data->d_temp, data->d_ppm, data->d_co);
 8001096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800109a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	78db      	ldrb	r3, [r3, #3]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id,
 80010a2:	4619      	mov	r1, r3
			data->rw, data->d_humi, data->d_temp, data->d_ppm, data->d_co);
 80010a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	889b      	ldrh	r3, [r3, #4]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id,
 80010b0:	461c      	mov	r4, r3
			data->rw, data->d_humi, data->d_temp, data->d_ppm, data->d_co);
 80010b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	88db      	ldrh	r3, [r3, #6]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id,
 80010be:	f107 000c 	add.w	r0, r7, #12
 80010c2:	9303      	str	r3, [sp, #12]
 80010c4:	9402      	str	r4, [sp, #8]
 80010c6:	9101      	str	r1, [sp, #4]
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	462a      	mov	r2, r5
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <LoRa_SendFrame+0x9c>)
 80010d0:	f005 fc52 	bl	8006978 <siprintf>
	// Gửi khung dữ liệu qua UART
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 100);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f839 	bl	8000150 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f107 010c 	add.w	r1, r7, #12
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <LoRa_SendFrame+0xa0>)
 80010ea:	f004 f975 	bl	80053d8 <HAL_UART_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	08008108 	.word	0x08008108
 80010fc:	20000268 	.word	0x20000268

08001100 <UpdateOled>:
void UpdateOled(Peripheral_t *pPeripheralData_t) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b0c4      	sub	sp, #272	; 0x110
 8001104:	af00      	add	r7, sp, #0
 8001106:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800110a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800110e:	6018      	str	r0, [r3, #0]
	char buf_h[50];
	char buf_ppm[50];
	char buf_co[50];
	char buf_sp[50];
//	SSD1306_Clear();
	sprintf(buf_t, "Temperature: %u ", pPeripheralData_t->dht.temperature);
 8001110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800111e:	461a      	mov	r2, r3
 8001120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001124:	4941      	ldr	r1, [pc, #260]	; (800122c <UpdateOled+0x12c>)
 8001126:	4618      	mov	r0, r3
 8001128:	f005 fc26 	bl	8006978 <siprintf>
	sprintf(buf_h, "Humidity: %u", pPeripheralData_t->dht.humidty);
 800112c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001130:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800113a:	461a      	mov	r2, r3
 800113c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001140:	493b      	ldr	r1, [pc, #236]	; (8001230 <UpdateOled+0x130>)
 8001142:	4618      	mov	r0, r3
 8001144:	f005 fc18 	bl	8006978 <siprintf>
	sprintf(buf_ppm, "PPM: %Lu", (uint16_t) pPeripheralData_t->ppm);
 8001148:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800114c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff1d 	bl	8000f94 <__aeabi_f2uiz>
 800115a:	4603      	mov	r3, r0
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001164:	4933      	ldr	r1, [pc, #204]	; (8001234 <UpdateOled+0x134>)
 8001166:	4618      	mov	r0, r3
 8001168:	f005 fc06 	bl	8006978 <siprintf>
	sprintf(buf_co, "CO: %Lu", (uint16_t) pPeripheralData_t->SensorCo);
 800116c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001170:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff0b 	bl	8000f94 <__aeabi_f2uiz>
 800117e:	4603      	mov	r3, r0
 8001180:	b29b      	uxth	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	492b      	ldr	r1, [pc, #172]	; (8001238 <UpdateOled+0x138>)
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fbf4 	bl	8006978 <siprintf>
	sprintf(buf_sp, "Speed fan: %u", 0);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	4929      	ldr	r1, [pc, #164]	; (800123c <UpdateOled+0x13c>)
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fbed 	bl	8006978 <siprintf>

	SSD1306_GotoXY(40, 0); // goto 10, 10
 800119e:	2100      	movs	r1, #0
 80011a0:	2028      	movs	r0, #40	; 0x28
 80011a2:	f005 f89b 	bl	80062dc <SSD1306_GotoXY>
	SSD1306_Puts("NODE1", &Font_7x10, 1); // print Hello
 80011a6:	2201      	movs	r2, #1
 80011a8:	4925      	ldr	r1, [pc, #148]	; (8001240 <UpdateOled+0x140>)
 80011aa:	4826      	ldr	r0, [pc, #152]	; (8001244 <UpdateOled+0x144>)
 80011ac:	f005 f92c 	bl	8006408 <SSD1306_Puts>

	SSD1306_GotoXY(0, 10);
 80011b0:	210a      	movs	r1, #10
 80011b2:	2000      	movs	r0, #0
 80011b4:	f005 f892 	bl	80062dc <SSD1306_GotoXY>
	SSD1306_Puts(buf_t, &Font_7x10, 1);
 80011b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011bc:	2201      	movs	r2, #1
 80011be:	4920      	ldr	r1, [pc, #128]	; (8001240 <UpdateOled+0x140>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 f921 	bl	8006408 <SSD1306_Puts>

	SSD1306_GotoXY(0, 20); // goto 10, 10
 80011c6:	2114      	movs	r1, #20
 80011c8:	2000      	movs	r0, #0
 80011ca:	f005 f887 	bl	80062dc <SSD1306_GotoXY>
	SSD1306_Puts(buf_h, &Font_7x10, 1); // print Hello
 80011ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011d2:	2201      	movs	r2, #1
 80011d4:	491a      	ldr	r1, [pc, #104]	; (8001240 <UpdateOled+0x140>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 f916 	bl	8006408 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 80011dc:	211e      	movs	r1, #30
 80011de:	2000      	movs	r0, #0
 80011e0:	f005 f87c 	bl	80062dc <SSD1306_GotoXY>
	SSD1306_Puts(buf_ppm, &Font_7x10, 1);
 80011e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011e8:	2201      	movs	r2, #1
 80011ea:	4915      	ldr	r1, [pc, #84]	; (8001240 <UpdateOled+0x140>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 f90b 	bl	8006408 <SSD1306_Puts>

	SSD1306_GotoXY(0, 40);
 80011f2:	2128      	movs	r1, #40	; 0x28
 80011f4:	2000      	movs	r0, #0
 80011f6:	f005 f871 	bl	80062dc <SSD1306_GotoXY>
	SSD1306_Puts(buf_co, &Font_7x10, 1);
 80011fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011fe:	2201      	movs	r2, #1
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <UpdateOled+0x140>)
 8001202:	4618      	mov	r0, r3
 8001204:	f005 f900 	bl	8006408 <SSD1306_Puts>

	SSD1306_GotoXY(0, 50);
 8001208:	2132      	movs	r1, #50	; 0x32
 800120a:	2000      	movs	r0, #0
 800120c:	f005 f866 	bl	80062dc <SSD1306_GotoXY>
	SSD1306_Puts(buf_sp, &Font_7x10, 1);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2201      	movs	r2, #1
 8001216:	490a      	ldr	r1, [pc, #40]	; (8001240 <UpdateOled+0x140>)
 8001218:	4618      	mov	r0, r3
 800121a:	f005 f8f5 	bl	8006408 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 800121e:	f004 ffb9 	bl	8006194 <SSD1306_UpdateScreen>

}
 8001222:	bf00      	nop
 8001224:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08008138 	.word	0x08008138
 8001230:	0800814c 	.word	0x0800814c
 8001234:	0800815c 	.word	0x0800815c
 8001238:	08008168 	.word	0x08008168
 800123c:	08008170 	.word	0x08008170
 8001240:	2000000c 	.word	0x2000000c
 8001244:	08008180 	.word	0x08008180

08001248 <UpdateSensorData>:
void UpdateSensorData(dht11_t *pdht, Peripheral_t *pPeripheralData) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	readDHT11(pdht);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f005 f9e5 	bl	8006622 <readDHT11>
	pPeripheralData->dht.temperature = dht.temperature;
 8001258:	4b45      	ldr	r3, [pc, #276]	; (8001370 <UpdateSensorData+0x128>)
 800125a:	7b1a      	ldrb	r2, [r3, #12]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pPeripheralData->dht.humidty = dht.humidty;
 8001262:	4b43      	ldr	r3, [pc, #268]	; (8001370 <UpdateSensorData+0x128>)
 8001264:	7b5a      	ldrb	r2, [r3, #13]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pPeripheralData->SensorCo = analogRead(&hadc2) / 3;
 800126c:	4841      	ldr	r0, [pc, #260]	; (8001374 <UpdateSensorData+0x12c>)
 800126e:	f005 fb46 	bl	80068fe <analogRead>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b40      	ldr	r3, [pc, #256]	; (8001378 <UpdateSensorData+0x130>)
 8001278:	fba3 2302 	umull	r2, r3, r3, r2
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	b29b      	uxth	r3, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fce3 	bl	8000c4c <__aeabi_i2f>
 8001286:	4602      	mov	r2, r0
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28

	pPeripheralData->sensorvalue = analogRead(&hadc1);
 800128c:	483b      	ldr	r0, [pc, #236]	; (800137c <UpdateSensorData+0x134>)
 800128e:	f005 fb36 	bl	80068fe <analogRead>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	601a      	str	r2, [r3, #0]
	pPeripheralData->voltage = pPeripheralData->sensorvalue * (5 / 4095.0);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8b0 	bl	8000404 <__aeabi_i2d>
 80012a4:	a32a      	add	r3, pc, #168	; (adr r3, 8001350 <UpdateSensorData+0x108>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f915 	bl	80004d8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fbbf 	bl	8000a38 <__aeabi_d2f>
 80012ba:	4602      	mov	r2, r0
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	605a      	str	r2, [r3, #4]
	pPeripheralData->rs = (5 - pPeripheralData->voltage)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <UpdateSensorData+0x138>)
 80012c8:	f7ff fc0a 	bl	8000ae0 <__aeabi_fsub>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
			/ PeripheralData.voltage* RL;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <UpdateSensorData+0x13c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4610      	mov	r0, r2
 80012d8:	f7ff fdc0 	bl	8000e5c <__aeabi_fdiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	492a      	ldr	r1, [pc, #168]	; (8001388 <UpdateSensorData+0x140>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd07 	bl	8000cf4 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
	pPeripheralData->rs = (5 - pPeripheralData->voltage)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	609a      	str	r2, [r3, #8]
	pPeripheralData->ratio = pPeripheralData->rs / R0;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f898 	bl	8000428 <__aeabi_f2d>
 80012f8:	a317      	add	r3, pc, #92	; (adr r3, 8001358 <UpdateSensorData+0x110>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff fa15 	bl	800072c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fb95 	bl	8000a38 <__aeabi_d2f>
 800130e:	4602      	mov	r2, r0
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	60da      	str	r2, [r3, #12]
	pPeripheralData->ppm = 116.6020682 * pow(pPeripheralData->ratio, -2.769034857);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	a310      	add	r3, pc, #64	; (adr r3, 8001360 <UpdateSensorData+0x118>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f005 ffda 	bl	80072dc <pow>
 8001328:	a30f      	add	r3, pc, #60	; (adr r3, 8001368 <UpdateSensorData+0x120>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f8d3 	bl	80004d8 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fb7d 	bl	8000a38 <__aeabi_d2f>
 800133e:	4602      	mov	r2, r0
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	611a      	str	r2, [r3, #16]
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	f3af 8000 	nop.w
 8001350:	14014014 	.word	0x14014014
 8001354:	3f540140 	.word	0x3f540140
 8001358:	eb851eb8 	.word	0xeb851eb8
 800135c:	40532851 	.word	0x40532851
 8001360:	bf42646d 	.word	0xbf42646d
 8001364:	c00626fb 	.word	0xc00626fb
 8001368:	490f3d8b 	.word	0x490f3d8b
 800136c:	405d2688 	.word	0x405d2688
 8001370:	200002dc 	.word	0x200002dc
 8001374:	200000c4 	.word	0x200000c4
 8001378:	aaaaaaab 	.word	0xaaaaaaab
 800137c:	20000094 	.word	0x20000094
 8001380:	40a00000 	.word	0x40a00000
 8001384:	200002b0 	.word	0x200002b0
 8001388:	41200000 	.word	0x41200000

0800138c <LoRa_UpdateFrame>:
void LoRa_UpdateFrame(LoRaFrame *pLoRaFrame, uint8_t id, uint8_t rw,
		Peripheral_t *pPeripheralData) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	72fb      	strb	r3, [r7, #11]
 800139a:	4613      	mov	r3, r2
 800139c:	72bb      	strb	r3, [r7, #10]

	pLoRaFrame->id = id;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	7afa      	ldrb	r2, [r7, #11]
 80013a2:	701a      	strb	r2, [r3, #0]
	pLoRaFrame->rw = rw;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	7aba      	ldrb	r2, [r7, #10]
 80013a8:	705a      	strb	r2, [r3, #1]
	pLoRaFrame->d_temp = pPeripheralData->dht.temperature;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	70da      	strb	r2, [r3, #3]
	pLoRaFrame->d_humi = pPeripheralData->dht.humidty;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	709a      	strb	r2, [r3, #2]
	pLoRaFrame->d_ppm = (uint16_t) pPeripheralData->ppm;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fde6 	bl	8000f94 <__aeabi_f2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	809a      	strh	r2, [r3, #4]
	pLoRaFrame->d_co = (uint16_t) pPeripheralData->SensorCo;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fddd 	bl	8000f94 <__aeabi_f2uiz>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	80da      	strh	r2, [r3, #6]

}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013f2:	f000 fdb7 	bl	8001f64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013f6:	f000 f86d 	bl	80014d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013fa:	f000 faf1 	bl	80019e0 <MX_GPIO_Init>
	MX_TIM4_Init();
 80013fe:	f000 fa77 	bl	80018f0 <MX_TIM4_Init>
	MX_TIM1_Init();
 8001402:	f000 f961 	bl	80016c8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001406:	f000 f9af 	bl	8001768 <MX_TIM2_Init>
	MX_TIM3_Init();
 800140a:	f000 fa23 	bl	8001854 <MX_TIM3_Init>
	MX_ADC1_Init();
 800140e:	f000 f8b1 	bl	8001574 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001412:	f000 f8ed 	bl	80015f0 <MX_ADC2_Init>
	MX_USART1_UART_Init();
 8001416:	f000 fab9 	bl	800198c <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800141a:	f000 f927 	bl	800166c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);
 800141e:	4823      	ldr	r0, [pc, #140]	; (80014ac <main+0xc0>)
 8001420:	f003 f988 	bl	8004734 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001424:	2100      	movs	r1, #0
 8001426:	4822      	ldr	r0, [pc, #136]	; (80014b0 <main+0xc4>)
 8001428:	f003 fa4c 	bl	80048c4 <HAL_TIM_PWM_Start>
	timer_init(&htim3);
 800142c:	4821      	ldr	r0, [pc, #132]	; (80014b4 <main+0xc8>)
 800142e:	f005 fa7f 	bl	8006930 <timer_init>
	SSD1306_Init(); // initialise the display
 8001432:	f004 fdeb 	bl	800600c <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001436:	2000      	movs	r0, #0
 8001438:	f004 feda 	bl	80061f0 <SSD1306_Fill>
	init_dht11(&dht, &htim4, GPIOA, DHT_Pin);
 800143c:	2308      	movs	r3, #8
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <main+0xcc>)
 8001440:	491a      	ldr	r1, [pc, #104]	; (80014ac <main+0xc0>)
 8001442:	481e      	ldr	r0, [pc, #120]	; (80014bc <main+0xd0>)
 8001444:	f005 f89e 	bl	8006584 <init_dht11>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_data, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	491d      	ldr	r1, [pc, #116]	; (80014c0 <main+0xd4>)
 800144c:	481d      	ldr	r0, [pc, #116]	; (80014c4 <main+0xd8>)
 800144e:	f004 f84e 	bl	80054ee <HAL_UART_Receive_IT>
	uint16_t tick = HAL_GetTick();
 8001452:	f000 fddf 	bl	8002014 <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
	while (1) {
		if (HAL_GetTick() - tick >= 100) {
 800145a:	f000 fddb 	bl	8002014 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b63      	cmp	r3, #99	; 0x63
 8001466:	d90a      	bls.n	800147e <main+0x92>
			UpdateSensorData(&dht, &PeripheralData);
 8001468:	4917      	ldr	r1, [pc, #92]	; (80014c8 <main+0xdc>)
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <main+0xd0>)
 800146c:	f7ff feec 	bl	8001248 <UpdateSensorData>
			UpdateOled(&PeripheralData);
 8001470:	4815      	ldr	r0, [pc, #84]	; (80014c8 <main+0xdc>)
 8001472:	f7ff fe45 	bl	8001100 <UpdateOled>
			tick = HAL_GetTick();
 8001476:	f000 fdcd 	bl	8002014 <HAL_GetTick>
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
		}

		if (flat == 1) {
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <main+0xe0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10b      	bne.n	800149e <main+0xb2>
			LoRa_UpdateFrame(&LoRaTx, ID_STM32_1, WRITE, &PeripheralData);
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <main+0xdc>)
 8001488:	2201      	movs	r2, #1
 800148a:	2101      	movs	r1, #1
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <main+0xe4>)
 800148e:	f7ff ff7d 	bl	800138c <LoRa_UpdateFrame>
			LoRa_SendFrame(&LoRaTx);
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <main+0xe4>)
 8001494:	f7ff fde2 	bl	800105c <LoRa_SendFrame>
			flat = 0;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <main+0xe0>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <main+0xc4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_GetTick() - tick >= 100) {
 80014a8:	e7d7      	b.n	800145a <main+0x6e>
 80014aa:	bf00      	nop
 80014ac:	20000220 	.word	0x20000220
 80014b0:	20000190 	.word	0x20000190
 80014b4:	200001d8 	.word	0x200001d8
 80014b8:	40010800 	.word	0x40010800
 80014bc:	200002dc 	.word	0x200002dc
 80014c0:	200002ec 	.word	0x200002ec
 80014c4:	20000268 	.word	0x20000268
 80014c8:	200002b0 	.word	0x200002b0
 80014cc:	20000374 	.word	0x20000374
 80014d0:	20000378 	.word	0x20000378

080014d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	2228      	movs	r2, #40	; 0x28
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fa68 	bl	80069b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150c:	2310      	movs	r3, #16
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001510:	2300      	movs	r3, #0
 8001512:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fb3f 	bl	8003b9c <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x54>
		Error_Handler();
 8001524:	f000 fabc 	bl	8001aa0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fdac 	bl	80040a0 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x7e>
		Error_Handler();
 800154e:	f000 faa7 	bl	8001aa0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001552:	2302      	movs	r3, #2
 8001554:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f002 ff2d 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x98>
		Error_Handler();
 8001568:	f000 fa9a 	bl	8001aa0 <Error_Handler>
	}
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	; 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_ADC1_Init+0x74>)
 8001586:	4a19      	ldr	r2, [pc, #100]	; (80015ec <MX_ADC1_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_ADC1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_ADC1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_ADC1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_ADC1_Init+0x74>)
 800159e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015a2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_ADC1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_ADC1_Init+0x74>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_ADC1_Init+0x74>)
 80015b2:	f000 fd5d 	bl	8002070 <HAL_ADC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80015bc:	f000 fa70 	bl	8001aa0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_ADC1_Init+0x74>)
 80015d2:	f001 f811 	bl	80025f8 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80015dc:	f000 fa60 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000094 	.word	0x20000094
 80015ec:	40012400 	.word	0x40012400

080015f0 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_ADC2_Init+0x74>)
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <MX_ADC2_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_ADC2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_ADC2_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_ADC2_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_ADC2_Init+0x74>)
 800161a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800161e:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_ADC2_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_ADC2_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_ADC2_Init+0x74>)
 800162e:	f000 fd1f 	bl	8002070 <HAL_ADC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC2_Init+0x4c>
		Error_Handler();
 8001638:	f000 fa32 	bl	8001aa0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800163c:	2301      	movs	r3, #1
 800163e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001640:	2301      	movs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001644:	2302      	movs	r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_ADC2_Init+0x74>)
 800164e:	f000 ffd3 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC2_Init+0x6c>
		Error_Handler();
 8001658:	f000 fa22 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000c4 	.word	0x200000c4
 8001668:	40012800 	.word	0x40012800

0800166c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x50>)
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x54>)
 8001674:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x50>)
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x58>)
 800167a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_I2C1_Init+0x50>)
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_I2C1_Init+0x50>)
 80016aa:	f001 fcad 	bl	8003008 <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80016b4:	f000 f9f4 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200000f4 	.word	0x200000f4
 80016c0:	40005400 	.word	0x40005400
 80016c4:	00061a80 	.word	0x00061a80

080016c8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_TIM1_Init+0x98>)
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <MX_TIM1_Init+0x9c>)
 80016e8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM1_Init+0x98>)
 80016ec:	2208      	movs	r2, #8
 80016ee:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_TIM1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM1_Init+0x98>)
 80016f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM1_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_TIM1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_TIM1_Init+0x98>)
 8001712:	f002 ffbf 	bl	8004694 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x58>
		Error_Handler();
 800171c:	f000 f9c0 	bl	8001aa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_TIM1_Init+0x98>)
 800172e:	f003 fa2d 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x74>
		Error_Handler();
 8001738:	f000 f9b2 	bl	8001aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_TIM1_Init+0x98>)
 800174a:	f003 fd97 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001754:	f000 f9a4 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000148 	.word	0x20000148
 8001764:	40012c00 	.word	0x40012c00

08001768 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b08e      	sub	sp, #56	; 0x38
 800176c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800176e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_TIM2_Init+0xe8>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7;
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017a2:	2207      	movs	r2, #7
 80017a4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017b2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017c0:	4823      	ldr	r0, [pc, #140]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017c2:	f002 ff67 	bl	8004694 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x68>
		Error_Handler();
 80017cc:	f000 f968 	bl	8001aa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	4619      	mov	r1, r3
 80017dc:	481c      	ldr	r0, [pc, #112]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017de:	f003 f9d5 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM2_Init+0x84>
		Error_Handler();
 80017e8:	f000 f95a 	bl	8001aa0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80017ec:	4818      	ldr	r0, [pc, #96]	; (8001850 <MX_TIM2_Init+0xe8>)
 80017ee:	f003 f811 	bl	8004814 <HAL_TIM_PWM_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x94>
		Error_Handler();
 80017f8:	f000 f952 	bl	8001aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4619      	mov	r1, r3
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <MX_TIM2_Init+0xe8>)
 800180c:	f003 fd36 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001816:	f000 f943 	bl	8001aa0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181a:	2360      	movs	r3, #96	; 0x60
 800181c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM2_Init+0xe8>)
 8001832:	f003 f8e9 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 800183c:	f000 f930 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM2_Init+0xe8>)
 8001842:	f000 fa61 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001846:	bf00      	nop
 8001848:	3738      	adds	r7, #56	; 0x38
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000190 	.word	0x20000190

08001854 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_TIM3_Init+0x94>)
 8001872:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <MX_TIM3_Init+0x98>)
 8001874:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <MX_TIM3_Init+0x94>)
 8001878:	2207      	movs	r2, #7
 800187a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_TIM3_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_TIM3_Init+0x94>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_TIM3_Init+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_TIM3_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <MX_TIM3_Init+0x94>)
 8001898:	f002 fefc 	bl	8004694 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80018a2:	f000 f8fd 	bl	8001aa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <MX_TIM3_Init+0x94>)
 80018b4:	f003 f96a 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80018be:	f000 f8ef 	bl	8001aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80018ca:	463b      	mov	r3, r7
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_TIM3_Init+0x94>)
 80018d0:	f003 fcd4 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80018da:	f000 f8e1 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001d8 	.word	0x200001d8
 80018ec:	40000400 	.word	0x40000400

080018f0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_TIM4_Init+0x94>)
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <MX_TIM4_Init+0x98>)
 8001910:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 7;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_TIM4_Init+0x94>)
 8001914:	2207      	movs	r2, #7
 8001916:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_TIM4_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_TIM4_Init+0x94>)
 8001920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001924:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_TIM4_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_TIM4_Init+0x94>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001932:	4814      	ldr	r0, [pc, #80]	; (8001984 <MX_TIM4_Init+0x94>)
 8001934:	f002 feae 	bl	8004694 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x52>
		Error_Handler();
 800193e:	f000 f8af 	bl	8001aa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	4619      	mov	r1, r3
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_TIM4_Init+0x94>)
 8001950:	f003 f91c 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x6e>
		Error_Handler();
 800195a:	f000 f8a1 	bl	8001aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001966:	463b      	mov	r3, r7
 8001968:	4619      	mov	r1, r3
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <MX_TIM4_Init+0x94>)
 800196c:	f003 fc86 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001976:	f000 f893 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000220 	.word	0x20000220
 8001988:	40000800 	.word	0x40000800

0800198c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_USART1_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800199c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019c4:	f003 fcb8 	bl	8005338 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80019ce:	f000 f867 	bl	8001aa0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000268 	.word	0x20000268
 80019dc:	40013800 	.word	0x40013800

080019e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <MX_GPIO_Init+0xb4>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <MX_GPIO_Init+0xb4>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_GPIO_Init+0xb4>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001a42:	4815      	ldr	r0, [pc, #84]	; (8001a98 <MX_GPIO_Init+0xb8>)
 8001a44:	f001 fac7 	bl	8002fd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DHT11_PIN_Pin | DHT_Pin, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	210c      	movs	r1, #12
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <MX_GPIO_Init+0xbc>)
 8001a4e:	f001 fac2 	bl	8002fd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 8001a52:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480b      	ldr	r0, [pc, #44]	; (8001a98 <MX_GPIO_Init+0xb8>)
 8001a6c:	f001 f918 	bl	8002ca0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DHT11_PIN_Pin DHT_Pin */
	GPIO_InitStruct.Pin = DHT11_PIN_Pin | DHT_Pin;
 8001a70:	230c      	movs	r3, #12
 8001a72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_GPIO_Init+0xbc>)
 8001a88:	f001 f90a 	bl	8002ca0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40010800 	.word	0x40010800

08001aa0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_MspInit+0x5c>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_MspInit+0x60>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_MspInit+0x60>)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <HAL_ADC_MspInit+0xbc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d122      	bne.n	8001b76 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b64:	2303      	movs	r3, #3
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <HAL_ADC_MspInit+0xc4>)
 8001b70:	f001 f896 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b74:	e026      	b.n	8001bc4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_ADC_MspInit+0xc8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d121      	bne.n	8001bc4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_ADC_MspInit+0xc0>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_ADC_MspInit+0xc4>)
 8001bc0:	f001 f86e 	bl	8002ca0 <HAL_GPIO_Init>
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40012400 	.word	0x40012400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40012800 	.word	0x40012800

08001bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_I2C_MspInit+0x70>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d123      	bne.n	8001c44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_I2C_MspInit+0x74>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c14:	23c0      	movs	r3, #192	; 0xc0
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	480b      	ldr	r0, [pc, #44]	; (8001c54 <HAL_I2C_MspInit+0x78>)
 8001c28:	f001 f83a 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010c00 	.word	0x40010c00

08001c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10c      	bne.n	8001c84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c74:	6193      	str	r3, [r2, #24]
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c82:	e034      	b.n	8001cee <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
}
 8001ca6:	e022      	b.n	8001cee <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_TIM_Base_MspInit+0xa8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10c      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
}
 8001cca:	e010      	b.n	8001cee <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10b      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d26:	d12a      	bne.n	8001d7e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_TIM_MspPostInit+0x80>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_TIM_MspPostInit+0x80>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_TIM_MspPostInit+0x80>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	4619      	mov	r1, r3
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <HAL_TIM_MspPostInit+0x84>)
 8001d56:	f000 ffa3 	bl	8002ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_TIM_MspPostInit+0x88>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_TIM_MspPostInit+0x88>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40010000 	.word	0x40010000

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d139      	bne.n	8001e28 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4619      	mov	r1, r3
 8001df8:	480f      	ldr	r0, [pc, #60]	; (8001e38 <HAL_UART_MspInit+0xa4>)
 8001dfa:	f000 ff51 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <HAL_UART_MspInit+0xa4>)
 8001e14:	f000 ff44 	bl	8002ca0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2025      	movs	r0, #37	; 0x25
 8001e1e:	f000 fe56 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e22:	2025      	movs	r0, #37	; 0x25
 8001e24:	f000 fe6f 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <NMI_Handler+0x4>

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 f8b5 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART1_IRQHandler+0x10>)
 8001e92:	f003 fb51 	bl	8005538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000268 	.word	0x20000268

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f004 fd7a 	bl	80069c8 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005000 	.word	0x20005000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20000384 	.word	0x20000384
 8001f08:	200008e8 	.word	0x200008e8

08001f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f18:	f7ff fff8 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f1e:	490c      	ldr	r1, [pc, #48]	; (8001f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f34:	4c09      	ldr	r4, [pc, #36]	; (8001f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f004 fd47 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f46:	f7ff fa51 	bl	80013ec <main>
  bx lr
 8001f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f54:	080089a0 	.word	0x080089a0
  ldr r2, =_sbss
 8001f58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f5c:	200008e8 	.word	0x200008e8

08001f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_2_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x28>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x28>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 fd9f 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fd94 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fdb7 	bl	8002b22 <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 fd7f 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x1c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x20>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_IncTick+0x20>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000008 	.word	0x20000008
 8002010:	20000388 	.word	0x20000388

08002014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <HAL_GetTick+0x10>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000388 	.word	0x20000388

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff fff0 	bl	8002014 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffe0 	bl	8002014 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008

08002070 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0be      	b.n	8002210 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fd2e 	bl	8001b10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fbf1 	bl	800289c <ADC_ConversionStop_Disable>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8099 	bne.w	80021fe <HAL_ADC_Init+0x18e>
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8095 	bne.w	80021fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020dc:	f023 0302 	bic.w	r3, r3, #2
 80020e0:	f043 0202 	orr.w	r2, r3, #2
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7b1b      	ldrb	r3, [r3, #12]
 80020f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002108:	d003      	beq.n	8002112 <HAL_ADC_Init+0xa2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_ADC_Init+0xa8>
 8002112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002116:	e000      	b.n	800211a <HAL_ADC_Init+0xaa>
 8002118:	2300      	movs	r3, #0
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7d1b      	ldrb	r3, [r3, #20]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d119      	bne.n	800215c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7b1b      	ldrb	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	3b01      	subs	r3, #1
 8002136:	035a      	lsls	r2, r3, #13
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e00b      	b.n	800215c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_ADC_Init+0x1a8>)
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	430b      	orrs	r3, r1
 8002182:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800218c:	d003      	beq.n	8002196 <HAL_ADC_Init+0x126>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d104      	bne.n	80021a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	3b01      	subs	r3, #1
 800219c:	051b      	lsls	r3, r3, #20
 800219e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_ADC_Init+0x1ac>)
 80021bc:	4013      	ands	r3, r2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d10b      	bne.n	80021dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021da:	e018      	b.n	800220e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f023 0312 	bic.w	r3, r3, #18
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fc:	e007      	b.n	800220e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	ffe1f7fd 	.word	0xffe1f7fd
 800221c:	ff1f0efe 	.word	0xff1f0efe

08002220 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Start+0x1a>
 8002236:	2302      	movs	r3, #2
 8002238:	e098      	b.n	800236c <HAL_ADC_Start+0x14c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fad0 	bl	80027e8 <ADC_Enable>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8087 	bne.w	8002362 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a41      	ldr	r2, [pc, #260]	; (8002374 <HAL_ADC_Start+0x154>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d105      	bne.n	800227e <HAL_ADC_Start+0x5e>
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_ADC_Start+0x158>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d026      	beq.n	80022e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a8:	e01d      	b.n	80022e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <HAL_ADC_Start+0x158>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_Start+0xaa>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <HAL_ADC_Start+0x154>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10d      	bne.n	80022e6 <HAL_ADC_Start+0xc6>
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_ADC_Start+0x158>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f023 0206 	bic.w	r2, r3, #6
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fe:	e002      	b.n	8002306 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0202 	mvn.w	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002322:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002326:	d113      	bne.n	8002350 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_ADC_Start+0x154>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d105      	bne.n	800233e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_ADC_Start+0x158>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	e00c      	b.n	800236a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e003      	b.n	800236a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40012800 	.word	0x40012800
 8002378:	40012400 	.word	0x40012400

0800237c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Stop+0x1a>
 8002392:	2302      	movs	r3, #2
 8002394:	e01a      	b.n	80023cc <HAL_ADC_Stop+0x50>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa7c 	bl	800289c <ADC_ConversionStop_Disable>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023ea:	f7ff fe13 	bl	8002014 <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0d3      	b.n	80025be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d131      	bne.n	8002488 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d12a      	bne.n	8002488 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002432:	e021      	b.n	8002478 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d01d      	beq.n	8002478 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_ADC_PollForConversion+0x7e>
 8002442:	f7ff fde7 	bl	8002014 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d212      	bcs.n	8002478 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0a2      	b.n	80025be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0d6      	beq.n	8002434 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002486:	e070      	b.n	800256a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002488:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <HAL_ADC_PollForConversion+0x1f4>)
 800248a:	681c      	ldr	r4, [r3, #0]
 800248c:	2002      	movs	r0, #2
 800248e:	f002 f84b 	bl	8004528 <HAL_RCCEx_GetPeriphCLKFreq>
 8002492:	4603      	mov	r3, r0
 8002494:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_ADC_PollForConversion+0x1f8>)
 80024a0:	400b      	ands	r3, r1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d118      	bne.n	80024d8 <HAL_ADC_PollForConversion+0x104>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68d9      	ldr	r1, [r3, #12]
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_ADC_PollForConversion+0x1fc>)
 80024ae:	400b      	ands	r3, r1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_ADC_PollForConversion+0x104>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6919      	ldr	r1, [r3, #16]
 80024ba:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_ADC_PollForConversion+0x200>)
 80024bc:	400b      	ands	r3, r1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x100>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68d9      	ldr	r1, [r3, #12]
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_ADC_PollForConversion+0x204>)
 80024ca:	400b      	ands	r3, r1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x100>
 80024d0:	2314      	movs	r3, #20
 80024d2:	e020      	b.n	8002516 <HAL_ADC_PollForConversion+0x142>
 80024d4:	2329      	movs	r3, #41	; 0x29
 80024d6:	e01e      	b.n	8002516 <HAL_ADC_PollForConversion+0x142>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6919      	ldr	r1, [r3, #16]
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_ADC_PollForConversion+0x200>)
 80024e0:	400b      	ands	r3, r1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_PollForConversion+0x120>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_ADC_PollForConversion+0x204>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_ADC_PollForConversion+0x13c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6919      	ldr	r1, [r3, #16]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_ADC_PollForConversion+0x208>)
 80024fc:	400b      	ands	r3, r1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d108      	bne.n	8002514 <HAL_ADC_PollForConversion+0x140>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_ADC_PollForConversion+0x208>)
 800250a:	400b      	ands	r3, r1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_PollForConversion+0x140>
 8002510:	2354      	movs	r3, #84	; 0x54
 8002512:	e000      	b.n	8002516 <HAL_ADC_PollForConversion+0x142>
 8002514:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800251c:	e021      	b.n	8002562 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01a      	beq.n	800255c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_ADC_PollForConversion+0x168>
 800252c:	f7ff fd72 	bl	8002014 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d20f      	bcs.n	800255c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d90b      	bls.n	800255c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e030      	b.n	80025be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	429a      	cmp	r2, r3
 8002568:	d8d9      	bhi.n	800251e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f06f 0212 	mvn.w	r2, #18
 8002572:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800258a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258e:	d115      	bne.n	80025bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000
 80025cc:	24924924 	.word	0x24924924
 80025d0:	00924924 	.word	0x00924924
 80025d4:	12492492 	.word	0x12492492
 80025d8:	00492492 	.word	0x00492492
 80025dc:	00249249 	.word	0x00249249

080025e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x20>
 8002614:	2302      	movs	r3, #2
 8002616:	e0dc      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1da>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d81c      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b05      	subs	r3, #5
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	4019      	ands	r1, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b05      	subs	r3, #5
 8002654:	fa00 f203 	lsl.w	r2, r0, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
 8002660:	e03c      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d81c      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b23      	subs	r3, #35	; 0x23
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	4019      	ands	r1, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b23      	subs	r3, #35	; 0x23
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
 80026a2:	e01b      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b41      	subs	r3, #65	; 0x41
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b41      	subs	r3, #65	; 0x41
 80026d0:	fa00 f203 	lsl.w	r2, r0, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d91c      	bls.n	800271e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	3b1e      	subs	r3, #30
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	e019      	b.n	8002752 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	2207      	movs	r2, #7
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6898      	ldr	r0, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d003      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800275e:	2b11      	cmp	r3, #17
 8002760:	d132      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d125      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d126      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002788:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d11a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9a      	lsrs	r2, r3, #18
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f9      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x1b2>
 80027b6:	e007      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40012400 	.word	0x40012400
 80027e0:	20000000 	.word	0x20000000
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d040      	beq.n	8002888 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <ADC_Enable+0xac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <ADC_Enable+0xb0>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002824:	e002      	b.n	800282c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002832:	f7ff fbef 	bl	8002014 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002838:	e01f      	b.n	800287a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283a:	f7ff fbeb 	bl	8002014 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d918      	bls.n	800287a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d011      	beq.n	800287a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d1d8      	bne.n	800283a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000
 8002898:	431bde83 	.word	0x431bde83

0800289c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12e      	bne.n	8002914 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c6:	f7ff fba5 	bl	8002014 <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028cc:	e01b      	b.n	8002906 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ce:	f7ff fba1 	bl	8002014 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d914      	bls.n	8002906 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10d      	bne.n	8002906 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e007      	b.n	8002916 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d0dc      	beq.n	80028ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <__NVIC_EnableIRQ+0x34>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff90 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff2d 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff42 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff90 	bl	8002a10 <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff35 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d008      	beq.n	8002b64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2204      	movs	r2, #4
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e020      	b.n	8002ba6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d005      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e051      	b.n	8002c78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020e 	bic.w	r2, r2, #14
 8002be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_DMA_Abort_IT+0xd4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d029      	beq.n	8002c52 <HAL_DMA_Abort_IT+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_DMA_Abort_IT+0xd8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x9e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_DMA_Abort_IT+0xdc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01a      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x98>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_DMA_Abort_IT+0xe0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d012      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x92>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_DMA_Abort_IT+0xe4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00a      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x8c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_DMA_Abort_IT+0xe8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d102      	bne.n	8002c36 <HAL_DMA_Abort_IT+0x86>
 8002c30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c34:	e00e      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3a:	e00b      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c40:	e008      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c46:	e005      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4c:	e002      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c4e:	2310      	movs	r3, #16
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_Abort_IT+0xa4>
 8002c52:	2301      	movs	r3, #1
 8002c54:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_DMA_Abort_IT+0xec>)
 8002c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
    } 
  }
  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020008 	.word	0x40020008
 8002c88:	4002001c 	.word	0x4002001c
 8002c8c:	40020030 	.word	0x40020030
 8002c90:	40020044 	.word	0x40020044
 8002c94:	40020058 	.word	0x40020058
 8002c98:	4002006c 	.word	0x4002006c
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b08b      	sub	sp, #44	; 0x2c
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb2:	e169      	b.n	8002f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f040 8158 	bne.w	8002f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a9a      	ldr	r2, [pc, #616]	; (8002f40 <HAL_GPIO_Init+0x2a0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d05e      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002cdc:	4a98      	ldr	r2, [pc, #608]	; (8002f40 <HAL_GPIO_Init+0x2a0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d875      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002ce2:	4a98      	ldr	r2, [pc, #608]	; (8002f44 <HAL_GPIO_Init+0x2a4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d058      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002ce8:	4a96      	ldr	r2, [pc, #600]	; (8002f44 <HAL_GPIO_Init+0x2a4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d86f      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002cee:	4a96      	ldr	r2, [pc, #600]	; (8002f48 <HAL_GPIO_Init+0x2a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d052      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002cf4:	4a94      	ldr	r2, [pc, #592]	; (8002f48 <HAL_GPIO_Init+0x2a8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d869      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002cfa:	4a94      	ldr	r2, [pc, #592]	; (8002f4c <HAL_GPIO_Init+0x2ac>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04c      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002d00:	4a92      	ldr	r2, [pc, #584]	; (8002f4c <HAL_GPIO_Init+0x2ac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d863      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002d06:	4a92      	ldr	r2, [pc, #584]	; (8002f50 <HAL_GPIO_Init+0x2b0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d046      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
 8002d0c:	4a90      	ldr	r2, [pc, #576]	; (8002f50 <HAL_GPIO_Init+0x2b0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d85d      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002d12:	2b12      	cmp	r3, #18
 8002d14:	d82a      	bhi.n	8002d6c <HAL_GPIO_Init+0xcc>
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d859      	bhi.n	8002dce <HAL_GPIO_Init+0x12e>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_GPIO_Init+0x80>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d9b 	.word	0x08002d9b
 8002d24:	08002d75 	.word	0x08002d75
 8002d28:	08002d87 	.word	0x08002d87
 8002d2c:	08002dc9 	.word	0x08002dc9
 8002d30:	08002dcf 	.word	0x08002dcf
 8002d34:	08002dcf 	.word	0x08002dcf
 8002d38:	08002dcf 	.word	0x08002dcf
 8002d3c:	08002dcf 	.word	0x08002dcf
 8002d40:	08002dcf 	.word	0x08002dcf
 8002d44:	08002dcf 	.word	0x08002dcf
 8002d48:	08002dcf 	.word	0x08002dcf
 8002d4c:	08002dcf 	.word	0x08002dcf
 8002d50:	08002dcf 	.word	0x08002dcf
 8002d54:	08002dcf 	.word	0x08002dcf
 8002d58:	08002dcf 	.word	0x08002dcf
 8002d5c:	08002dcf 	.word	0x08002dcf
 8002d60:	08002dcf 	.word	0x08002dcf
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002d91 	.word	0x08002d91
 8002d6c:	4a79      	ldr	r2, [pc, #484]	; (8002f54 <HAL_GPIO_Init+0x2b4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d72:	e02c      	b.n	8002dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e029      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	3304      	adds	r3, #4
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e024      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	623b      	str	r3, [r7, #32]
          break;
 8002d8e:	e01f      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	330c      	adds	r3, #12
 8002d96:	623b      	str	r3, [r7, #32]
          break;
 8002d98:	e01a      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002da2:	2304      	movs	r3, #4
 8002da4:	623b      	str	r3, [r7, #32]
          break;
 8002da6:	e013      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db0:	2308      	movs	r3, #8
 8002db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	611a      	str	r2, [r3, #16]
          break;
 8002dba:	e009      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	615a      	str	r2, [r3, #20]
          break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
          break;
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x130>
          break;
 8002dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2bff      	cmp	r3, #255	; 0xff
 8002dd4:	d801      	bhi.n	8002dda <HAL_GPIO_Init+0x13a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	e001      	b.n	8002dde <HAL_GPIO_Init+0x13e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2bff      	cmp	r3, #255	; 0xff
 8002de4:	d802      	bhi.n	8002dec <HAL_GPIO_Init+0x14c>
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	e002      	b.n	8002df2 <HAL_GPIO_Init+0x152>
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	3b08      	subs	r3, #8
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	210f      	movs	r1, #15
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	401a      	ands	r2, r3
 8002e04:	6a39      	ldr	r1, [r7, #32]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80b1 	beq.w	8002f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e20:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <HAL_GPIO_Init+0x2b8>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4a4c      	ldr	r2, [pc, #304]	; (8002f58 <HAL_GPIO_Init+0x2b8>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6193      	str	r3, [r2, #24]
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_GPIO_Init+0x2b8>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e38:	4a48      	ldr	r2, [pc, #288]	; (8002f5c <HAL_GPIO_Init+0x2bc>)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a40      	ldr	r2, [pc, #256]	; (8002f60 <HAL_GPIO_Init+0x2c0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d013      	beq.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3f      	ldr	r2, [pc, #252]	; (8002f64 <HAL_GPIO_Init+0x2c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00d      	beq.n	8002e88 <HAL_GPIO_Init+0x1e8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3e      	ldr	r2, [pc, #248]	; (8002f68 <HAL_GPIO_Init+0x2c8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <HAL_GPIO_Init+0x1e4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <HAL_GPIO_Init+0x2cc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_GPIO_Init+0x1e0>
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e006      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e80:	2304      	movs	r3, #4
 8002e82:	e004      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	f002 0203 	and.w	r2, r2, #3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4093      	lsls	r3, r2
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e9e:	492f      	ldr	r1, [pc, #188]	; (8002f5c <HAL_GPIO_Init+0x2bc>)
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	492c      	ldr	r1, [pc, #176]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4928      	ldr	r1, [pc, #160]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4922      	ldr	r1, [pc, #136]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	491e      	ldr	r1, [pc, #120]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4918      	ldr	r1, [pc, #96]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	4914      	ldr	r1, [pc, #80]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d021      	beq.n	8002f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	490e      	ldr	r1, [pc, #56]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e021      	b.n	8002f82 <HAL_GPIO_Init+0x2e2>
 8002f3e:	bf00      	nop
 8002f40:	10320000 	.word	0x10320000
 8002f44:	10310000 	.word	0x10310000
 8002f48:	10220000 	.word	0x10220000
 8002f4c:	10210000 	.word	0x10210000
 8002f50:	10120000 	.word	0x10120000
 8002f54:	10110000 	.word	0x10110000
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40010800 	.word	0x40010800
 8002f64:	40010c00 	.word	0x40010c00
 8002f68:	40011000 	.word	0x40011000
 8002f6c:	40011400 	.word	0x40011400
 8002f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_GPIO_Init+0x304>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <HAL_GPIO_Init+0x304>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	3301      	adds	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f47f ae8e 	bne.w	8002cb4 <HAL_GPIO_Init+0x14>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	372c      	adds	r7, #44	; 0x2c
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	e001      	b.n	8002fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	807b      	strh	r3, [r7, #2]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe6:	787b      	ldrb	r3, [r7, #1]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ff2:	e003      	b.n	8002ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	041a      	lsls	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	611a      	str	r2, [r3, #16]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e12b      	b.n	8003272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe fdd4 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	; 0x24
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800306c:	f001 f960 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8003070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a81      	ldr	r2, [pc, #516]	; (800327c <HAL_I2C_Init+0x274>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d807      	bhi.n	800308c <HAL_I2C_Init+0x84>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a80      	ldr	r2, [pc, #512]	; (8003280 <HAL_I2C_Init+0x278>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e006      	b.n	800309a <HAL_I2C_Init+0x92>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a7d      	ldr	r2, [pc, #500]	; (8003284 <HAL_I2C_Init+0x27c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0e7      	b.n	8003272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a78      	ldr	r2, [pc, #480]	; (8003288 <HAL_I2C_Init+0x280>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a6a      	ldr	r2, [pc, #424]	; (800327c <HAL_I2C_Init+0x274>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d802      	bhi.n	80030dc <HAL_I2C_Init+0xd4>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	e009      	b.n	80030f0 <HAL_I2C_Init+0xe8>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a69      	ldr	r2, [pc, #420]	; (800328c <HAL_I2C_Init+0x284>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	495c      	ldr	r1, [pc, #368]	; (800327c <HAL_I2C_Init+0x274>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d819      	bhi.n	8003144 <HAL_I2C_Init+0x13c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e59      	subs	r1, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fbb1 f3f3 	udiv	r3, r1, r3
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003124:	400b      	ands	r3, r1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_I2C_Init+0x138>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e59      	subs	r1, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fbb1 f3f3 	udiv	r3, r1, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	e051      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 8003140:	2304      	movs	r3, #4
 8003142:	e04f      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <HAL_I2C_Init+0x168>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e012      	b.n	8003196 <HAL_I2C_Init+0x18e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x196>
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <HAL_I2C_Init+0x1bc>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e58      	subs	r0, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	440b      	add	r3, r1
 80031b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c2:	e00f      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	6809      	ldr	r1, [r1, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6911      	ldr	r1, [r2, #16]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	000186a0 	.word	0x000186a0
 8003280:	001e847f 	.word	0x001e847f
 8003284:	003d08ff 	.word	0x003d08ff
 8003288:	431bde83 	.word	0x431bde83
 800328c:	10624dd3 	.word	0x10624dd3

08003290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	461a      	mov	r2, r3
 800329c:	460b      	mov	r3, r1
 800329e:	817b      	strh	r3, [r7, #10]
 80032a0:	4613      	mov	r3, r2
 80032a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7fe feb6 	bl	8002014 <HAL_GetTick>
 80032a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	f040 80e0 	bne.w	8003478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2319      	movs	r3, #25
 80032be:	2201      	movs	r2, #1
 80032c0:	4970      	ldr	r1, [pc, #448]	; (8003484 <HAL_I2C_Master_Transmit+0x1f4>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa92 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0d3      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_I2C_Master_Transmit+0x50>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0cc      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d007      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2221      	movs	r2, #33	; 0x21
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2210      	movs	r2, #16
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	893a      	ldrh	r2, [r7, #8]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a50      	ldr	r2, [pc, #320]	; (8003488 <HAL_I2C_Master_Transmit+0x1f8>)
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003348:	8979      	ldrh	r1, [r7, #10]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f9ca 	bl	80036e8 <I2C_MasterRequestWrite>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e08d      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003374:	e066      	b.n	8003444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fb50 	bl	8003a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b04      	cmp	r3, #4
 800338c:	d107      	bne.n	800339e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06b      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d11b      	bne.n	8003418 <HAL_I2C_Master_Transmit+0x188>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	6a39      	ldr	r1, [r7, #32]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fb47 	bl	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b04      	cmp	r3, #4
 800342e:	d107      	bne.n	8003440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01a      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d194      	bne.n	8003376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	00100002 	.word	0x00100002
 8003488:	ffff0000 	.word	0xffff0000

0800348c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	460b      	mov	r3, r1
 800349a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7fe fdba 	bl	8002014 <HAL_GetTick>
 80034a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	f040 8111 	bne.w	80036d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	2319      	movs	r3, #25
 80034ba:	2201      	movs	r2, #1
 80034bc:	4988      	ldr	r1, [pc, #544]	; (80036e0 <HAL_I2C_IsDeviceReady+0x254>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f994 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	e104      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2C_IsDeviceReady+0x50>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0fd      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d007      	beq.n	8003502 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2224      	movs	r2, #36	; 0x24
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a70      	ldr	r2, [pc, #448]	; (80036e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003534:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f952 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d103      	bne.n	8003566 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0b6      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003578:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe fd4b 	bl	8002014 <HAL_GetTick>
 800357e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035ae:	e025      	b.n	80035fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fe fd30 	bl	8002014 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <HAL_I2C_IsDeviceReady+0x13a>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	22a0      	movs	r2, #160	; 0xa0
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2ba0      	cmp	r3, #160	; 0xa0
 8003606:	d005      	beq.n	8003614 <HAL_I2C_IsDeviceReady+0x188>
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_I2C_IsDeviceReady+0x188>
 800360e:	7dbb      	ldrb	r3, [r7, #22]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0cd      	beq.n	80035b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d129      	bne.n	800367e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2319      	movs	r3, #25
 8003656:	2201      	movs	r2, #1
 8003658:	4921      	ldr	r1, [pc, #132]	; (80036e0 <HAL_I2C_IsDeviceReady+0x254>)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8c6 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e036      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e02c      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003696:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2319      	movs	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	490f      	ldr	r1, [pc, #60]	; (80036e0 <HAL_I2C_IsDeviceReady+0x254>)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8a2 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e012      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f4ff af32 	bcc.w	8003526 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00100002 	.word	0x00100002
 80036e4:	ffff0000 	.word	0xffff0000

080036e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d006      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d003      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003710:	d108      	bne.n	8003724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00b      	b.n	800373c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	2b12      	cmp	r3, #18
 800372a:	d107      	bne.n	800373c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f84f 	bl	80037ec <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003762:	d103      	bne.n	800376c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e035      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003778:	d108      	bne.n	800378c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e01b      	b.n	80037c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	11db      	asrs	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f063 030f 	orn	r3, r3, #15
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <I2C_MasterRequestWrite+0xfc>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f898 	bl	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e010      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <I2C_MasterRequestWrite+0x100>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f888 	bl	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010008 	.word	0x00010008
 80037e8:	00010002 	.word	0x00010002

080037ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fc:	e048      	b.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d044      	beq.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fe fc05 	bl	8002014 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d139      	bne.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10d      	bne.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	e00c      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d116      	bne.n	8003890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e023      	b.n	80038d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	43da      	mvns	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	e00c      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d093      	beq.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ee:	e071      	b.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d123      	bne.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0204 	orr.w	r2, r3, #4
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e067      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d041      	beq.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fe fb60 	bl	8002014 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d136      	bne.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10c      	bne.n	800398a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e00b      	b.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	43da      	mvns	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e021      	b.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	0c1b      	lsrs	r3, r3, #16
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d10c      	bne.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	43da      	mvns	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e00b      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f af6d 	bne.w	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2c:	e034      	b.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f886 	bl	8003b40 <I2C_IsAcknowledgeFailed>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e034      	b.n	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d028      	beq.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe fae5 	bl	8002014 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11d      	bne.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d016      	beq.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e007      	b.n	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d1c3      	bne.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003abc:	e034      	b.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f83e 	bl	8003b40 <I2C_IsAcknowledgeFailed>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e034      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d028      	beq.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe fa9d 	bl	8002014 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11d      	bne.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d016      	beq.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d1c3      	bne.n	8003abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d11b      	bne.n	8003b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e272      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8087 	beq.w	8003cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bbc:	4b92      	ldr	r3, [pc, #584]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d00c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc8:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d112      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5e>
 8003bd4:	4b8c      	ldr	r3, [pc, #560]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b89      	ldr	r3, [pc, #548]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x12c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d168      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e24c      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x76>
 8003c04:	4b80      	ldr	r3, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7f      	ldr	r2, [pc, #508]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e02e      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x98>
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7a      	ldr	r2, [pc, #488]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a77      	ldr	r2, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0xbc>
 8003c3e:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b6f      	ldr	r3, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c58:	4b6b      	ldr	r3, [pc, #428]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a67      	ldr	r2, [pc, #412]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe f9cc 	bl	8002014 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe f9c8 	bl	8002014 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e200      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe4>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f9b8 	bl	8002014 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe f9b4 	bl	8002014 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1ec      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x10c>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd6:	4b4c      	ldr	r3, [pc, #304]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ce2:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x18c>
 8003cee:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x176>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1c0      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4939      	ldr	r1, [pc, #228]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	e03a      	b.n	8003d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x270>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fe f96d 	bl	8002014 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fe f969 	bl	8002014 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e1a1      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4927      	ldr	r1, [pc, #156]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
 8003d70:	e015      	b.n	8003d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x270>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe f94c 	bl	8002014 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d80:	f7fe f948 	bl	8002014 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e180      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03a      	beq.n	8003e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_RCC_OscConfig+0x274>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db8:	f7fe f92c 	bl	8002014 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fe f928 	bl	8002014 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e160      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f000 face 	bl	8004380 <RCC_Delay>
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x274>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe f912 	bl	8002014 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df2:	e00f      	b.n	8003e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe f90e 	bl	8002014 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d908      	bls.n	8003e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e146      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	42420000 	.word	0x42420000
 8003e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e9      	bne.n	8003df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a6 	beq.w	8003f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b8b      	ldr	r3, [pc, #556]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b88      	ldr	r3, [pc, #544]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4a87      	ldr	r2, [pc, #540]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	61d3      	str	r3, [r2, #28]
 8003e4a:	4b85      	ldr	r3, [pc, #532]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b82      	ldr	r3, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b7f      	ldr	r3, [pc, #508]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7e      	ldr	r2, [pc, #504]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fe f8cf 	bl	8002014 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fe f8cb 	bl	8002014 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e103      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b75      	ldr	r3, [pc, #468]	; (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x312>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	e02d      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x334>
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a69      	ldr	r2, [pc, #420]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a66      	ldr	r2, [pc, #408]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	e01c      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x356>
 8003ed8:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a60      	ldr	r2, [pc, #384]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4a5d      	ldr	r2, [pc, #372]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6213      	str	r3, [r2, #32]
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a5a      	ldr	r2, [pc, #360]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6213      	str	r3, [r2, #32]
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4a57      	ldr	r2, [pc, #348]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d015      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fe f87f 	bl	8002014 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe f87b 	bl	8002014 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0b1      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ee      	beq.n	8003f1a <HAL_RCC_OscConfig+0x37e>
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f869 	bl	8002014 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe f865 	bl	8002014 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e09b      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ee      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8087 	beq.w	8004092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d061      	beq.n	8004054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d146      	bne.n	8004026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe f839 	bl	8002014 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fe f835 	bl	8002014 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e06d      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d108      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a19      	ldr	r1, [r3, #32]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	491b      	ldr	r1, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fe f809 	bl	8002014 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004006:	f7fe f805 	bl	8002014 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e03d      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x46a>
 8004024:	e035      	b.n	8004092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fd fff2 	bl	8002014 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd ffee 	bl	8002014 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e026      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x498>
 8004052:	e01e      	b.n	8004092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e019      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x500>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000

080040a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0207 	bic.w	r2, r3, #7
 80040ca:	4965      	ldr	r1, [pc, #404]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800411e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e073      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06b      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4936      	ldr	r1, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fd ff40 	bl	8002014 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd ff3c 	bl	8002014 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e053      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d210      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	4922      	ldr	r1, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1cc>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fe9e 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
 8004268:	08008188 	.word	0x08008188
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_GetSysClockFreq+0x94>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x30>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x36>
 80042a2:	e027      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042a6:	613b      	str	r3, [r7, #16]
      break;
 80042a8:	e027      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0c9b      	lsrs	r3, r3, #18
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_RCC_GetSysClockFreq+0x94>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0c5b      	lsrs	r3, r3, #17
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	4a11      	ldr	r2, [pc, #68]	; (8004314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042d6:	fb03 f202 	mul.w	r2, r3, r2
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e004      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	613b      	str	r3, [r7, #16]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042f6:	613b      	str	r3, [r7, #16]
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	693b      	ldr	r3, [r7, #16]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	007a1200 	.word	0x007a1200
 8004310:	080081a0 	.word	0x080081a0
 8004314:	080081b0 	.word	0x080081b0
 8004318:	003d0900 	.word	0x003d0900

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <HAL_RCC_GetHCLKFreq+0x10>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20000000 	.word	0x20000000

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff2 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	08008198 	.word	0x08008198

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffde 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	08008198 	.word	0x08008198

08004380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <RCC_Delay+0x34>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <RCC_Delay+0x38>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800439c:	bf00      	nop
  }
  while (Delay --);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f9      	bne.n	800439c <RCC_Delay+0x1c>
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	20000000 	.word	0x20000000
 80043b8:	10624dd3 	.word	0x10624dd3

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d07d      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043d8:	2300      	movs	r3, #0
 80043da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043dc:	4b4f      	ldr	r3, [pc, #316]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	4b4c      	ldr	r3, [pc, #304]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	61d3      	str	r3, [r2, #28]
 80043f4:	4b49      	ldr	r3, [pc, #292]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d118      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004410:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a42      	ldr	r2, [pc, #264]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441c:	f7fd fdfa 	bl	8002014 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fd fdf6 	bl	8002014 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e06d      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d027      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d014      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fd fdc5 	bl	8002014 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd fdc1 	bl	8002014 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e036      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ee      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4917      	ldr	r1, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c8:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	490b      	ldr	r1, [pc, #44]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4904      	ldr	r1, [pc, #16]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
 8004524:	42420440 	.word	0x42420440

08004528 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b10      	cmp	r3, #16
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b10      	cmp	r3, #16
 800454e:	f200 808a 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d045      	beq.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d075      	beq.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800455e:	e082      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004560:	4b46      	ldr	r3, [pc, #280]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004566:	4b45      	ldr	r3, [pc, #276]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d07b      	beq.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0c9b      	lsrs	r3, r3, #18
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	4a41      	ldr	r2, [pc, #260]	; (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800458a:	4b3c      	ldr	r3, [pc, #240]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	0c5b      	lsrs	r3, r3, #17
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	4a3b      	ldr	r2, [pc, #236]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045a4:	4a38      	ldr	r2, [pc, #224]	; (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e004      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4a34      	ldr	r2, [pc, #208]	; (800468c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045c0:	4b2e      	ldr	r3, [pc, #184]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045cc:	d102      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	61bb      	str	r3, [r7, #24]
      break;
 80045d2:	e04a      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4a2d      	ldr	r2, [pc, #180]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
      break;
 80045e2:	e042      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f4:	d108      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e01f      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004612:	d109      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004620:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e00f      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d11c      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d016      	beq.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004640:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004644:	61bb      	str	r3, [r7, #24]
      break;
 8004646:	e012      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004648:	e011      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800464a:	f7ff fe85 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 800464e:	4602      	mov	r2, r0
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	0b9b      	lsrs	r3, r3, #14
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	3301      	adds	r3, #1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	61bb      	str	r3, [r7, #24]
      break;
 8004664:	e004      	b.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800466e:	bf00      	nop
    }
  }
  return (frequency);
 8004670:	69bb      	ldr	r3, [r7, #24]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	080081b4 	.word	0x080081b4
 8004684:	080081c4 	.word	0x080081c4
 8004688:	007a1200 	.word	0x007a1200
 800468c:	003d0900 	.word	0x003d0900
 8004690:	aaaaaaab 	.word	0xaaaaaaab

08004694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e041      	b.n	800472a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd facc 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 fb22 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_TIM_Base_Start+0x88>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_TIM_Base_Start+0x48>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d009      	beq.n	800477c <HAL_TIM_Base_Start+0x48>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <HAL_TIM_Base_Start+0x8c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_Base_Start+0x48>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_TIM_Base_Start+0x90>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d010      	beq.n	80047b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e007      	b.n	80047b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800

080047c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10f      	bne.n	8004800 <HAL_TIM_Base_Stop+0x38>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	f240 4344 	movw	r3, #1092	; 0x444
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_Base_Stop+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e041      	b.n	80048aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f839 	bl	80048b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 fa62 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <HAL_TIM_PWM_Start+0x24>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e022      	b.n	800492e <HAL_TIM_PWM_Start+0x6a>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d109      	bne.n	8004902 <HAL_TIM_PWM_Start+0x3e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e015      	b.n	800492e <HAL_TIM_PWM_Start+0x6a>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d109      	bne.n	800491c <HAL_TIM_PWM_Start+0x58>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e008      	b.n	800492e <HAL_TIM_PWM_Start+0x6a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e05e      	b.n	80049f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0x82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	e013      	b.n	800496e <HAL_TIM_PWM_Start+0xaa>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0x92>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004954:	e00b      	b.n	800496e <HAL_TIM_PWM_Start+0xaa>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	e003      	b.n	800496e <HAL_TIM_PWM_Start+0xaa>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fc5c 	bl	8005234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <HAL_TIM_PWM_Start+0x138>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d107      	bne.n	8004996 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a18      	ldr	r2, [pc, #96]	; (80049fc <HAL_TIM_PWM_Start+0x138>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_TIM_PWM_Start+0xfa>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d009      	beq.n	80049be <HAL_TIM_PWM_Start+0xfa>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_TIM_PWM_Start+0x13c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_TIM_PWM_Start+0xfa>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <HAL_TIM_PWM_Start+0x140>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d111      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d010      	beq.n	80049f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	e007      	b.n	80049f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800

08004a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0ae      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	f200 809f 	bhi.w	8004b74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004b75 	.word	0x08004b75
 8004a44:	08004b75 	.word	0x08004b75
 8004a48:	08004b75 	.word	0x08004b75
 8004a4c:	08004ab1 	.word	0x08004ab1
 8004a50:	08004b75 	.word	0x08004b75
 8004a54:	08004b75 	.word	0x08004b75
 8004a58:	08004b75 	.word	0x08004b75
 8004a5c:	08004af3 	.word	0x08004af3
 8004a60:	08004b75 	.word	0x08004b75
 8004a64:	08004b75 	.word	0x08004b75
 8004a68:	08004b75 	.word	0x08004b75
 8004a6c:	08004b33 	.word	0x08004b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f9be 	bl	8004df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0208 	orr.w	r2, r2, #8
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]
      break;
 8004aae:	e064      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa04 	bl	8004ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	619a      	str	r2, [r3, #24]
      break;
 8004af0:	e043      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fa4d 	bl	8004f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0208 	orr.w	r2, r2, #8
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0204 	bic.w	r2, r2, #4
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
      break;
 8004b30:	e023      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fa97 	bl	800506c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	021a      	lsls	r2, r3, #8
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	61da      	str	r2, [r3, #28]
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75fb      	strb	r3, [r7, #23]
      break;
 8004b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0b4      	b.n	8004d12 <HAL_TIM_ConfigClockSource+0x186>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d03e      	beq.n	8004c60 <HAL_TIM_ConfigClockSource+0xd4>
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	f200 8087 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	f000 8086 	beq.w	8004cfe <HAL_TIM_ConfigClockSource+0x172>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d87f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b70      	cmp	r3, #112	; 0x70
 8004bfa:	d01a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0xa6>
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d87b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b60      	cmp	r3, #96	; 0x60
 8004c02:	d050      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c04:	2b60      	cmp	r3, #96	; 0x60
 8004c06:	d877      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b50      	cmp	r3, #80	; 0x50
 8004c0a:	d03c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xfa>
 8004c0c:	2b50      	cmp	r3, #80	; 0x50
 8004c0e:	d873      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d058      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d86f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	d064      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d86b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d060      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d867      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d05a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c30:	e062      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c42:	f000 fad8 	bl	80051f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]
      break;
 8004c5e:	e04f      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	f000 fac1 	bl	80051f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c82:	609a      	str	r2, [r3, #8]
      break;
 8004c84:	e03c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 fa38 	bl	8005108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2150      	movs	r1, #80	; 0x50
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fa8f 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e02c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fa56 	bl	8005164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2160      	movs	r1, #96	; 0x60
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fa7f 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e01c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fa18 	bl	8005108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fa6f 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e00c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 fa66 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004cf6:	e003      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <TIM_Base_SetConfig+0xd0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x30>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x30>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <TIM_Base_SetConfig+0xd4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x30>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <TIM_Base_SetConfig+0xd8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <TIM_Base_SetConfig+0xd0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <TIM_Base_SetConfig+0x62>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d007      	beq.n	8004d7e <TIM_Base_SetConfig+0x62>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <TIM_Base_SetConfig+0xd4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_Base_SetConfig+0x62>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <TIM_Base_SetConfig+0xd8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <TIM_Base_SetConfig+0xd0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d103      	bne.n	8004dc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]
  }
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800

08004df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 0201 	bic.w	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0302 	bic.w	r3, r3, #2
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <TIM_OC1_SetConfig+0xc8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10c      	bne.n	8004e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0308 	bic.w	r3, r3, #8
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <TIM_OC1_SetConfig+0xc8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00

08004ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0210 	bic.w	r2, r3, #16
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0320 	bic.w	r3, r3, #32
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <TIM_OC2_SetConfig+0xd0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10d      	bne.n	8004f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <TIM_OC2_SetConfig+0xd0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d113      	bne.n	8004f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00

08004f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <TIM_OC3_SetConfig+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10d      	bne.n	8005012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <TIM_OC3_SetConfig+0xd0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00

0800506c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	031b      	lsls	r3, r3, #12
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0f      	ldr	r2, [pc, #60]	; (8005104 <TIM_OC4_SetConfig+0x98>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d109      	bne.n	80050e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00

08005108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 030a 	bic.w	r3, r3, #10
 8005144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0210 	bic.w	r2, r3, #16
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f043 0307 	orr.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	021a      	lsls	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	431a      	orrs	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4313      	orrs	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005290:	2302      	movs	r3, #2
 8005292:	e046      	b.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d009      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a10      	ldr	r2, [pc, #64]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10c      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800

08005338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e042      	b.n	80053d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fc fd18 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2224      	movs	r2, #36	; 0x24
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800537a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fdb7 	bl	8005ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d175      	bne.n	80054e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_UART_Transmit+0x2c>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e06e      	b.n	80054e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2221      	movs	r2, #33	; 0x21
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc fdfd 	bl	8002014 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005430:	d108      	bne.n	8005444 <HAL_UART_Transmit+0x6c>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e003      	b.n	800544c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800544c:	e02e      	b.n	80054ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fb1c 	bl	8005a96 <UART_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e03a      	b.n	80054e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	3302      	adds	r3, #2
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e007      	b.n	800549e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	3301      	adds	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1cb      	bne.n	800544e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	2140      	movs	r1, #64	; 0x40
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 fae8 	bl	8005a96 <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e006      	b.n	80054e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e000      	b.n	80054e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	4613      	mov	r3, r2
 80054fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b20      	cmp	r3, #32
 8005506:	d112      	bne.n	800552e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_UART_Receive_IT+0x26>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e00b      	b.n	8005530 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	461a      	mov	r2, r3
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fb0f 	bl	8005b48 <UART_Start_Receive_IT>
 800552a:	4603      	mov	r3, r0
 800552c:	e000      	b.n	8005530 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b0ba      	sub	sp, #232	; 0xe8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10f      	bne.n	800559e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800557e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_UART_IRQHandler+0x66>
 800558a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fbec 	bl	8005d74 <UART_Receive_IT>
      return;
 800559c:	e25b      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800559e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80de 	beq.w	8005764 <HAL_UART_IRQHandler+0x22c>
 80055a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80d1 	beq.w	8005764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_UART_IRQHandler+0xae>
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	f043 0201 	orr.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_UART_IRQHandler+0xd2>
 80055f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f043 0202 	orr.w	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_UART_IRQHandler+0xf6>
 8005616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f043 0204 	orr.w	r2, r3, #4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <HAL_UART_IRQHandler+0x126>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d105      	bne.n	8005652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	f043 0208 	orr.w	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 81f2 	beq.w	8005a4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_UART_IRQHandler+0x14e>
 8005674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb77 	bl	8005d74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <HAL_UART_IRQHandler+0x17a>
 80056aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04f      	beq.n	8005752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa81 	bl	8005bba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d041      	beq.n	800574a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800570a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1d9      	bne.n	80056c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d013      	beq.n	8005742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	4a7e      	ldr	r2, [pc, #504]	; (8005918 <HAL_UART_IRQHandler+0x3e0>)
 8005720:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd fa42 	bl	8002bb0 <HAL_DMA_Abort_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e00e      	b.n	8005760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f993 	bl	8005a6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e00a      	b.n	8005760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f98f 	bl	8005a6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e006      	b.n	8005760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f98b 	bl	8005a6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800575e:	e175      	b.n	8005a4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	bf00      	nop
    return;
 8005762:	e173      	b.n	8005a4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	2b01      	cmp	r3, #1
 800576a:	f040 814f 	bne.w	8005a0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8148 	beq.w	8005a0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8141 	beq.w	8005a0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80b6 	beq.w	800591c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8145 	beq.w	8005a50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ce:	429a      	cmp	r2, r3
 80057d0:	f080 813e 	bcs.w	8005a50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	f000 8088 	beq.w	80058f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005814:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005820:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800582c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1d9      	bne.n	80057e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005858:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800585c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005860:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e1      	bne.n	8005834 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005894:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800589a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e3      	bne.n	8005870 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	f023 0310 	bic.w	r3, r3, #16
 80058cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058da:	65ba      	str	r2, [r7, #88]	; 0x58
 80058dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e3      	bne.n	80058b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd f921 	bl	8002b3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005906:	b29b      	uxth	r3, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8b6 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005914:	e09c      	b.n	8005a50 <HAL_UART_IRQHandler+0x518>
 8005916:	bf00      	nop
 8005918:	08005c7f 	.word	0x08005c7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005924:	b29b      	uxth	r3, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 808e 	beq.w	8005a54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8089 	beq.w	8005a54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005966:	647a      	str	r2, [r7, #68]	; 0x44
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800596c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e3      	bne.n	8005942 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	623b      	str	r3, [r7, #32]
   return(result);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800599e:	633a      	str	r2, [r7, #48]	; 0x30
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e3      	bne.n	800597a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059e4:	61fa      	str	r2, [r7, #28]
 80059e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	617b      	str	r3, [r7, #20]
   return(result);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f83b 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a0a:	e023      	b.n	8005a54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d009      	beq.n	8005a2c <HAL_UART_IRQHandler+0x4f4>
 8005a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f93e 	bl	8005ca6 <UART_Transmit_IT>
    return;
 8005a2a:	e014      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_UART_IRQHandler+0x51e>
 8005a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f97d 	bl	8005d44 <UART_EndTransmit_IT>
    return;
 8005a4a:	e004      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a54:	bf00      	nop
  }
}
 8005a56:	37e8      	adds	r7, #232	; 0xe8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa6:	e03b      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d037      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fc fab0 	bl	8002014 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	6a3a      	ldr	r2, [r7, #32]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e03a      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d023      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b80      	cmp	r3, #128	; 0x80
 8005adc:	d020      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d01d      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d116      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f856 	bl	8005bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2208      	movs	r2, #8
 8005b12:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e00f      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d0b4      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2222      	movs	r2, #34	; 0x22
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0220 	orr.w	r2, r2, #32
 8005bac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b095      	sub	sp, #84	; 0x54
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005be2:	643a      	str	r2, [r7, #64]	; 0x40
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d119      	bne.n	8005c66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c52:	61ba      	str	r2, [r7, #24]
 8005c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c74:	bf00      	nop
 8005c76:	3754      	adds	r7, #84	; 0x54
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff fee8 	bl	8005a6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b21      	cmp	r3, #33	; 0x21
 8005cb8:	d13e      	bne.n	8005d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d114      	bne.n	8005cee <UART_Transmit_IT+0x48>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d110      	bne.n	8005cee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]
 8005cec:	e008      	b.n	8005d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6211      	str	r1, [r2, #32]
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10f      	bne.n	8005d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e000      	b.n	8005d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fe79 	bl	8005a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b22      	cmp	r3, #34	; 0x22
 8005d86:	f040 80ae 	bne.w	8005ee6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	d117      	bne.n	8005dc4 <UART_Receive_IT+0x50>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d113      	bne.n	8005dc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8005dc2:	e026      	b.n	8005e12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd6:	d007      	beq.n	8005de8 <UART_Receive_IT+0x74>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <UART_Receive_IT+0x82>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e008      	b.n	8005e08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d15d      	bne.n	8005ee2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0220 	bic.w	r2, r2, #32
 8005e34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d135      	bne.n	8005ed8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	613b      	str	r3, [r7, #16]
   return(result);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f023 0310 	bic.w	r3, r3, #16
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e92:	623a      	str	r2, [r7, #32]
 8005e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	69f9      	ldr	r1, [r7, #28]
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e5      	bne.n	8005e72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d10a      	bne.n	8005eca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fdd5 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
 8005ed6:	e002      	b.n	8005ede <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fb f87b 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e002      	b.n	8005ee8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3730      	adds	r7, #48	; 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f2a:	f023 030c 	bic.w	r3, r3, #12
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2c      	ldr	r2, [pc, #176]	; (8006004 <UART_SetConfig+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe f9fe 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	e002      	b.n	8005f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f60:	f7fe f9e6 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8005f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009a      	lsls	r2, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	4a22      	ldr	r2, [pc, #136]	; (8006008 <UART_SetConfig+0x118>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	0119      	lsls	r1, r3, #4
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <UART_SetConfig+0x118>)
 8005f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2064      	movs	r0, #100	; 0x64
 8005fa6:	fb00 f303 	mul.w	r3, r0, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <UART_SetConfig+0x118>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbc:	4419      	add	r1, r3
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009a      	lsls	r2, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <UART_SetConfig+0x118>)
 8005fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	2064      	movs	r0, #100	; 0x64
 8005fde:	fb00 f303 	mul.w	r3, r0, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	3332      	adds	r3, #50	; 0x32
 8005fe8:	4a07      	ldr	r2, [pc, #28]	; (8006008 <UART_SetConfig+0x118>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f003 020f 	and.w	r2, r3, #15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40013800 	.word	0x40013800
 8006008:	51eb851f 	.word	0x51eb851f

0800600c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006012:	f000 fa1f 	bl	8006454 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8006016:	f644 6320 	movw	r3, #20000	; 0x4e20
 800601a:	2201      	movs	r2, #1
 800601c:	2178      	movs	r1, #120	; 0x78
 800601e:	485b      	ldr	r0, [pc, #364]	; (800618c <SSD1306_Init+0x180>)
 8006020:	f7fd fa34 	bl	800348c <HAL_I2C_IsDeviceReady>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800602a:	2300      	movs	r3, #0
 800602c:	e0a9      	b.n	8006182 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800602e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006032:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006034:	e002      	b.n	800603c <SSD1306_Init+0x30>
		p--;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3b01      	subs	r3, #1
 800603a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f9      	bne.n	8006036 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8006042:	22ae      	movs	r2, #174	; 0xae
 8006044:	2100      	movs	r1, #0
 8006046:	2078      	movs	r0, #120	; 0x78
 8006048:	f000 fa7e 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800604c:	2220      	movs	r2, #32
 800604e:	2100      	movs	r1, #0
 8006050:	2078      	movs	r0, #120	; 0x78
 8006052:	f000 fa79 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006056:	2210      	movs	r2, #16
 8006058:	2100      	movs	r1, #0
 800605a:	2078      	movs	r0, #120	; 0x78
 800605c:	f000 fa74 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006060:	22b0      	movs	r2, #176	; 0xb0
 8006062:	2100      	movs	r1, #0
 8006064:	2078      	movs	r0, #120	; 0x78
 8006066:	f000 fa6f 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800606a:	22c8      	movs	r2, #200	; 0xc8
 800606c:	2100      	movs	r1, #0
 800606e:	2078      	movs	r0, #120	; 0x78
 8006070:	f000 fa6a 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006074:	2200      	movs	r2, #0
 8006076:	2100      	movs	r1, #0
 8006078:	2078      	movs	r0, #120	; 0x78
 800607a:	f000 fa65 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800607e:	2210      	movs	r2, #16
 8006080:	2100      	movs	r1, #0
 8006082:	2078      	movs	r0, #120	; 0x78
 8006084:	f000 fa60 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006088:	2240      	movs	r2, #64	; 0x40
 800608a:	2100      	movs	r1, #0
 800608c:	2078      	movs	r0, #120	; 0x78
 800608e:	f000 fa5b 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006092:	2281      	movs	r2, #129	; 0x81
 8006094:	2100      	movs	r1, #0
 8006096:	2078      	movs	r0, #120	; 0x78
 8006098:	f000 fa56 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800609c:	22ff      	movs	r2, #255	; 0xff
 800609e:	2100      	movs	r1, #0
 80060a0:	2078      	movs	r0, #120	; 0x78
 80060a2:	f000 fa51 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80060a6:	22a1      	movs	r2, #161	; 0xa1
 80060a8:	2100      	movs	r1, #0
 80060aa:	2078      	movs	r0, #120	; 0x78
 80060ac:	f000 fa4c 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80060b0:	22a6      	movs	r2, #166	; 0xa6
 80060b2:	2100      	movs	r1, #0
 80060b4:	2078      	movs	r0, #120	; 0x78
 80060b6:	f000 fa47 	bl	8006548 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80060ba:	22a8      	movs	r2, #168	; 0xa8
 80060bc:	2100      	movs	r1, #0
 80060be:	2078      	movs	r0, #120	; 0x78
 80060c0:	f000 fa42 	bl	8006548 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80060c4:	223f      	movs	r2, #63	; 0x3f
 80060c6:	2100      	movs	r1, #0
 80060c8:	2078      	movs	r0, #120	; 0x78
 80060ca:	f000 fa3d 	bl	8006548 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80060ce:	22a4      	movs	r2, #164	; 0xa4
 80060d0:	2100      	movs	r1, #0
 80060d2:	2078      	movs	r0, #120	; 0x78
 80060d4:	f000 fa38 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80060d8:	22d3      	movs	r2, #211	; 0xd3
 80060da:	2100      	movs	r1, #0
 80060dc:	2078      	movs	r0, #120	; 0x78
 80060de:	f000 fa33 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	2078      	movs	r0, #120	; 0x78
 80060e8:	f000 fa2e 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80060ec:	22d5      	movs	r2, #213	; 0xd5
 80060ee:	2100      	movs	r1, #0
 80060f0:	2078      	movs	r0, #120	; 0x78
 80060f2:	f000 fa29 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80060f6:	22f0      	movs	r2, #240	; 0xf0
 80060f8:	2100      	movs	r1, #0
 80060fa:	2078      	movs	r0, #120	; 0x78
 80060fc:	f000 fa24 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006100:	22d9      	movs	r2, #217	; 0xd9
 8006102:	2100      	movs	r1, #0
 8006104:	2078      	movs	r0, #120	; 0x78
 8006106:	f000 fa1f 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800610a:	2222      	movs	r2, #34	; 0x22
 800610c:	2100      	movs	r1, #0
 800610e:	2078      	movs	r0, #120	; 0x78
 8006110:	f000 fa1a 	bl	8006548 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006114:	22da      	movs	r2, #218	; 0xda
 8006116:	2100      	movs	r1, #0
 8006118:	2078      	movs	r0, #120	; 0x78
 800611a:	f000 fa15 	bl	8006548 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800611e:	2212      	movs	r2, #18
 8006120:	2100      	movs	r1, #0
 8006122:	2078      	movs	r0, #120	; 0x78
 8006124:	f000 fa10 	bl	8006548 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006128:	22db      	movs	r2, #219	; 0xdb
 800612a:	2100      	movs	r1, #0
 800612c:	2078      	movs	r0, #120	; 0x78
 800612e:	f000 fa0b 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8006132:	2220      	movs	r2, #32
 8006134:	2100      	movs	r1, #0
 8006136:	2078      	movs	r0, #120	; 0x78
 8006138:	f000 fa06 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800613c:	228d      	movs	r2, #141	; 0x8d
 800613e:	2100      	movs	r1, #0
 8006140:	2078      	movs	r0, #120	; 0x78
 8006142:	f000 fa01 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8006146:	2214      	movs	r2, #20
 8006148:	2100      	movs	r1, #0
 800614a:	2078      	movs	r0, #120	; 0x78
 800614c:	f000 f9fc 	bl	8006548 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006150:	22af      	movs	r2, #175	; 0xaf
 8006152:	2100      	movs	r1, #0
 8006154:	2078      	movs	r0, #120	; 0x78
 8006156:	f000 f9f7 	bl	8006548 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800615a:	222e      	movs	r2, #46	; 0x2e
 800615c:	2100      	movs	r1, #0
 800615e:	2078      	movs	r0, #120	; 0x78
 8006160:	f000 f9f2 	bl	8006548 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006164:	2000      	movs	r0, #0
 8006166:	f000 f843 	bl	80061f0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800616a:	f000 f813 	bl	8006194 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800616e:	4b08      	ldr	r3, [pc, #32]	; (8006190 <SSD1306_Init+0x184>)
 8006170:	2200      	movs	r2, #0
 8006172:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <SSD1306_Init+0x184>)
 8006176:	2200      	movs	r2, #0
 8006178:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <SSD1306_Init+0x184>)
 800617c:	2201      	movs	r2, #1
 800617e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006180:	2301      	movs	r3, #1
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200000f4 	.word	0x200000f4
 8006190:	2000078c 	.word	0x2000078c

08006194 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800619a:	2300      	movs	r3, #0
 800619c:	71fb      	strb	r3, [r7, #7]
 800619e:	e01d      	b.n	80061dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	3b50      	subs	r3, #80	; 0x50
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	2100      	movs	r1, #0
 80061aa:	2078      	movs	r0, #120	; 0x78
 80061ac:	f000 f9cc 	bl	8006548 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80061b0:	2200      	movs	r2, #0
 80061b2:	2100      	movs	r1, #0
 80061b4:	2078      	movs	r0, #120	; 0x78
 80061b6:	f000 f9c7 	bl	8006548 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80061ba:	2210      	movs	r2, #16
 80061bc:	2100      	movs	r1, #0
 80061be:	2078      	movs	r0, #120	; 0x78
 80061c0:	f000 f9c2 	bl	8006548 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <SSD1306_UpdateScreen+0x58>)
 80061ca:	441a      	add	r2, r3
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	2140      	movs	r1, #64	; 0x40
 80061d0:	2078      	movs	r0, #120	; 0x78
 80061d2:	f000 f953 	bl	800647c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	3301      	adds	r3, #1
 80061da:	71fb      	strb	r3, [r7, #7]
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	2b07      	cmp	r3, #7
 80061e0:	d9de      	bls.n	80061a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000038c 	.word	0x2000038c

080061f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <SSD1306_Fill+0x14>
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <SSD1306_Fill+0x16>
 8006204:	23ff      	movs	r3, #255	; 0xff
 8006206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800620a:	4619      	mov	r1, r3
 800620c:	4803      	ldr	r0, [pc, #12]	; (800621c <SSD1306_Fill+0x2c>)
 800620e:	f000 fbd3 	bl	80069b8 <memset>
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	2000038c 	.word	0x2000038c

08006220 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	80fb      	strh	r3, [r7, #6]
 800622a:	460b      	mov	r3, r1
 800622c:	80bb      	strh	r3, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	70fb      	strb	r3, [r7, #3]
	if (
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b7f      	cmp	r3, #127	; 0x7f
 8006236:	d848      	bhi.n	80062ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006238:	88bb      	ldrh	r3, [r7, #4]
 800623a:	2b3f      	cmp	r3, #63	; 0x3f
 800623c:	d845      	bhi.n	80062ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <SSD1306_DrawPixel+0xb4>)
 8006240:	791b      	ldrb	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d006      	beq.n	8006254 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d11a      	bne.n	8006290 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	08db      	lsrs	r3, r3, #3
 8006260:	b298      	uxth	r0, r3
 8006262:	4603      	mov	r3, r0
 8006264:	01db      	lsls	r3, r3, #7
 8006266:	4413      	add	r3, r2
 8006268:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <SSD1306_DrawPixel+0xb8>)
 800626a:	5cd3      	ldrb	r3, [r2, r3]
 800626c:	b25a      	sxtb	r2, r3
 800626e:	88bb      	ldrh	r3, [r7, #4]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	b25b      	sxtb	r3, r3
 800627c:	4313      	orrs	r3, r2
 800627e:	b259      	sxtb	r1, r3
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	4603      	mov	r3, r0
 8006284:	01db      	lsls	r3, r3, #7
 8006286:	4413      	add	r3, r2
 8006288:	b2c9      	uxtb	r1, r1
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <SSD1306_DrawPixel+0xb8>)
 800628c:	54d1      	strb	r1, [r2, r3]
 800628e:	e01d      	b.n	80062cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	88bb      	ldrh	r3, [r7, #4]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	b298      	uxth	r0, r3
 8006298:	4603      	mov	r3, r0
 800629a:	01db      	lsls	r3, r3, #7
 800629c:	4413      	add	r3, r2
 800629e:	4a0e      	ldr	r2, [pc, #56]	; (80062d8 <SSD1306_DrawPixel+0xb8>)
 80062a0:	5cd3      	ldrb	r3, [r2, r3]
 80062a2:	b25a      	sxtb	r2, r3
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2101      	movs	r1, #1
 80062ac:	fa01 f303 	lsl.w	r3, r1, r3
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	4013      	ands	r3, r2
 80062b8:	b259      	sxtb	r1, r3
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	4603      	mov	r3, r0
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	4413      	add	r3, r2
 80062c2:	b2c9      	uxtb	r1, r1
 80062c4:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <SSD1306_DrawPixel+0xb8>)
 80062c6:	54d1      	strb	r1, [r2, r3]
 80062c8:	e000      	b.n	80062cc <SSD1306_DrawPixel+0xac>
		return;
 80062ca:	bf00      	nop
	}
}
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr
 80062d4:	2000078c 	.word	0x2000078c
 80062d8:	2000038c 	.word	0x2000038c

080062dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	460a      	mov	r2, r1
 80062e6:	80fb      	strh	r3, [r7, #6]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80062ec:	4a05      	ldr	r2, [pc, #20]	; (8006304 <SSD1306_GotoXY+0x28>)
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80062f2:	4a04      	ldr	r2, [pc, #16]	; (8006304 <SSD1306_GotoXY+0x28>)
 80062f4:	88bb      	ldrh	r3, [r7, #4]
 80062f6:	8053      	strh	r3, [r2, #2]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	2000078c 	.word	0x2000078c

08006308 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	71fb      	strb	r3, [r7, #7]
 8006314:	4613      	mov	r3, r2
 8006316:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006318:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <SSD1306_Putc+0xfc>)
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	4413      	add	r3, r2
	if (
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	dc07      	bgt.n	8006338 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8006328:	4b36      	ldr	r3, [pc, #216]	; (8006404 <SSD1306_Putc+0xfc>)
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	461a      	mov	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006334:	2b3f      	cmp	r3, #63	; 0x3f
 8006336:	dd01      	ble.n	800633c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8006338:	2300      	movs	r3, #0
 800633a:	e05e      	b.n	80063fa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e04b      	b.n	80063da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	3b20      	subs	r3, #32
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	7849      	ldrb	r1, [r1, #1]
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	4619      	mov	r1, r3
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	440b      	add	r3, r1
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006360:	2300      	movs	r3, #0
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	e030      	b.n	80063c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006376:	4b23      	ldr	r3, [pc, #140]	; (8006404 <SSD1306_Putc+0xfc>)
 8006378:	881a      	ldrh	r2, [r3, #0]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	b29b      	uxth	r3, r3
 800637e:	4413      	add	r3, r2
 8006380:	b298      	uxth	r0, r3
 8006382:	4b20      	ldr	r3, [pc, #128]	; (8006404 <SSD1306_Putc+0xfc>)
 8006384:	885a      	ldrh	r2, [r3, #2]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	b29b      	uxth	r3, r3
 800638a:	4413      	add	r3, r2
 800638c:	b29b      	uxth	r3, r3
 800638e:	79ba      	ldrb	r2, [r7, #6]
 8006390:	4619      	mov	r1, r3
 8006392:	f7ff ff45 	bl	8006220 <SSD1306_DrawPixel>
 8006396:	e014      	b.n	80063c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006398:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <SSD1306_Putc+0xfc>)
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	b298      	uxth	r0, r3
 80063a4:	4b17      	ldr	r3, [pc, #92]	; (8006404 <SSD1306_Putc+0xfc>)
 80063a6:	885a      	ldrh	r2, [r3, #2]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	b299      	uxth	r1, r3
 80063b0:	79bb      	ldrb	r3, [r7, #6]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	f7ff ff2f 	bl	8006220 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3301      	adds	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d3c8      	bcc.n	8006366 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	3301      	adds	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	461a      	mov	r2, r3
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d3ad      	bcc.n	8006342 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <SSD1306_Putc+0xfc>)
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	4b03      	ldr	r3, [pc, #12]	; (8006404 <SSD1306_Putc+0xfc>)
 80063f6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80063f8:	79fb      	ldrb	r3, [r7, #7]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	2000078c 	.word	0x2000078c

08006408 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006416:	e012      	b.n	800643e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	79fa      	ldrb	r2, [r7, #7]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff ff71 	bl	8006308 <SSD1306_Putc>
 8006426:	4603      	mov	r3, r0
 8006428:	461a      	mov	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d002      	beq.n	8006438 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	e008      	b.n	800644a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e8      	bne.n	8006418 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	781b      	ldrb	r3, [r3, #0]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <ssd1306_I2C_Init+0x24>)
 800645c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800645e:	e002      	b.n	8006466 <ssd1306_I2C_Init+0x12>
		p--;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f9      	bne.n	8006460 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	0003d090 	.word	0x0003d090

0800647c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b0c7      	sub	sp, #284	; 0x11c
 8006480:	af02      	add	r7, sp, #8
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800648a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800648e:	600a      	str	r2, [r1, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006496:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800649a:	4622      	mov	r2, r4
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80064a6:	4602      	mov	r2, r0
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064b2:	460a      	mov	r2, r1
 80064b4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80064b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80064c2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80064d0:	e015      	b.n	80064fe <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80064d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80064d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80064da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	441a      	add	r2, r3
 80064e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80064e6:	3301      	adds	r3, #1
 80064e8:	7811      	ldrb	r1, [r2, #0]
 80064ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80064ee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80064f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80064f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80064f8:	3301      	adds	r3, #1
 80064fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80064fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006502:	b29b      	uxth	r3, r3
 8006504:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006508:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800650c:	8812      	ldrh	r2, [r2, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d8df      	bhi.n	80064d2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8006512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006516:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b299      	uxth	r1, r3
 800651e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006522:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	f107 020c 	add.w	r2, r7, #12
 8006530:	200a      	movs	r0, #10
 8006532:	9000      	str	r0, [sp, #0]
 8006534:	4803      	ldr	r0, [pc, #12]	; (8006544 <ssd1306_I2C_WriteMulti+0xc8>)
 8006536:	f7fc feab 	bl	8003290 <HAL_I2C_Master_Transmit>
}
 800653a:	bf00      	nop
 800653c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006540:	46bd      	mov	sp, r7
 8006542:	bd90      	pop	{r4, r7, pc}
 8006544:	200000f4 	.word	0x200000f4

08006548 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af02      	add	r7, sp, #8
 800654e:	4603      	mov	r3, r0
 8006550:	71fb      	strb	r3, [r7, #7]
 8006552:	460b      	mov	r3, r1
 8006554:	71bb      	strb	r3, [r7, #6]
 8006556:	4613      	mov	r3, r2
 8006558:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800655e:	797b      	ldrb	r3, [r7, #5]
 8006560:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	b299      	uxth	r1, r3
 8006566:	f107 020c 	add.w	r2, r7, #12
 800656a:	230a      	movs	r3, #10
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2302      	movs	r3, #2
 8006570:	4803      	ldr	r0, [pc, #12]	; (8006580 <ssd1306_I2C_Write+0x38>)
 8006572:	f7fc fe8d 	bl	8003290 <HAL_I2C_Master_Transmit>
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200000f4 	.word	0x200000f4

08006584 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	887a      	ldrh	r2, [r7, #2]
 80065a2:	809a      	strh	r2, [r3, #4]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	605a      	str	r2, [r3, #4]
 80065c4:	609a      	str	r2, [r3, #8]
 80065c6:	60da      	str	r2, [r3, #12]

	if(pMode == OUTPUT)
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d111      	bne.n	80065f2 <set_dht11_gpio_mode+0x44>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	889b      	ldrh	r3, [r3, #4]
 80065d2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065dc:	2303      	movs	r3, #3
 80065de:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f107 0208 	add.w	r2, r7, #8
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fb58 	bl	8002ca0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 80065f0:	e013      	b.n	800661a <set_dht11_gpio_mode+0x6c>
	}else if(pMode == INPUT)
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d110      	bne.n	800661a <set_dht11_gpio_mode+0x6c>
	  GPIO_InitStruct.Pin = dht->pin;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	889b      	ldrh	r3, [r3, #4]
 80065fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006602:	2300      	movs	r3, #0
 8006604:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006606:	2303      	movs	r3, #3
 8006608:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f107 0208 	add.w	r2, r7, #8
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f7fc fb43 	bl	8002ca0 <HAL_GPIO_Init>
}
 800661a:	bf00      	nop
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b094      	sub	sp, #80	; 0x50
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t mTime2 = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t mBit = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	uint8_t humVal = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t tempVal = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t parityVal = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
//	uint8_t genParity = 0;
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 800664a:	2101      	movs	r1, #1
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ffae 	bl	80065ae <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	889b      	ldrh	r3, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	4619      	mov	r1, r3
 800665e:	f7fc fcba 	bl	8002fd6 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8006662:	2012      	movs	r0, #18
 8006664:	f7fb fce0 	bl	8002028 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8006668:	b672      	cpsid	i
}
 800666a:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe f85f 	bl	8004734 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8006676:	2100      	movs	r1, #0
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff98 	bl	80065ae <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006688:	e00b      	b.n	80066a2 <readDHT11+0x80>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	b29b      	uxth	r3, r3
 8006694:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006698:	d903      	bls.n	80066a2 <readDHT11+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 800669a:	b662      	cpsie	i
}
 800669c:	bf00      	nop
			__enable_irq();
			return 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	e129      	b.n	80068f6 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	889b      	ldrh	r3, [r3, #4]
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7fc fc7b 	bl	8002fa8 <HAL_GPIO_ReadPin>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d0e8      	beq.n	800668a <readDHT11+0x68>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80066c2:	e00b      	b.n	80066dc <readDHT11+0xba>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066d2:	d903      	bls.n	80066dc <readDHT11+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 80066d4:	b662      	cpsie	i
}
 80066d6:	bf00      	nop
			__enable_irq();
			return 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	e10c      	b.n	80068f6 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	889b      	ldrh	r3, [r3, #4]
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f7fc fc5e 	bl	8002fa8 <HAL_GPIO_ReadPin>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0e8      	beq.n	80066c4 <readDHT11+0xa2>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006706:	e00b      	b.n	8006720 <readDHT11+0xfe>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	b29b      	uxth	r3, r3
 8006712:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006716:	d903      	bls.n	8006720 <readDHT11+0xfe>
  __ASM volatile ("cpsie i" : : : "memory");
 8006718:	b662      	cpsie	i
}
 800671a:	bf00      	nop
			__enable_irq();
			return 0;
 800671c:	2300      	movs	r3, #0
 800671e:	e0ea      	b.n	80068f6 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	889b      	ldrh	r3, [r3, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f7fc fc3c 	bl	8002fa8 <HAL_GPIO_ReadPin>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d0e8      	beq.n	8006708 <readDHT11+0xe6>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8006740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006742:	2b4a      	cmp	r3, #74	; 0x4a
 8006744:	d80c      	bhi.n	8006760 <readDHT11+0x13e>
 8006746:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006748:	2b55      	cmp	r3, #85	; 0x55
 800674a:	d909      	bls.n	8006760 <readDHT11+0x13e>
 800674c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800674e:	2b4a      	cmp	r3, #74	; 0x4a
 8006750:	d806      	bhi.n	8006760 <readDHT11+0x13e>
 8006752:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006754:	2b55      	cmp	r3, #85	; 0x55
 8006756:	d903      	bls.n	8006760 <readDHT11+0x13e>
  __ASM volatile ("cpsie i" : : : "memory");
 8006758:	b662      	cpsie	i
}
 800675a:	bf00      	nop
	{
		__enable_irq();
		return 0;
 800675c:	2300      	movs	r3, #0
 800675e:	e0ca      	b.n	80068f6 <readDHT11+0x2d4>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8006760:	2300      	movs	r3, #0
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	e05d      	b.n	8006822 <readDHT11+0x200>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8006770:	e00b      	b.n	800678a <readDHT11+0x168>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	b29b      	uxth	r3, r3
 800677c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006780:	d903      	bls.n	800678a <readDHT11+0x168>
  __ASM volatile ("cpsie i" : : : "memory");
 8006782:	b662      	cpsie	i
}
 8006784:	bf00      	nop
				__enable_irq();
				return 0;
 8006786:	2300      	movs	r3, #0
 8006788:	e0b5      	b.n	80068f6 <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	889b      	ldrh	r3, [r3, #4]
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7fc fc07 	bl	8002fa8 <HAL_GPIO_ReadPin>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0e8      	beq.n	8006772 <readDHT11+0x150>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80067aa:	e00b      	b.n	80067c4 <readDHT11+0x1a2>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067ba:	d903      	bls.n	80067c4 <readDHT11+0x1a2>
  __ASM volatile ("cpsie i" : : : "memory");
 80067bc:	b662      	cpsie	i
}
 80067be:	bf00      	nop
				__enable_irq();
				return 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e098      	b.n	80068f6 <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	889b      	ldrh	r3, [r3, #4]
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fc fbea 	bl	8002fa8 <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d0e8      	beq.n	80067ac <readDHT11+0x18a>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80067e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067e6:	2b14      	cmp	r3, #20
 80067e8:	d906      	bls.n	80067f8 <readDHT11+0x1d6>
 80067ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067ec:	2b1d      	cmp	r3, #29
 80067ee:	d803      	bhi.n	80067f8 <readDHT11+0x1d6>
		{
			mBit = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80067f6:	e008      	b.n	800680a <readDHT11+0x1e8>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80067f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067fa:	2b3c      	cmp	r3, #60	; 0x3c
 80067fc:	d905      	bls.n	800680a <readDHT11+0x1e8>
 80067fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006800:	2b4f      	cmp	r3, #79	; 0x4f
 8006802:	d802      	bhi.n	800680a <readDHT11+0x1e8>
		{
			 mBit = 1;
 8006804:	2301      	movs	r3, #1
 8006806:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 800680a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800680e:	b2d9      	uxtb	r1, r3
 8006810:	f107 020c 	add.w	r2, r7, #12
 8006814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006816:	4413      	add	r3, r2
 8006818:	460a      	mov	r2, r1
 800681a:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 800681c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681e:	3301      	adds	r3, #1
 8006820:	647b      	str	r3, [r7, #68]	; 0x44
 8006822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006824:	2b27      	cmp	r3, #39	; 0x27
 8006826:	dd9e      	ble.n	8006766 <readDHT11+0x144>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f7fd ffcb 	bl	80047c8 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8006832:	b662      	cpsie	i
}
 8006834:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8006836:	2300      	movs	r3, #0
 8006838:	643b      	str	r3, [r7, #64]	; 0x40
 800683a:	e011      	b.n	8006860 <readDHT11+0x23e>
	{
		humVal += mData[i];
 800683c:	f107 020c 	add.w	r2, r7, #12
 8006840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006842:	4413      	add	r3, r2
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800684a:	4413      	add	r3, r2
 800684c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8006850:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 800685a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685c:	3301      	adds	r3, #1
 800685e:	643b      	str	r3, [r7, #64]	; 0x40
 8006860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006862:	2b07      	cmp	r3, #7
 8006864:	ddea      	ble.n	800683c <readDHT11+0x21a>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8006866:	2310      	movs	r3, #16
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686a:	e011      	b.n	8006890 <readDHT11+0x26e>
	{
		tempVal += mData[i];
 800686c:	f107 020c 	add.w	r2, r7, #12
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	4413      	add	r3, r2
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800687a:	4413      	add	r3, r2
 800687c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8006880:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	3301      	adds	r3, #1
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	2b17      	cmp	r3, #23
 8006894:	ddea      	ble.n	800686c <readDHT11+0x24a>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8006896:	2320      	movs	r3, #32
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
 800689a:	e011      	b.n	80068c0 <readDHT11+0x29e>
	{
		parityVal += mData[i];
 800689c:	f107 020c 	add.w	r2, r7, #12
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	4413      	add	r3, r2
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80068aa:	4413      	add	r3, r2
 80068ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 80068b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	3301      	adds	r3, #1
 80068be:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	2b27      	cmp	r3, #39	; 0x27
 80068c4:	ddea      	ble.n	800689c <readDHT11+0x27a>
	}

	parityVal = parityVal >> 1;
 80068c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 80068d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 80068da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

//	genParity = humVal + tempVal;

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80068ea:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80068f2:	735a      	strb	r2, [r3, #13]
	return 1;
 80068f4:	2301      	movs	r3, #1
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3750      	adds	r7, #80	; 0x50
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <analogRead>:
 *  Created on: Sep 13, 2024
 *      Author: phat.nguyen-thanh
 */

#include "analog.h"
uint16_t analogRead(ADC_HandleTypeDef *adcx) {
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adcx);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fc8a 	bl	8002220 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adcx, 1000);
 800690c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fb fd5f 	bl	80023d4 <HAL_ADC_PollForConversion>
	uint16_t ret = HAL_ADC_GetValue(adcx);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fb fe62 	bl	80025e0 <HAL_ADC_GetValue>
 800691c:	4603      	mov	r3, r0
 800691e:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(adcx);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fb fd2b 	bl	800237c <HAL_ADC_Stop>
	return ret;
 8006926:	89fb      	ldrh	r3, [r7, #14]

}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <timer_init>:

#include "timer.h"
struct Timer_Conf_t TimerConfig;
enum TimerStatus gTimerStatus = TIMER_NOT_INITIAL;

void timer_init(TIM_HandleTypeDef *htim){
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	gTimerStatus = TIMER_NOT_INITIAL;
 8006938:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <timer_init+0x40>)
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
	switch(gTimerStatus)
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <timer_init+0x40>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <timer_init+0x1c>
 8006946:	2b01      	cmp	r3, #1
 8006948:	d00c      	beq.n	8006964 <timer_init+0x34>
			break;
		case TIMER_INITIALIZED:
			// TODO
			break;
		default:
			break;
 800694a:	e00c      	b.n	8006966 <timer_init+0x36>
			TimerConfig.htim = htim;
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <timer_init+0x44>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start(TimerConfig.htim);
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <timer_init+0x44>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd feec 	bl	8004734 <HAL_TIM_Base_Start>
			gTimerStatus = TIMER_INITIALIZED;
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <timer_init+0x40>)
 800695e:	2201      	movs	r2, #1
 8006960:	701a      	strb	r2, [r3, #0]
			break;
 8006962:	e000      	b.n	8006966 <timer_init+0x36>
			break;
 8006964:	bf00      	nop
	}
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000079c 	.word	0x2000079c
 8006974:	20000794 	.word	0x20000794

08006978 <siprintf>:
 8006978:	b40e      	push	{r1, r2, r3}
 800697a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800697e:	b500      	push	{lr}
 8006980:	b09c      	sub	sp, #112	; 0x70
 8006982:	ab1d      	add	r3, sp, #116	; 0x74
 8006984:	9002      	str	r0, [sp, #8]
 8006986:	9006      	str	r0, [sp, #24]
 8006988:	9107      	str	r1, [sp, #28]
 800698a:	9104      	str	r1, [sp, #16]
 800698c:	4808      	ldr	r0, [pc, #32]	; (80069b0 <siprintf+0x38>)
 800698e:	4909      	ldr	r1, [pc, #36]	; (80069b4 <siprintf+0x3c>)
 8006990:	f853 2b04 	ldr.w	r2, [r3], #4
 8006994:	9105      	str	r1, [sp, #20]
 8006996:	6800      	ldr	r0, [r0, #0]
 8006998:	a902      	add	r1, sp, #8
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f000 f98e 	bl	8006cbc <_svfiprintf_r>
 80069a0:	2200      	movs	r2, #0
 80069a2:	9b02      	ldr	r3, [sp, #8]
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	b01c      	add	sp, #112	; 0x70
 80069a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069ac:	b003      	add	sp, #12
 80069ae:	4770      	bx	lr
 80069b0:	20000060 	.word	0x20000060
 80069b4:	ffff0208 	.word	0xffff0208

080069b8 <memset>:
 80069b8:	4603      	mov	r3, r0
 80069ba:	4402      	add	r2, r0
 80069bc:	4293      	cmp	r3, r2
 80069be:	d100      	bne.n	80069c2 <memset+0xa>
 80069c0:	4770      	bx	lr
 80069c2:	f803 1b01 	strb.w	r1, [r3], #1
 80069c6:	e7f9      	b.n	80069bc <memset+0x4>

080069c8 <__errno>:
 80069c8:	4b01      	ldr	r3, [pc, #4]	; (80069d0 <__errno+0x8>)
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000060 	.word	0x20000060

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	2600      	movs	r6, #0
 80069d8:	4d0c      	ldr	r5, [pc, #48]	; (8006a0c <__libc_init_array+0x38>)
 80069da:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <__libc_init_array+0x3c>)
 80069dc:	1b64      	subs	r4, r4, r5
 80069de:	10a4      	asrs	r4, r4, #2
 80069e0:	42a6      	cmp	r6, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	f001 fb82 	bl	80080ec <_init>
 80069e8:	2600      	movs	r6, #0
 80069ea:	4d0a      	ldr	r5, [pc, #40]	; (8006a14 <__libc_init_array+0x40>)
 80069ec:	4c0a      	ldr	r4, [pc, #40]	; (8006a18 <__libc_init_array+0x44>)
 80069ee:	1b64      	subs	r4, r4, r5
 80069f0:	10a4      	asrs	r4, r4, #2
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fc:	4798      	blx	r3
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a06:	4798      	blx	r3
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	08008998 	.word	0x08008998
 8006a10:	08008998 	.word	0x08008998
 8006a14:	08008998 	.word	0x08008998
 8006a18:	0800899c 	.word	0x0800899c

08006a1c <__retarget_lock_acquire_recursive>:
 8006a1c:	4770      	bx	lr

08006a1e <__retarget_lock_release_recursive>:
 8006a1e:	4770      	bx	lr

08006a20 <_free_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d040      	beq.n	8006aaa <_free_r+0x8a>
 8006a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2c:	1f0c      	subs	r4, r1, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfb8      	it	lt
 8006a32:	18e4      	addlt	r4, r4, r3
 8006a34:	f000 f8dc 	bl	8006bf0 <__malloc_lock>
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <_free_r+0x8c>)
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	b933      	cbnz	r3, 8006a4c <_free_r+0x2c>
 8006a3e:	6063      	str	r3, [r4, #4]
 8006a40:	6014      	str	r4, [r2, #0]
 8006a42:	4628      	mov	r0, r5
 8006a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a48:	f000 b8d8 	b.w	8006bfc <__malloc_unlock>
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d908      	bls.n	8006a62 <_free_r+0x42>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428b      	cmp	r3, r1
 8006a56:	bf01      	itttt	eq
 8006a58:	6819      	ldreq	r1, [r3, #0]
 8006a5a:	685b      	ldreq	r3, [r3, #4]
 8006a5c:	1809      	addeq	r1, r1, r0
 8006a5e:	6021      	streq	r1, [r4, #0]
 8006a60:	e7ed      	b.n	8006a3e <_free_r+0x1e>
 8006a62:	461a      	mov	r2, r3
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b10b      	cbz	r3, 8006a6c <_free_r+0x4c>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d9fa      	bls.n	8006a62 <_free_r+0x42>
 8006a6c:	6811      	ldr	r1, [r2, #0]
 8006a6e:	1850      	adds	r0, r2, r1
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d10b      	bne.n	8006a8c <_free_r+0x6c>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	4401      	add	r1, r0
 8006a78:	1850      	adds	r0, r2, r1
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	d1e0      	bne.n	8006a42 <_free_r+0x22>
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4408      	add	r0, r1
 8006a86:	6010      	str	r0, [r2, #0]
 8006a88:	6053      	str	r3, [r2, #4]
 8006a8a:	e7da      	b.n	8006a42 <_free_r+0x22>
 8006a8c:	d902      	bls.n	8006a94 <_free_r+0x74>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	e7d6      	b.n	8006a42 <_free_r+0x22>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	1821      	adds	r1, r4, r0
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf01      	itttt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	1809      	addeq	r1, r1, r0
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6054      	str	r4, [r2, #4]
 8006aa8:	e7cb      	b.n	8006a42 <_free_r+0x22>
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	200008e0 	.word	0x200008e0

08006ab0 <sbrk_aligned>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4e0e      	ldr	r6, [pc, #56]	; (8006aec <sbrk_aligned+0x3c>)
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	6831      	ldr	r1, [r6, #0]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	b911      	cbnz	r1, 8006ac2 <sbrk_aligned+0x12>
 8006abc:	f000 fbaa 	bl	8007214 <_sbrk_r>
 8006ac0:	6030      	str	r0, [r6, #0]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 fba5 	bl	8007214 <_sbrk_r>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d00a      	beq.n	8006ae4 <sbrk_aligned+0x34>
 8006ace:	1cc4      	adds	r4, r0, #3
 8006ad0:	f024 0403 	bic.w	r4, r4, #3
 8006ad4:	42a0      	cmp	r0, r4
 8006ad6:	d007      	beq.n	8006ae8 <sbrk_aligned+0x38>
 8006ad8:	1a21      	subs	r1, r4, r0
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 fb9a 	bl	8007214 <_sbrk_r>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d101      	bne.n	8006ae8 <sbrk_aligned+0x38>
 8006ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ae8:	4620      	mov	r0, r4
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	200008e4 	.word	0x200008e4

08006af0 <_malloc_r>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	1ccd      	adds	r5, r1, #3
 8006af6:	f025 0503 	bic.w	r5, r5, #3
 8006afa:	3508      	adds	r5, #8
 8006afc:	2d0c      	cmp	r5, #12
 8006afe:	bf38      	it	cc
 8006b00:	250c      	movcc	r5, #12
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	4607      	mov	r7, r0
 8006b06:	db01      	blt.n	8006b0c <_malloc_r+0x1c>
 8006b08:	42a9      	cmp	r1, r5
 8006b0a:	d905      	bls.n	8006b18 <_malloc_r+0x28>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	2600      	movs	r6, #0
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4630      	mov	r0, r6
 8006b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006bec <_malloc_r+0xfc>
 8006b1c:	f000 f868 	bl	8006bf0 <__malloc_lock>
 8006b20:	f8d8 3000 	ldr.w	r3, [r8]
 8006b24:	461c      	mov	r4, r3
 8006b26:	bb5c      	cbnz	r4, 8006b80 <_malloc_r+0x90>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff ffc0 	bl	8006ab0 <sbrk_aligned>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	4604      	mov	r4, r0
 8006b34:	d155      	bne.n	8006be2 <_malloc_r+0xf2>
 8006b36:	f8d8 4000 	ldr.w	r4, [r8]
 8006b3a:	4626      	mov	r6, r4
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	d145      	bne.n	8006bcc <_malloc_r+0xdc>
 8006b40:	2c00      	cmp	r4, #0
 8006b42:	d048      	beq.n	8006bd6 <_malloc_r+0xe6>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	4631      	mov	r1, r6
 8006b48:	4638      	mov	r0, r7
 8006b4a:	eb04 0903 	add.w	r9, r4, r3
 8006b4e:	f000 fb61 	bl	8007214 <_sbrk_r>
 8006b52:	4581      	cmp	r9, r0
 8006b54:	d13f      	bne.n	8006bd6 <_malloc_r+0xe6>
 8006b56:	6821      	ldr	r1, [r4, #0]
 8006b58:	4638      	mov	r0, r7
 8006b5a:	1a6d      	subs	r5, r5, r1
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7ff ffa7 	bl	8006ab0 <sbrk_aligned>
 8006b62:	3001      	adds	r0, #1
 8006b64:	d037      	beq.n	8006bd6 <_malloc_r+0xe6>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	442b      	add	r3, r5
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d038      	beq.n	8006be6 <_malloc_r+0xf6>
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	42a2      	cmp	r2, r4
 8006b78:	d12b      	bne.n	8006bd2 <_malloc_r+0xe2>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	e00f      	b.n	8006ba0 <_malloc_r+0xb0>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	d41f      	bmi.n	8006bc6 <_malloc_r+0xd6>
 8006b86:	2a0b      	cmp	r2, #11
 8006b88:	d917      	bls.n	8006bba <_malloc_r+0xca>
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	6059      	strne	r1, [r3, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	bf08      	it	eq
 8006b98:	f8c8 1000 	streq.w	r1, [r8]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f104 060b 	add.w	r6, r4, #11
 8006ba6:	f000 f829 	bl	8006bfc <__malloc_unlock>
 8006baa:	f026 0607 	bic.w	r6, r6, #7
 8006bae:	1d23      	adds	r3, r4, #4
 8006bb0:	1af2      	subs	r2, r6, r3
 8006bb2:	d0ae      	beq.n	8006b12 <_malloc_r+0x22>
 8006bb4:	1b9b      	subs	r3, r3, r6
 8006bb6:	50a3      	str	r3, [r4, r2]
 8006bb8:	e7ab      	b.n	8006b12 <_malloc_r+0x22>
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	6862      	ldr	r2, [r4, #4]
 8006bbe:	d1dd      	bne.n	8006b7c <_malloc_r+0x8c>
 8006bc0:	f8c8 2000 	str.w	r2, [r8]
 8006bc4:	e7ec      	b.n	8006ba0 <_malloc_r+0xb0>
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	6864      	ldr	r4, [r4, #4]
 8006bca:	e7ac      	b.n	8006b26 <_malloc_r+0x36>
 8006bcc:	4634      	mov	r4, r6
 8006bce:	6876      	ldr	r6, [r6, #4]
 8006bd0:	e7b4      	b.n	8006b3c <_malloc_r+0x4c>
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	e7cc      	b.n	8006b70 <_malloc_r+0x80>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	4638      	mov	r0, r7
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f000 f80e 	bl	8006bfc <__malloc_unlock>
 8006be0:	e797      	b.n	8006b12 <_malloc_r+0x22>
 8006be2:	6025      	str	r5, [r4, #0]
 8006be4:	e7dc      	b.n	8006ba0 <_malloc_r+0xb0>
 8006be6:	605b      	str	r3, [r3, #4]
 8006be8:	deff      	udf	#255	; 0xff
 8006bea:	bf00      	nop
 8006bec:	200008e0 	.word	0x200008e0

08006bf0 <__malloc_lock>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	; (8006bf8 <__malloc_lock+0x8>)
 8006bf2:	f7ff bf13 	b.w	8006a1c <__retarget_lock_acquire_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	200008dc 	.word	0x200008dc

08006bfc <__malloc_unlock>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__malloc_unlock+0x8>)
 8006bfe:	f7ff bf0e 	b.w	8006a1e <__retarget_lock_release_recursive>
 8006c02:	bf00      	nop
 8006c04:	200008dc 	.word	0x200008dc

08006c08 <__ssputs_r>:
 8006c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	461f      	mov	r7, r3
 8006c0e:	688e      	ldr	r6, [r1, #8]
 8006c10:	4682      	mov	sl, r0
 8006c12:	42be      	cmp	r6, r7
 8006c14:	460c      	mov	r4, r1
 8006c16:	4690      	mov	r8, r2
 8006c18:	680b      	ldr	r3, [r1, #0]
 8006c1a:	d82c      	bhi.n	8006c76 <__ssputs_r+0x6e>
 8006c1c:	898a      	ldrh	r2, [r1, #12]
 8006c1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c22:	d026      	beq.n	8006c72 <__ssputs_r+0x6a>
 8006c24:	6965      	ldr	r5, [r4, #20]
 8006c26:	6909      	ldr	r1, [r1, #16]
 8006c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c2c:	eba3 0901 	sub.w	r9, r3, r1
 8006c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c34:	1c7b      	adds	r3, r7, #1
 8006c36:	444b      	add	r3, r9
 8006c38:	106d      	asrs	r5, r5, #1
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	bf38      	it	cc
 8006c3e:	461d      	movcc	r5, r3
 8006c40:	0553      	lsls	r3, r2, #21
 8006c42:	d527      	bpl.n	8006c94 <__ssputs_r+0x8c>
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7ff ff53 	bl	8006af0 <_malloc_r>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	b360      	cbz	r0, 8006ca8 <__ssputs_r+0xa0>
 8006c4e:	464a      	mov	r2, r9
 8006c50:	6921      	ldr	r1, [r4, #16]
 8006c52:	f000 fafd 	bl	8007250 <memcpy>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	6126      	str	r6, [r4, #16]
 8006c64:	444e      	add	r6, r9
 8006c66:	6026      	str	r6, [r4, #0]
 8006c68:	463e      	mov	r6, r7
 8006c6a:	6165      	str	r5, [r4, #20]
 8006c6c:	eba5 0509 	sub.w	r5, r5, r9
 8006c70:	60a5      	str	r5, [r4, #8]
 8006c72:	42be      	cmp	r6, r7
 8006c74:	d900      	bls.n	8006c78 <__ssputs_r+0x70>
 8006c76:	463e      	mov	r6, r7
 8006c78:	4632      	mov	r2, r6
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	f000 faaf 	bl	80071e0 <memmove>
 8006c82:	2000      	movs	r0, #0
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	1b9b      	subs	r3, r3, r6
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	4433      	add	r3, r6
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	462a      	mov	r2, r5
 8006c96:	f000 fae9 	bl	800726c <_realloc_r>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d1e0      	bne.n	8006c62 <__ssputs_r+0x5a>
 8006ca0:	4650      	mov	r0, sl
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	f7ff febc 	bl	8006a20 <_free_r>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	f8ca 3000 	str.w	r3, [sl]
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	e7e9      	b.n	8006c90 <__ssputs_r+0x88>

08006cbc <_svfiprintf_r>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	898b      	ldrh	r3, [r1, #12]
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	061b      	lsls	r3, r3, #24
 8006cc8:	460d      	mov	r5, r1
 8006cca:	4614      	mov	r4, r2
 8006ccc:	b09d      	sub	sp, #116	; 0x74
 8006cce:	d50e      	bpl.n	8006cee <_svfiprintf_r+0x32>
 8006cd0:	690b      	ldr	r3, [r1, #16]
 8006cd2:	b963      	cbnz	r3, 8006cee <_svfiprintf_r+0x32>
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	f7ff ff0b 	bl	8006af0 <_malloc_r>
 8006cda:	6028      	str	r0, [r5, #0]
 8006cdc:	6128      	str	r0, [r5, #16]
 8006cde:	b920      	cbnz	r0, 8006cea <_svfiprintf_r+0x2e>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e0d0      	b.n	8006e8c <_svfiprintf_r+0x1d0>
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	616b      	str	r3, [r5, #20]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf8:	2330      	movs	r3, #48	; 0x30
 8006cfa:	f04f 0901 	mov.w	r9, #1
 8006cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d02:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006ea4 <_svfiprintf_r+0x1e8>
 8006d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	469a      	mov	sl, r3
 8006d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d12:	b10a      	cbz	r2, 8006d18 <_svfiprintf_r+0x5c>
 8006d14:	2a25      	cmp	r2, #37	; 0x25
 8006d16:	d1f9      	bne.n	8006d0c <_svfiprintf_r+0x50>
 8006d18:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1c:	d00b      	beq.n	8006d36 <_svfiprintf_r+0x7a>
 8006d1e:	465b      	mov	r3, fp
 8006d20:	4622      	mov	r2, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff ff6f 	bl	8006c08 <__ssputs_r>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f000 80a9 	beq.w	8006e82 <_svfiprintf_r+0x1c6>
 8006d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d32:	445a      	add	r2, fp
 8006d34:	9209      	str	r2, [sp, #36]	; 0x24
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80a1 	beq.w	8006e82 <_svfiprintf_r+0x1c6>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4a:	f10a 0a01 	add.w	sl, sl, #1
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	9307      	str	r3, [sp, #28]
 8006d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d56:	931a      	str	r3, [sp, #104]	; 0x68
 8006d58:	4654      	mov	r4, sl
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	4850      	ldr	r0, [pc, #320]	; (8006ea4 <_svfiprintf_r+0x1e8>)
 8006d62:	f000 fa67 	bl	8007234 <memchr>
 8006d66:	9a04      	ldr	r2, [sp, #16]
 8006d68:	b9d8      	cbnz	r0, 8006da2 <_svfiprintf_r+0xe6>
 8006d6a:	06d0      	lsls	r0, r2, #27
 8006d6c:	bf44      	itt	mi
 8006d6e:	2320      	movmi	r3, #32
 8006d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d74:	0711      	lsls	r1, r2, #28
 8006d76:	bf44      	itt	mi
 8006d78:	232b      	movmi	r3, #43	; 0x2b
 8006d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b2a      	cmp	r3, #42	; 0x2a
 8006d84:	d015      	beq.n	8006db2 <_svfiprintf_r+0xf6>
 8006d86:	4654      	mov	r4, sl
 8006d88:	2000      	movs	r0, #0
 8006d8a:	f04f 0c0a 	mov.w	ip, #10
 8006d8e:	9a07      	ldr	r2, [sp, #28]
 8006d90:	4621      	mov	r1, r4
 8006d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d96:	3b30      	subs	r3, #48	; 0x30
 8006d98:	2b09      	cmp	r3, #9
 8006d9a:	d94d      	bls.n	8006e38 <_svfiprintf_r+0x17c>
 8006d9c:	b1b0      	cbz	r0, 8006dcc <_svfiprintf_r+0x110>
 8006d9e:	9207      	str	r2, [sp, #28]
 8006da0:	e014      	b.n	8006dcc <_svfiprintf_r+0x110>
 8006da2:	eba0 0308 	sub.w	r3, r0, r8
 8006da6:	fa09 f303 	lsl.w	r3, r9, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	46a2      	mov	sl, r4
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	e7d2      	b.n	8006d58 <_svfiprintf_r+0x9c>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	1d19      	adds	r1, r3, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	9103      	str	r1, [sp, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfbb      	ittet	lt
 8006dbe:	425b      	neglt	r3, r3
 8006dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc4:	9307      	strge	r3, [sp, #28]
 8006dc6:	9307      	strlt	r3, [sp, #28]
 8006dc8:	bfb8      	it	lt
 8006dca:	9204      	strlt	r2, [sp, #16]
 8006dcc:	7823      	ldrb	r3, [r4, #0]
 8006dce:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd0:	d10c      	bne.n	8006dec <_svfiprintf_r+0x130>
 8006dd2:	7863      	ldrb	r3, [r4, #1]
 8006dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd6:	d134      	bne.n	8006e42 <_svfiprintf_r+0x186>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	3402      	adds	r4, #2
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	9203      	str	r2, [sp, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfb8      	it	lt
 8006de6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006ea8 <_svfiprintf_r+0x1ec>
 8006df0:	2203      	movs	r2, #3
 8006df2:	4650      	mov	r0, sl
 8006df4:	7821      	ldrb	r1, [r4, #0]
 8006df6:	f000 fa1d 	bl	8007234 <memchr>
 8006dfa:	b138      	cbz	r0, 8006e0c <_svfiprintf_r+0x150>
 8006dfc:	2240      	movs	r2, #64	; 0x40
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	eba0 000a 	sub.w	r0, r0, sl
 8006e04:	4082      	lsls	r2, r0
 8006e06:	4313      	orrs	r3, r2
 8006e08:	3401      	adds	r4, #1
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e10:	2206      	movs	r2, #6
 8006e12:	4826      	ldr	r0, [pc, #152]	; (8006eac <_svfiprintf_r+0x1f0>)
 8006e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e18:	f000 fa0c 	bl	8007234 <memchr>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d038      	beq.n	8006e92 <_svfiprintf_r+0x1d6>
 8006e20:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <_svfiprintf_r+0x1f4>)
 8006e22:	bb1b      	cbnz	r3, 8006e6c <_svfiprintf_r+0x1b0>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	3307      	adds	r3, #7
 8006e28:	f023 0307 	bic.w	r3, r3, #7
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	9303      	str	r3, [sp, #12]
 8006e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e32:	4433      	add	r3, r6
 8006e34:	9309      	str	r3, [sp, #36]	; 0x24
 8006e36:	e768      	b.n	8006d0a <_svfiprintf_r+0x4e>
 8006e38:	460c      	mov	r4, r1
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e40:	e7a6      	b.n	8006d90 <_svfiprintf_r+0xd4>
 8006e42:	2300      	movs	r3, #0
 8006e44:	f04f 0c0a 	mov.w	ip, #10
 8006e48:	4619      	mov	r1, r3
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e54:	3a30      	subs	r2, #48	; 0x30
 8006e56:	2a09      	cmp	r2, #9
 8006e58:	d903      	bls.n	8006e62 <_svfiprintf_r+0x1a6>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0c6      	beq.n	8006dec <_svfiprintf_r+0x130>
 8006e5e:	9105      	str	r1, [sp, #20]
 8006e60:	e7c4      	b.n	8006dec <_svfiprintf_r+0x130>
 8006e62:	4604      	mov	r4, r0
 8006e64:	2301      	movs	r3, #1
 8006e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6a:	e7f0      	b.n	8006e4e <_svfiprintf_r+0x192>
 8006e6c:	ab03      	add	r3, sp, #12
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4638      	mov	r0, r7
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <_svfiprintf_r+0x1f8>)
 8006e76:	a904      	add	r1, sp, #16
 8006e78:	f3af 8000 	nop.w
 8006e7c:	1c42      	adds	r2, r0, #1
 8006e7e:	4606      	mov	r6, r0
 8006e80:	d1d6      	bne.n	8006e30 <_svfiprintf_r+0x174>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	065b      	lsls	r3, r3, #25
 8006e86:	f53f af2d 	bmi.w	8006ce4 <_svfiprintf_r+0x28>
 8006e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e8c:	b01d      	add	sp, #116	; 0x74
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	ab03      	add	r3, sp, #12
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	462a      	mov	r2, r5
 8006e98:	4638      	mov	r0, r7
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <_svfiprintf_r+0x1f8>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	f000 f87d 	bl	8006f9c <_printf_i>
 8006ea2:	e7eb      	b.n	8006e7c <_svfiprintf_r+0x1c0>
 8006ea4:	08008934 	.word	0x08008934
 8006ea8:	0800893a 	.word	0x0800893a
 8006eac:	0800893e 	.word	0x0800893e
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	08006c09 	.word	0x08006c09

08006eb8 <_printf_common>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	4699      	mov	r9, r3
 8006ec0:	688a      	ldr	r2, [r1, #8]
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfb8      	it	lt
 8006eca:	4613      	movlt	r3, r2
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ed8:	b10a      	cbz	r2, 8006ede <_printf_common+0x26>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	6833      	ldrmi	r3, [r6, #0]
 8006ee6:	3302      	addmi	r3, #2
 8006ee8:	6033      	strmi	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d106      	bne.n	8006f00 <_printf_common+0x48>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc2b      	bgt.n	8006f58 <_printf_common+0xa0>
 8006f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f04:	1e13      	subs	r3, r2, #0
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	bf18      	it	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d430      	bmi.n	8006f72 <_printf_common+0xba>
 8006f10:	4649      	mov	r1, r9
 8006f12:	4638      	mov	r0, r7
 8006f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d023      	beq.n	8006f66 <_printf_common+0xae>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	6922      	ldr	r2, [r4, #16]
 8006f22:	f003 0306 	and.w	r3, r3, #6
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	bf14      	ite	ne
 8006f2a:	2500      	movne	r5, #0
 8006f2c:	6833      	ldreq	r3, [r6, #0]
 8006f2e:	f04f 0600 	mov.w	r6, #0
 8006f32:	bf08      	it	eq
 8006f34:	68e5      	ldreq	r5, [r4, #12]
 8006f36:	f104 041a 	add.w	r4, r4, #26
 8006f3a:	bf08      	it	eq
 8006f3c:	1aed      	subeq	r5, r5, r3
 8006f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f42:	bf08      	it	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	bfc4      	itt	gt
 8006f4c:	1a9b      	subgt	r3, r3, r2
 8006f4e:	18ed      	addgt	r5, r5, r3
 8006f50:	42b5      	cmp	r5, r6
 8006f52:	d11a      	bne.n	8006f8a <_printf_common+0xd2>
 8006f54:	2000      	movs	r0, #0
 8006f56:	e008      	b.n	8006f6a <_printf_common+0xb2>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c0      	blx	r8
 8006f62:	3001      	adds	r0, #1
 8006f64:	d103      	bne.n	8006f6e <_printf_common+0xb6>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	3501      	adds	r5, #1
 8006f70:	e7c1      	b.n	8006ef6 <_printf_common+0x3e>
 8006f72:	2030      	movs	r0, #48	; 0x30
 8006f74:	18e1      	adds	r1, r4, r3
 8006f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f80:	4422      	add	r2, r4
 8006f82:	3302      	adds	r3, #2
 8006f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f88:	e7c2      	b.n	8006f10 <_printf_common+0x58>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4649      	mov	r1, r9
 8006f90:	4638      	mov	r0, r7
 8006f92:	47c0      	blx	r8
 8006f94:	3001      	adds	r0, #1
 8006f96:	d0e6      	beq.n	8006f66 <_printf_common+0xae>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7d9      	b.n	8006f50 <_printf_common+0x98>

08006f9c <_printf_i>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	7e0f      	ldrb	r7, [r1, #24]
 8006fa2:	4691      	mov	r9, r2
 8006fa4:	2f78      	cmp	r7, #120	; 0x78
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	469a      	mov	sl, r3
 8006fac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fb2:	d807      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fb4:	2f62      	cmp	r7, #98	; 0x62
 8006fb6:	d80a      	bhi.n	8006fce <_printf_i+0x32>
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	f000 80d5 	beq.w	8007168 <_printf_i+0x1cc>
 8006fbe:	2f58      	cmp	r7, #88	; 0x58
 8006fc0:	f000 80c1 	beq.w	8007146 <_printf_i+0x1aa>
 8006fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fcc:	e03a      	b.n	8007044 <_printf_i+0xa8>
 8006fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fd2:	2b15      	cmp	r3, #21
 8006fd4:	d8f6      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fd6:	a101      	add	r1, pc, #4	; (adr r1, 8006fdc <_printf_i+0x40>)
 8006fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007049 	.word	0x08007049
 8006fe4:	08006fc5 	.word	0x08006fc5
 8006fe8:	08006fc5 	.word	0x08006fc5
 8006fec:	08006fc5 	.word	0x08006fc5
 8006ff0:	08006fc5 	.word	0x08006fc5
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08006fc5 	.word	0x08006fc5
 8006ffc:	08006fc5 	.word	0x08006fc5
 8007000:	08006fc5 	.word	0x08006fc5
 8007004:	08006fc5 	.word	0x08006fc5
 8007008:	0800714f 	.word	0x0800714f
 800700c:	08007075 	.word	0x08007075
 8007010:	08007109 	.word	0x08007109
 8007014:	08006fc5 	.word	0x08006fc5
 8007018:	08006fc5 	.word	0x08006fc5
 800701c:	08007171 	.word	0x08007171
 8007020:	08006fc5 	.word	0x08006fc5
 8007024:	08007075 	.word	0x08007075
 8007028:	08006fc5 	.word	0x08006fc5
 800702c:	08006fc5 	.word	0x08006fc5
 8007030:	08007111 	.word	0x08007111
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007044:	2301      	movs	r3, #1
 8007046:	e0a0      	b.n	800718a <_printf_i+0x1ee>
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	682b      	ldr	r3, [r5, #0]
 800704c:	0607      	lsls	r7, r0, #24
 800704e:	f103 0104 	add.w	r1, r3, #4
 8007052:	6029      	str	r1, [r5, #0]
 8007054:	d501      	bpl.n	800705a <_printf_i+0xbe>
 8007056:	681e      	ldr	r6, [r3, #0]
 8007058:	e003      	b.n	8007062 <_printf_i+0xc6>
 800705a:	0646      	lsls	r6, r0, #25
 800705c:	d5fb      	bpl.n	8007056 <_printf_i+0xba>
 800705e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007062:	2e00      	cmp	r6, #0
 8007064:	da03      	bge.n	800706e <_printf_i+0xd2>
 8007066:	232d      	movs	r3, #45	; 0x2d
 8007068:	4276      	negs	r6, r6
 800706a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800706e:	230a      	movs	r3, #10
 8007070:	4859      	ldr	r0, [pc, #356]	; (80071d8 <_printf_i+0x23c>)
 8007072:	e012      	b.n	800709a <_printf_i+0xfe>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	6820      	ldr	r0, [r4, #0]
 8007078:	1d19      	adds	r1, r3, #4
 800707a:	6029      	str	r1, [r5, #0]
 800707c:	0605      	lsls	r5, r0, #24
 800707e:	d501      	bpl.n	8007084 <_printf_i+0xe8>
 8007080:	681e      	ldr	r6, [r3, #0]
 8007082:	e002      	b.n	800708a <_printf_i+0xee>
 8007084:	0641      	lsls	r1, r0, #25
 8007086:	d5fb      	bpl.n	8007080 <_printf_i+0xe4>
 8007088:	881e      	ldrh	r6, [r3, #0]
 800708a:	2f6f      	cmp	r7, #111	; 0x6f
 800708c:	bf0c      	ite	eq
 800708e:	2308      	moveq	r3, #8
 8007090:	230a      	movne	r3, #10
 8007092:	4851      	ldr	r0, [pc, #324]	; (80071d8 <_printf_i+0x23c>)
 8007094:	2100      	movs	r1, #0
 8007096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800709a:	6865      	ldr	r5, [r4, #4]
 800709c:	2d00      	cmp	r5, #0
 800709e:	bfa8      	it	ge
 80070a0:	6821      	ldrge	r1, [r4, #0]
 80070a2:	60a5      	str	r5, [r4, #8]
 80070a4:	bfa4      	itt	ge
 80070a6:	f021 0104 	bicge.w	r1, r1, #4
 80070aa:	6021      	strge	r1, [r4, #0]
 80070ac:	b90e      	cbnz	r6, 80070b2 <_printf_i+0x116>
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	d04b      	beq.n	800714a <_printf_i+0x1ae>
 80070b2:	4615      	mov	r5, r2
 80070b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80070b8:	fb03 6711 	mls	r7, r3, r1, r6
 80070bc:	5dc7      	ldrb	r7, [r0, r7]
 80070be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070c2:	4637      	mov	r7, r6
 80070c4:	42bb      	cmp	r3, r7
 80070c6:	460e      	mov	r6, r1
 80070c8:	d9f4      	bls.n	80070b4 <_printf_i+0x118>
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d10b      	bne.n	80070e6 <_printf_i+0x14a>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	07de      	lsls	r6, r3, #31
 80070d2:	d508      	bpl.n	80070e6 <_printf_i+0x14a>
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	6861      	ldr	r1, [r4, #4]
 80070d8:	4299      	cmp	r1, r3
 80070da:	bfde      	ittt	le
 80070dc:	2330      	movle	r3, #48	; 0x30
 80070de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070e6:	1b52      	subs	r2, r2, r5
 80070e8:	6122      	str	r2, [r4, #16]
 80070ea:	464b      	mov	r3, r9
 80070ec:	4621      	mov	r1, r4
 80070ee:	4640      	mov	r0, r8
 80070f0:	f8cd a000 	str.w	sl, [sp]
 80070f4:	aa03      	add	r2, sp, #12
 80070f6:	f7ff fedf 	bl	8006eb8 <_printf_common>
 80070fa:	3001      	adds	r0, #1
 80070fc:	d14a      	bne.n	8007194 <_printf_i+0x1f8>
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	b004      	add	sp, #16
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	f043 0320 	orr.w	r3, r3, #32
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	2778      	movs	r7, #120	; 0x78
 8007112:	4832      	ldr	r0, [pc, #200]	; (80071dc <_printf_i+0x240>)
 8007114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	6829      	ldr	r1, [r5, #0]
 800711c:	061f      	lsls	r7, r3, #24
 800711e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007122:	d402      	bmi.n	800712a <_printf_i+0x18e>
 8007124:	065f      	lsls	r7, r3, #25
 8007126:	bf48      	it	mi
 8007128:	b2b6      	uxthmi	r6, r6
 800712a:	07df      	lsls	r7, r3, #31
 800712c:	bf48      	it	mi
 800712e:	f043 0320 	orrmi.w	r3, r3, #32
 8007132:	6029      	str	r1, [r5, #0]
 8007134:	bf48      	it	mi
 8007136:	6023      	strmi	r3, [r4, #0]
 8007138:	b91e      	cbnz	r6, 8007142 <_printf_i+0x1a6>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	f023 0320 	bic.w	r3, r3, #32
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	2310      	movs	r3, #16
 8007144:	e7a6      	b.n	8007094 <_printf_i+0xf8>
 8007146:	4824      	ldr	r0, [pc, #144]	; (80071d8 <_printf_i+0x23c>)
 8007148:	e7e4      	b.n	8007114 <_printf_i+0x178>
 800714a:	4615      	mov	r5, r2
 800714c:	e7bd      	b.n	80070ca <_printf_i+0x12e>
 800714e:	682b      	ldr	r3, [r5, #0]
 8007150:	6826      	ldr	r6, [r4, #0]
 8007152:	1d18      	adds	r0, r3, #4
 8007154:	6961      	ldr	r1, [r4, #20]
 8007156:	6028      	str	r0, [r5, #0]
 8007158:	0635      	lsls	r5, r6, #24
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	d501      	bpl.n	8007162 <_printf_i+0x1c6>
 800715e:	6019      	str	r1, [r3, #0]
 8007160:	e002      	b.n	8007168 <_printf_i+0x1cc>
 8007162:	0670      	lsls	r0, r6, #25
 8007164:	d5fb      	bpl.n	800715e <_printf_i+0x1c2>
 8007166:	8019      	strh	r1, [r3, #0]
 8007168:	2300      	movs	r3, #0
 800716a:	4615      	mov	r5, r2
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	e7bc      	b.n	80070ea <_printf_i+0x14e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	2100      	movs	r1, #0
 8007174:	1d1a      	adds	r2, r3, #4
 8007176:	602a      	str	r2, [r5, #0]
 8007178:	681d      	ldr	r5, [r3, #0]
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f859 	bl	8007234 <memchr>
 8007182:	b108      	cbz	r0, 8007188 <_printf_i+0x1ec>
 8007184:	1b40      	subs	r0, r0, r5
 8007186:	6060      	str	r0, [r4, #4]
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	2300      	movs	r3, #0
 800718e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007192:	e7aa      	b.n	80070ea <_printf_i+0x14e>
 8007194:	462a      	mov	r2, r5
 8007196:	4649      	mov	r1, r9
 8007198:	4640      	mov	r0, r8
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	47d0      	blx	sl
 800719e:	3001      	adds	r0, #1
 80071a0:	d0ad      	beq.n	80070fe <_printf_i+0x162>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	079b      	lsls	r3, r3, #30
 80071a6:	d413      	bmi.n	80071d0 <_printf_i+0x234>
 80071a8:	68e0      	ldr	r0, [r4, #12]
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	4298      	cmp	r0, r3
 80071ae:	bfb8      	it	lt
 80071b0:	4618      	movlt	r0, r3
 80071b2:	e7a6      	b.n	8007102 <_printf_i+0x166>
 80071b4:	2301      	movs	r3, #1
 80071b6:	4632      	mov	r2, r6
 80071b8:	4649      	mov	r1, r9
 80071ba:	4640      	mov	r0, r8
 80071bc:	47d0      	blx	sl
 80071be:	3001      	adds	r0, #1
 80071c0:	d09d      	beq.n	80070fe <_printf_i+0x162>
 80071c2:	3501      	adds	r5, #1
 80071c4:	68e3      	ldr	r3, [r4, #12]
 80071c6:	9903      	ldr	r1, [sp, #12]
 80071c8:	1a5b      	subs	r3, r3, r1
 80071ca:	42ab      	cmp	r3, r5
 80071cc:	dcf2      	bgt.n	80071b4 <_printf_i+0x218>
 80071ce:	e7eb      	b.n	80071a8 <_printf_i+0x20c>
 80071d0:	2500      	movs	r5, #0
 80071d2:	f104 0619 	add.w	r6, r4, #25
 80071d6:	e7f5      	b.n	80071c4 <_printf_i+0x228>
 80071d8:	08008945 	.word	0x08008945
 80071dc:	08008956 	.word	0x08008956

080071e0 <memmove>:
 80071e0:	4288      	cmp	r0, r1
 80071e2:	b510      	push	{r4, lr}
 80071e4:	eb01 0402 	add.w	r4, r1, r2
 80071e8:	d902      	bls.n	80071f0 <memmove+0x10>
 80071ea:	4284      	cmp	r4, r0
 80071ec:	4623      	mov	r3, r4
 80071ee:	d807      	bhi.n	8007200 <memmove+0x20>
 80071f0:	1e43      	subs	r3, r0, #1
 80071f2:	42a1      	cmp	r1, r4
 80071f4:	d008      	beq.n	8007208 <memmove+0x28>
 80071f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071fe:	e7f8      	b.n	80071f2 <memmove+0x12>
 8007200:	4601      	mov	r1, r0
 8007202:	4402      	add	r2, r0
 8007204:	428a      	cmp	r2, r1
 8007206:	d100      	bne.n	800720a <memmove+0x2a>
 8007208:	bd10      	pop	{r4, pc}
 800720a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800720e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007212:	e7f7      	b.n	8007204 <memmove+0x24>

08007214 <_sbrk_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	2300      	movs	r3, #0
 8007218:	4d05      	ldr	r5, [pc, #20]	; (8007230 <_sbrk_r+0x1c>)
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7fa fe3e 	bl	8001ea0 <_sbrk>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_sbrk_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_sbrk_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	200008d8 	.word	0x200008d8

08007234 <memchr>:
 8007234:	4603      	mov	r3, r0
 8007236:	b510      	push	{r4, lr}
 8007238:	b2c9      	uxtb	r1, r1
 800723a:	4402      	add	r2, r0
 800723c:	4293      	cmp	r3, r2
 800723e:	4618      	mov	r0, r3
 8007240:	d101      	bne.n	8007246 <memchr+0x12>
 8007242:	2000      	movs	r0, #0
 8007244:	e003      	b.n	800724e <memchr+0x1a>
 8007246:	7804      	ldrb	r4, [r0, #0]
 8007248:	3301      	adds	r3, #1
 800724a:	428c      	cmp	r4, r1
 800724c:	d1f6      	bne.n	800723c <memchr+0x8>
 800724e:	bd10      	pop	{r4, pc}

08007250 <memcpy>:
 8007250:	440a      	add	r2, r1
 8007252:	4291      	cmp	r1, r2
 8007254:	f100 33ff 	add.w	r3, r0, #4294967295
 8007258:	d100      	bne.n	800725c <memcpy+0xc>
 800725a:	4770      	bx	lr
 800725c:	b510      	push	{r4, lr}
 800725e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007262:	4291      	cmp	r1, r2
 8007264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007268:	d1f9      	bne.n	800725e <memcpy+0xe>
 800726a:	bd10      	pop	{r4, pc}

0800726c <_realloc_r>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	4680      	mov	r8, r0
 8007272:	4614      	mov	r4, r2
 8007274:	460e      	mov	r6, r1
 8007276:	b921      	cbnz	r1, 8007282 <_realloc_r+0x16>
 8007278:	4611      	mov	r1, r2
 800727a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	f7ff bc37 	b.w	8006af0 <_malloc_r>
 8007282:	b92a      	cbnz	r2, 8007290 <_realloc_r+0x24>
 8007284:	f7ff fbcc 	bl	8006a20 <_free_r>
 8007288:	4625      	mov	r5, r4
 800728a:	4628      	mov	r0, r5
 800728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007290:	f000 f81b 	bl	80072ca <_malloc_usable_size_r>
 8007294:	4284      	cmp	r4, r0
 8007296:	4607      	mov	r7, r0
 8007298:	d802      	bhi.n	80072a0 <_realloc_r+0x34>
 800729a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800729e:	d812      	bhi.n	80072c6 <_realloc_r+0x5a>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4640      	mov	r0, r8
 80072a4:	f7ff fc24 	bl	8006af0 <_malloc_r>
 80072a8:	4605      	mov	r5, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d0ed      	beq.n	800728a <_realloc_r+0x1e>
 80072ae:	42bc      	cmp	r4, r7
 80072b0:	4622      	mov	r2, r4
 80072b2:	4631      	mov	r1, r6
 80072b4:	bf28      	it	cs
 80072b6:	463a      	movcs	r2, r7
 80072b8:	f7ff ffca 	bl	8007250 <memcpy>
 80072bc:	4631      	mov	r1, r6
 80072be:	4640      	mov	r0, r8
 80072c0:	f7ff fbae 	bl	8006a20 <_free_r>
 80072c4:	e7e1      	b.n	800728a <_realloc_r+0x1e>
 80072c6:	4635      	mov	r5, r6
 80072c8:	e7df      	b.n	800728a <_realloc_r+0x1e>

080072ca <_malloc_usable_size_r>:
 80072ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ce:	1f18      	subs	r0, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfbc      	itt	lt
 80072d4:	580b      	ldrlt	r3, [r1, r0]
 80072d6:	18c0      	addlt	r0, r0, r3
 80072d8:	4770      	bx	lr
	...

080072dc <pow>:
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	4614      	mov	r4, r2
 80072e2:	461d      	mov	r5, r3
 80072e4:	4680      	mov	r8, r0
 80072e6:	4689      	mov	r9, r1
 80072e8:	f000 f866 	bl	80073b8 <__ieee754_pow>
 80072ec:	4622      	mov	r2, r4
 80072ee:	4606      	mov	r6, r0
 80072f0:	460f      	mov	r7, r1
 80072f2:	462b      	mov	r3, r5
 80072f4:	4620      	mov	r0, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	f7f9 fb88 	bl	8000a0c <__aeabi_dcmpun>
 80072fc:	bbc8      	cbnz	r0, 8007372 <pow+0x96>
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	4640      	mov	r0, r8
 8007304:	4649      	mov	r1, r9
 8007306:	f7f9 fb4f 	bl	80009a8 <__aeabi_dcmpeq>
 800730a:	b1b8      	cbz	r0, 800733c <pow+0x60>
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	4620      	mov	r0, r4
 8007312:	4629      	mov	r1, r5
 8007314:	f7f9 fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8007318:	2800      	cmp	r0, #0
 800731a:	d141      	bne.n	80073a0 <pow+0xc4>
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f000 f844 	bl	80073ac <finite>
 8007324:	b328      	cbz	r0, 8007372 <pow+0x96>
 8007326:	2200      	movs	r2, #0
 8007328:	2300      	movs	r3, #0
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f9 fb45 	bl	80009bc <__aeabi_dcmplt>
 8007332:	b1f0      	cbz	r0, 8007372 <pow+0x96>
 8007334:	f7ff fb48 	bl	80069c8 <__errno>
 8007338:	2322      	movs	r3, #34	; 0x22
 800733a:	e019      	b.n	8007370 <pow+0x94>
 800733c:	4630      	mov	r0, r6
 800733e:	4639      	mov	r1, r7
 8007340:	f000 f834 	bl	80073ac <finite>
 8007344:	b9c8      	cbnz	r0, 800737a <pow+0x9e>
 8007346:	4640      	mov	r0, r8
 8007348:	4649      	mov	r1, r9
 800734a:	f000 f82f 	bl	80073ac <finite>
 800734e:	b1a0      	cbz	r0, 800737a <pow+0x9e>
 8007350:	4620      	mov	r0, r4
 8007352:	4629      	mov	r1, r5
 8007354:	f000 f82a 	bl	80073ac <finite>
 8007358:	b178      	cbz	r0, 800737a <pow+0x9e>
 800735a:	4632      	mov	r2, r6
 800735c:	463b      	mov	r3, r7
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f9 fb53 	bl	8000a0c <__aeabi_dcmpun>
 8007366:	2800      	cmp	r0, #0
 8007368:	d0e4      	beq.n	8007334 <pow+0x58>
 800736a:	f7ff fb2d 	bl	80069c8 <__errno>
 800736e:	2321      	movs	r3, #33	; 0x21
 8007370:	6003      	str	r3, [r0, #0]
 8007372:	4630      	mov	r0, r6
 8007374:	4639      	mov	r1, r7
 8007376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737a:	2200      	movs	r2, #0
 800737c:	2300      	movs	r3, #0
 800737e:	4630      	mov	r0, r6
 8007380:	4639      	mov	r1, r7
 8007382:	f7f9 fb11 	bl	80009a8 <__aeabi_dcmpeq>
 8007386:	2800      	cmp	r0, #0
 8007388:	d0f3      	beq.n	8007372 <pow+0x96>
 800738a:	4640      	mov	r0, r8
 800738c:	4649      	mov	r1, r9
 800738e:	f000 f80d 	bl	80073ac <finite>
 8007392:	2800      	cmp	r0, #0
 8007394:	d0ed      	beq.n	8007372 <pow+0x96>
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f000 f807 	bl	80073ac <finite>
 800739e:	e7c8      	b.n	8007332 <pow+0x56>
 80073a0:	2600      	movs	r6, #0
 80073a2:	4f01      	ldr	r7, [pc, #4]	; (80073a8 <pow+0xcc>)
 80073a4:	e7e5      	b.n	8007372 <pow+0x96>
 80073a6:	bf00      	nop
 80073a8:	3ff00000 	.word	0x3ff00000

080073ac <finite>:
 80073ac:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80073b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80073b4:	0fc0      	lsrs	r0, r0, #31
 80073b6:	4770      	bx	lr

080073b8 <__ieee754_pow>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	b093      	sub	sp, #76	; 0x4c
 80073be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073c2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80073c6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80073ca:	4689      	mov	r9, r1
 80073cc:	ea56 0102 	orrs.w	r1, r6, r2
 80073d0:	4680      	mov	r8, r0
 80073d2:	d111      	bne.n	80073f8 <__ieee754_pow+0x40>
 80073d4:	1803      	adds	r3, r0, r0
 80073d6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80073da:	4152      	adcs	r2, r2
 80073dc:	4299      	cmp	r1, r3
 80073de:	4b82      	ldr	r3, [pc, #520]	; (80075e8 <__ieee754_pow+0x230>)
 80073e0:	4193      	sbcs	r3, r2
 80073e2:	f080 84ba 	bcs.w	8007d5a <__ieee754_pow+0x9a2>
 80073e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ea:	4640      	mov	r0, r8
 80073ec:	4649      	mov	r1, r9
 80073ee:	f7f8 febd 	bl	800016c <__adddf3>
 80073f2:	4683      	mov	fp, r0
 80073f4:	468c      	mov	ip, r1
 80073f6:	e06f      	b.n	80074d8 <__ieee754_pow+0x120>
 80073f8:	4b7c      	ldr	r3, [pc, #496]	; (80075ec <__ieee754_pow+0x234>)
 80073fa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80073fe:	429c      	cmp	r4, r3
 8007400:	464d      	mov	r5, r9
 8007402:	4682      	mov	sl, r0
 8007404:	dc06      	bgt.n	8007414 <__ieee754_pow+0x5c>
 8007406:	d101      	bne.n	800740c <__ieee754_pow+0x54>
 8007408:	2800      	cmp	r0, #0
 800740a:	d1ec      	bne.n	80073e6 <__ieee754_pow+0x2e>
 800740c:	429e      	cmp	r6, r3
 800740e:	dc01      	bgt.n	8007414 <__ieee754_pow+0x5c>
 8007410:	d10f      	bne.n	8007432 <__ieee754_pow+0x7a>
 8007412:	b172      	cbz	r2, 8007432 <__ieee754_pow+0x7a>
 8007414:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007418:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800741c:	ea55 050a 	orrs.w	r5, r5, sl
 8007420:	d1e1      	bne.n	80073e6 <__ieee754_pow+0x2e>
 8007422:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007426:	18db      	adds	r3, r3, r3
 8007428:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800742c:	4152      	adcs	r2, r2
 800742e:	429d      	cmp	r5, r3
 8007430:	e7d5      	b.n	80073de <__ieee754_pow+0x26>
 8007432:	2d00      	cmp	r5, #0
 8007434:	da39      	bge.n	80074aa <__ieee754_pow+0xf2>
 8007436:	4b6e      	ldr	r3, [pc, #440]	; (80075f0 <__ieee754_pow+0x238>)
 8007438:	429e      	cmp	r6, r3
 800743a:	dc52      	bgt.n	80074e2 <__ieee754_pow+0x12a>
 800743c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007440:	429e      	cmp	r6, r3
 8007442:	f340 849d 	ble.w	8007d80 <__ieee754_pow+0x9c8>
 8007446:	1533      	asrs	r3, r6, #20
 8007448:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800744c:	2b14      	cmp	r3, #20
 800744e:	dd0f      	ble.n	8007470 <__ieee754_pow+0xb8>
 8007450:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007454:	fa22 f103 	lsr.w	r1, r2, r3
 8007458:	fa01 f303 	lsl.w	r3, r1, r3
 800745c:	4293      	cmp	r3, r2
 800745e:	f040 848f 	bne.w	8007d80 <__ieee754_pow+0x9c8>
 8007462:	f001 0101 	and.w	r1, r1, #1
 8007466:	f1c1 0302 	rsb	r3, r1, #2
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	b182      	cbz	r2, 8007490 <__ieee754_pow+0xd8>
 800746e:	e05d      	b.n	800752c <__ieee754_pow+0x174>
 8007470:	2a00      	cmp	r2, #0
 8007472:	d159      	bne.n	8007528 <__ieee754_pow+0x170>
 8007474:	f1c3 0314 	rsb	r3, r3, #20
 8007478:	fa46 f103 	asr.w	r1, r6, r3
 800747c:	fa01 f303 	lsl.w	r3, r1, r3
 8007480:	42b3      	cmp	r3, r6
 8007482:	f040 847a 	bne.w	8007d7a <__ieee754_pow+0x9c2>
 8007486:	f001 0101 	and.w	r1, r1, #1
 800748a:	f1c1 0302 	rsb	r3, r1, #2
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	4b58      	ldr	r3, [pc, #352]	; (80075f4 <__ieee754_pow+0x23c>)
 8007492:	429e      	cmp	r6, r3
 8007494:	d132      	bne.n	80074fc <__ieee754_pow+0x144>
 8007496:	2f00      	cmp	r7, #0
 8007498:	f280 846b 	bge.w	8007d72 <__ieee754_pow+0x9ba>
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	2000      	movs	r0, #0
 80074a2:	4954      	ldr	r1, [pc, #336]	; (80075f4 <__ieee754_pow+0x23c>)
 80074a4:	f7f9 f942 	bl	800072c <__aeabi_ddiv>
 80074a8:	e7a3      	b.n	80073f2 <__ieee754_pow+0x3a>
 80074aa:	2300      	movs	r3, #0
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	d13c      	bne.n	800752c <__ieee754_pow+0x174>
 80074b2:	4b4e      	ldr	r3, [pc, #312]	; (80075ec <__ieee754_pow+0x234>)
 80074b4:	429e      	cmp	r6, r3
 80074b6:	d1eb      	bne.n	8007490 <__ieee754_pow+0xd8>
 80074b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80074bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80074c0:	ea53 030a 	orrs.w	r3, r3, sl
 80074c4:	f000 8449 	beq.w	8007d5a <__ieee754_pow+0x9a2>
 80074c8:	4b4b      	ldr	r3, [pc, #300]	; (80075f8 <__ieee754_pow+0x240>)
 80074ca:	429c      	cmp	r4, r3
 80074cc:	dd0b      	ble.n	80074e6 <__ieee754_pow+0x12e>
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	f2c0 8449 	blt.w	8007d66 <__ieee754_pow+0x9ae>
 80074d4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80074d8:	4658      	mov	r0, fp
 80074da:	4661      	mov	r1, ip
 80074dc:	b013      	add	sp, #76	; 0x4c
 80074de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e2:	2302      	movs	r3, #2
 80074e4:	e7e2      	b.n	80074ac <__ieee754_pow+0xf4>
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	f04f 0b00 	mov.w	fp, #0
 80074ec:	f04f 0c00 	mov.w	ip, #0
 80074f0:	daf2      	bge.n	80074d8 <__ieee754_pow+0x120>
 80074f2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80074f6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80074fa:	e7ed      	b.n	80074d8 <__ieee754_pow+0x120>
 80074fc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007500:	d106      	bne.n	8007510 <__ieee754_pow+0x158>
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	4640      	mov	r0, r8
 8007508:	4649      	mov	r1, r9
 800750a:	f7f8 ffe5 	bl	80004d8 <__aeabi_dmul>
 800750e:	e770      	b.n	80073f2 <__ieee754_pow+0x3a>
 8007510:	4b3a      	ldr	r3, [pc, #232]	; (80075fc <__ieee754_pow+0x244>)
 8007512:	429f      	cmp	r7, r3
 8007514:	d10a      	bne.n	800752c <__ieee754_pow+0x174>
 8007516:	2d00      	cmp	r5, #0
 8007518:	db08      	blt.n	800752c <__ieee754_pow+0x174>
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	b013      	add	sp, #76	; 0x4c
 8007520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	f000 bd0a 	b.w	8007f3c <__ieee754_sqrt>
 8007528:	2300      	movs	r3, #0
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f000 fc58 	bl	8007de4 <fabs>
 8007534:	4683      	mov	fp, r0
 8007536:	468c      	mov	ip, r1
 8007538:	f1ba 0f00 	cmp.w	sl, #0
 800753c:	d128      	bne.n	8007590 <__ieee754_pow+0x1d8>
 800753e:	b124      	cbz	r4, 800754a <__ieee754_pow+0x192>
 8007540:	4b2c      	ldr	r3, [pc, #176]	; (80075f4 <__ieee754_pow+0x23c>)
 8007542:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007546:	429a      	cmp	r2, r3
 8007548:	d122      	bne.n	8007590 <__ieee754_pow+0x1d8>
 800754a:	2f00      	cmp	r7, #0
 800754c:	da07      	bge.n	800755e <__ieee754_pow+0x1a6>
 800754e:	465a      	mov	r2, fp
 8007550:	4663      	mov	r3, ip
 8007552:	2000      	movs	r0, #0
 8007554:	4927      	ldr	r1, [pc, #156]	; (80075f4 <__ieee754_pow+0x23c>)
 8007556:	f7f9 f8e9 	bl	800072c <__aeabi_ddiv>
 800755a:	4683      	mov	fp, r0
 800755c:	468c      	mov	ip, r1
 800755e:	2d00      	cmp	r5, #0
 8007560:	daba      	bge.n	80074d8 <__ieee754_pow+0x120>
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007568:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800756c:	431c      	orrs	r4, r3
 800756e:	d108      	bne.n	8007582 <__ieee754_pow+0x1ca>
 8007570:	465a      	mov	r2, fp
 8007572:	4663      	mov	r3, ip
 8007574:	4658      	mov	r0, fp
 8007576:	4661      	mov	r1, ip
 8007578:	f7f8 fdf6 	bl	8000168 <__aeabi_dsub>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	e790      	b.n	80074a4 <__ieee754_pow+0xec>
 8007582:	9b00      	ldr	r3, [sp, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d1a7      	bne.n	80074d8 <__ieee754_pow+0x120>
 8007588:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800758c:	469c      	mov	ip, r3
 800758e:	e7a3      	b.n	80074d8 <__ieee754_pow+0x120>
 8007590:	0feb      	lsrs	r3, r5, #31
 8007592:	3b01      	subs	r3, #1
 8007594:	930c      	str	r3, [sp, #48]	; 0x30
 8007596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007598:	9b00      	ldr	r3, [sp, #0]
 800759a:	4313      	orrs	r3, r2
 800759c:	d104      	bne.n	80075a8 <__ieee754_pow+0x1f0>
 800759e:	4642      	mov	r2, r8
 80075a0:	464b      	mov	r3, r9
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	e7e7      	b.n	8007578 <__ieee754_pow+0x1c0>
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <__ieee754_pow+0x248>)
 80075aa:	429e      	cmp	r6, r3
 80075ac:	f340 80f6 	ble.w	800779c <__ieee754_pow+0x3e4>
 80075b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80075b4:	429e      	cmp	r6, r3
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <__ieee754_pow+0x240>)
 80075b8:	dd09      	ble.n	80075ce <__ieee754_pow+0x216>
 80075ba:	429c      	cmp	r4, r3
 80075bc:	dc0c      	bgt.n	80075d8 <__ieee754_pow+0x220>
 80075be:	2f00      	cmp	r7, #0
 80075c0:	da0c      	bge.n	80075dc <__ieee754_pow+0x224>
 80075c2:	2000      	movs	r0, #0
 80075c4:	b013      	add	sp, #76	; 0x4c
 80075c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f000 bcb2 	b.w	8007f32 <__math_oflow>
 80075ce:	429c      	cmp	r4, r3
 80075d0:	dbf5      	blt.n	80075be <__ieee754_pow+0x206>
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <__ieee754_pow+0x23c>)
 80075d4:	429c      	cmp	r4, r3
 80075d6:	dd15      	ble.n	8007604 <__ieee754_pow+0x24c>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	dcf2      	bgt.n	80075c2 <__ieee754_pow+0x20a>
 80075dc:	2000      	movs	r0, #0
 80075de:	b013      	add	sp, #76	; 0x4c
 80075e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	f000 bca0 	b.w	8007f28 <__math_uflow>
 80075e8:	fff00000 	.word	0xfff00000
 80075ec:	7ff00000 	.word	0x7ff00000
 80075f0:	433fffff 	.word	0x433fffff
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	3fefffff 	.word	0x3fefffff
 80075fc:	3fe00000 	.word	0x3fe00000
 8007600:	41e00000 	.word	0x41e00000
 8007604:	4661      	mov	r1, ip
 8007606:	2200      	movs	r2, #0
 8007608:	4658      	mov	r0, fp
 800760a:	4b5f      	ldr	r3, [pc, #380]	; (8007788 <__ieee754_pow+0x3d0>)
 800760c:	f7f8 fdac 	bl	8000168 <__aeabi_dsub>
 8007610:	a355      	add	r3, pc, #340	; (adr r3, 8007768 <__ieee754_pow+0x3b0>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	4604      	mov	r4, r0
 8007618:	460d      	mov	r5, r1
 800761a:	f7f8 ff5d 	bl	80004d8 <__aeabi_dmul>
 800761e:	a354      	add	r3, pc, #336	; (adr r3, 8007770 <__ieee754_pow+0x3b8>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	4620      	mov	r0, r4
 800762a:	4629      	mov	r1, r5
 800762c:	f7f8 ff54 	bl	80004d8 <__aeabi_dmul>
 8007630:	2200      	movs	r2, #0
 8007632:	4682      	mov	sl, r0
 8007634:	468b      	mov	fp, r1
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	4b54      	ldr	r3, [pc, #336]	; (800778c <__ieee754_pow+0x3d4>)
 800763c:	f7f8 ff4c 	bl	80004d8 <__aeabi_dmul>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	a14c      	add	r1, pc, #304	; (adr r1, 8007778 <__ieee754_pow+0x3c0>)
 8007646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800764a:	f7f8 fd8d 	bl	8000168 <__aeabi_dsub>
 800764e:	4622      	mov	r2, r4
 8007650:	462b      	mov	r3, r5
 8007652:	f7f8 ff41 	bl	80004d8 <__aeabi_dmul>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	2000      	movs	r0, #0
 800765c:	494c      	ldr	r1, [pc, #304]	; (8007790 <__ieee754_pow+0x3d8>)
 800765e:	f7f8 fd83 	bl	8000168 <__aeabi_dsub>
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	4680      	mov	r8, r0
 8007668:	4689      	mov	r9, r1
 800766a:	4620      	mov	r0, r4
 800766c:	4629      	mov	r1, r5
 800766e:	f7f8 ff33 	bl	80004d8 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4640      	mov	r0, r8
 8007678:	4649      	mov	r1, r9
 800767a:	f7f8 ff2d 	bl	80004d8 <__aeabi_dmul>
 800767e:	a340      	add	r3, pc, #256	; (adr r3, 8007780 <__ieee754_pow+0x3c8>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f8 ff28 	bl	80004d8 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4650      	mov	r0, sl
 800768e:	4659      	mov	r1, fp
 8007690:	f7f8 fd6a 	bl	8000168 <__aeabi_dsub>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4604      	mov	r4, r0
 800769a:	460d      	mov	r5, r1
 800769c:	4630      	mov	r0, r6
 800769e:	4639      	mov	r1, r7
 80076a0:	f7f8 fd64 	bl	800016c <__adddf3>
 80076a4:	2000      	movs	r0, #0
 80076a6:	4632      	mov	r2, r6
 80076a8:	463b      	mov	r3, r7
 80076aa:	4682      	mov	sl, r0
 80076ac:	468b      	mov	fp, r1
 80076ae:	f7f8 fd5b 	bl	8000168 <__aeabi_dsub>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f8 fd55 	bl	8000168 <__aeabi_dsub>
 80076be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076c2:	9b00      	ldr	r3, [sp, #0]
 80076c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076c6:	3b01      	subs	r3, #1
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f04f 0600 	mov.w	r6, #0
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	bf0c      	ite	eq
 80076d4:	4b2f      	ldreq	r3, [pc, #188]	; (8007794 <__ieee754_pow+0x3dc>)
 80076d6:	4b2c      	ldrne	r3, [pc, #176]	; (8007788 <__ieee754_pow+0x3d0>)
 80076d8:	4604      	mov	r4, r0
 80076da:	460d      	mov	r5, r1
 80076dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e0:	e9cd 2300 	strd	r2, r3, [sp]
 80076e4:	4632      	mov	r2, r6
 80076e6:	463b      	mov	r3, r7
 80076e8:	f7f8 fd3e 	bl	8000168 <__aeabi_dsub>
 80076ec:	4652      	mov	r2, sl
 80076ee:	465b      	mov	r3, fp
 80076f0:	f7f8 fef2 	bl	80004d8 <__aeabi_dmul>
 80076f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076f8:	4680      	mov	r8, r0
 80076fa:	4689      	mov	r9, r1
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 feea 	bl	80004d8 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4640      	mov	r0, r8
 800770a:	4649      	mov	r1, r9
 800770c:	f7f8 fd2e 	bl	800016c <__adddf3>
 8007710:	4632      	mov	r2, r6
 8007712:	463b      	mov	r3, r7
 8007714:	4680      	mov	r8, r0
 8007716:	4689      	mov	r9, r1
 8007718:	4650      	mov	r0, sl
 800771a:	4659      	mov	r1, fp
 800771c:	f7f8 fedc 	bl	80004d8 <__aeabi_dmul>
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	460b      	mov	r3, r1
 8007726:	4602      	mov	r2, r0
 8007728:	4649      	mov	r1, r9
 800772a:	4640      	mov	r0, r8
 800772c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007730:	f7f8 fd1c 	bl	800016c <__adddf3>
 8007734:	4b18      	ldr	r3, [pc, #96]	; (8007798 <__ieee754_pow+0x3e0>)
 8007736:	4682      	mov	sl, r0
 8007738:	4299      	cmp	r1, r3
 800773a:	460f      	mov	r7, r1
 800773c:	460e      	mov	r6, r1
 800773e:	f340 82e7 	ble.w	8007d10 <__ieee754_pow+0x958>
 8007742:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007746:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800774a:	4303      	orrs	r3, r0
 800774c:	f000 81e2 	beq.w	8007b14 <__ieee754_pow+0x75c>
 8007750:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	f7f9 f930 	bl	80009bc <__aeabi_dcmplt>
 800775c:	3800      	subs	r0, #0
 800775e:	bf18      	it	ne
 8007760:	2001      	movne	r0, #1
 8007762:	e72f      	b.n	80075c4 <__ieee754_pow+0x20c>
 8007764:	f3af 8000 	nop.w
 8007768:	60000000 	.word	0x60000000
 800776c:	3ff71547 	.word	0x3ff71547
 8007770:	f85ddf44 	.word	0xf85ddf44
 8007774:	3e54ae0b 	.word	0x3e54ae0b
 8007778:	55555555 	.word	0x55555555
 800777c:	3fd55555 	.word	0x3fd55555
 8007780:	652b82fe 	.word	0x652b82fe
 8007784:	3ff71547 	.word	0x3ff71547
 8007788:	3ff00000 	.word	0x3ff00000
 800778c:	3fd00000 	.word	0x3fd00000
 8007790:	3fe00000 	.word	0x3fe00000
 8007794:	bff00000 	.word	0xbff00000
 8007798:	408fffff 	.word	0x408fffff
 800779c:	4bd4      	ldr	r3, [pc, #848]	; (8007af0 <__ieee754_pow+0x738>)
 800779e:	2200      	movs	r2, #0
 80077a0:	402b      	ands	r3, r5
 80077a2:	b943      	cbnz	r3, 80077b6 <__ieee754_pow+0x3fe>
 80077a4:	4658      	mov	r0, fp
 80077a6:	4661      	mov	r1, ip
 80077a8:	4bd2      	ldr	r3, [pc, #840]	; (8007af4 <__ieee754_pow+0x73c>)
 80077aa:	f7f8 fe95 	bl	80004d8 <__aeabi_dmul>
 80077ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80077b2:	4683      	mov	fp, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	1523      	asrs	r3, r4, #20
 80077b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077bc:	4413      	add	r3, r2
 80077be:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c0:	4bcd      	ldr	r3, [pc, #820]	; (8007af8 <__ieee754_pow+0x740>)
 80077c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80077c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80077ca:	429c      	cmp	r4, r3
 80077cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80077d0:	dd08      	ble.n	80077e4 <__ieee754_pow+0x42c>
 80077d2:	4bca      	ldr	r3, [pc, #808]	; (8007afc <__ieee754_pow+0x744>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	f340 8164 	ble.w	8007aa2 <__ieee754_pow+0x6ea>
 80077da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077dc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80077e0:	3301      	adds	r3, #1
 80077e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077e4:	2600      	movs	r6, #0
 80077e6:	00f3      	lsls	r3, r6, #3
 80077e8:	930d      	str	r3, [sp, #52]	; 0x34
 80077ea:	4bc5      	ldr	r3, [pc, #788]	; (8007b00 <__ieee754_pow+0x748>)
 80077ec:	4658      	mov	r0, fp
 80077ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077f6:	4629      	mov	r1, r5
 80077f8:	461a      	mov	r2, r3
 80077fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80077fe:	4623      	mov	r3, r4
 8007800:	f7f8 fcb2 	bl	8000168 <__aeabi_dsub>
 8007804:	46da      	mov	sl, fp
 8007806:	462b      	mov	r3, r5
 8007808:	4652      	mov	r2, sl
 800780a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800780e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007812:	f7f8 fcab 	bl	800016c <__adddf3>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	2000      	movs	r0, #0
 800781c:	49b9      	ldr	r1, [pc, #740]	; (8007b04 <__ieee754_pow+0x74c>)
 800781e:	f7f8 ff85 	bl	800072c <__aeabi_ddiv>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800782a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800782e:	f7f8 fe53 	bl	80004d8 <__aeabi_dmul>
 8007832:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007836:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800783a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800783e:	2300      	movs	r3, #0
 8007840:	2200      	movs	r2, #0
 8007842:	46ab      	mov	fp, r5
 8007844:	106d      	asrs	r5, r5, #1
 8007846:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007850:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007854:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	4614      	mov	r4, r2
 800785e:	461d      	mov	r5, r3
 8007860:	f7f8 fe3a 	bl	80004d8 <__aeabi_dmul>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800786c:	f7f8 fc7c 	bl	8000168 <__aeabi_dsub>
 8007870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fc74 	bl	8000168 <__aeabi_dsub>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4650      	mov	r0, sl
 8007886:	4659      	mov	r1, fp
 8007888:	f7f8 fc6e 	bl	8000168 <__aeabi_dsub>
 800788c:	4642      	mov	r2, r8
 800788e:	464b      	mov	r3, r9
 8007890:	f7f8 fe22 	bl	80004d8 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fc64 	bl	8000168 <__aeabi_dsub>
 80078a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078a4:	f7f8 fe18 	bl	80004d8 <__aeabi_dmul>
 80078a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078ac:	4682      	mov	sl, r0
 80078ae:	468b      	mov	fp, r1
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	f7f8 fe10 	bl	80004d8 <__aeabi_dmul>
 80078b8:	a37b      	add	r3, pc, #492	; (adr r3, 8007aa8 <__ieee754_pow+0x6f0>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	f7f8 fe09 	bl	80004d8 <__aeabi_dmul>
 80078c6:	a37a      	add	r3, pc, #488	; (adr r3, 8007ab0 <__ieee754_pow+0x6f8>)
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	f7f8 fc4e 	bl	800016c <__adddf3>
 80078d0:	4622      	mov	r2, r4
 80078d2:	462b      	mov	r3, r5
 80078d4:	f7f8 fe00 	bl	80004d8 <__aeabi_dmul>
 80078d8:	a377      	add	r3, pc, #476	; (adr r3, 8007ab8 <__ieee754_pow+0x700>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fc45 	bl	800016c <__adddf3>
 80078e2:	4622      	mov	r2, r4
 80078e4:	462b      	mov	r3, r5
 80078e6:	f7f8 fdf7 	bl	80004d8 <__aeabi_dmul>
 80078ea:	a375      	add	r3, pc, #468	; (adr r3, 8007ac0 <__ieee754_pow+0x708>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f7f8 fc3c 	bl	800016c <__adddf3>
 80078f4:	4622      	mov	r2, r4
 80078f6:	462b      	mov	r3, r5
 80078f8:	f7f8 fdee 	bl	80004d8 <__aeabi_dmul>
 80078fc:	a372      	add	r3, pc, #456	; (adr r3, 8007ac8 <__ieee754_pow+0x710>)
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	f7f8 fc33 	bl	800016c <__adddf3>
 8007906:	4622      	mov	r2, r4
 8007908:	462b      	mov	r3, r5
 800790a:	f7f8 fde5 	bl	80004d8 <__aeabi_dmul>
 800790e:	a370      	add	r3, pc, #448	; (adr r3, 8007ad0 <__ieee754_pow+0x718>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fc2a 	bl	800016c <__adddf3>
 8007918:	4622      	mov	r2, r4
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	462b      	mov	r3, r5
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f8 fdd8 	bl	80004d8 <__aeabi_dmul>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f8 fdd2 	bl	80004d8 <__aeabi_dmul>
 8007934:	4604      	mov	r4, r0
 8007936:	460d      	mov	r5, r1
 8007938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	f7f8 fc14 	bl	800016c <__adddf3>
 8007944:	4652      	mov	r2, sl
 8007946:	465b      	mov	r3, fp
 8007948:	f7f8 fdc6 	bl	80004d8 <__aeabi_dmul>
 800794c:	4622      	mov	r2, r4
 800794e:	462b      	mov	r3, r5
 8007950:	f7f8 fc0c 	bl	800016c <__adddf3>
 8007954:	4642      	mov	r2, r8
 8007956:	4606      	mov	r6, r0
 8007958:	460f      	mov	r7, r1
 800795a:	464b      	mov	r3, r9
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f8 fdba 	bl	80004d8 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800796c:	2200      	movs	r2, #0
 800796e:	4b66      	ldr	r3, [pc, #408]	; (8007b08 <__ieee754_pow+0x750>)
 8007970:	f7f8 fbfc 	bl	800016c <__adddf3>
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	f7f8 fbf8 	bl	800016c <__adddf3>
 800797c:	2400      	movs	r4, #0
 800797e:	460d      	mov	r5, r1
 8007980:	4622      	mov	r2, r4
 8007982:	460b      	mov	r3, r1
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	f7f8 fda6 	bl	80004d8 <__aeabi_dmul>
 800798c:	2200      	movs	r2, #0
 800798e:	4680      	mov	r8, r0
 8007990:	4689      	mov	r9, r1
 8007992:	4620      	mov	r0, r4
 8007994:	4629      	mov	r1, r5
 8007996:	4b5c      	ldr	r3, [pc, #368]	; (8007b08 <__ieee754_pow+0x750>)
 8007998:	f7f8 fbe6 	bl	8000168 <__aeabi_dsub>
 800799c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079a0:	f7f8 fbe2 	bl	8000168 <__aeabi_dsub>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fbdc 	bl	8000168 <__aeabi_dsub>
 80079b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079b4:	f7f8 fd90 	bl	80004d8 <__aeabi_dmul>
 80079b8:	4622      	mov	r2, r4
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	462b      	mov	r3, r5
 80079c0:	4650      	mov	r0, sl
 80079c2:	4659      	mov	r1, fp
 80079c4:	f7f8 fd88 	bl	80004d8 <__aeabi_dmul>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4630      	mov	r0, r6
 80079ce:	4639      	mov	r1, r7
 80079d0:	f7f8 fbcc 	bl	800016c <__adddf3>
 80079d4:	2400      	movs	r4, #0
 80079d6:	4606      	mov	r6, r0
 80079d8:	460f      	mov	r7, r1
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fbc3 	bl	800016c <__adddf3>
 80079e6:	a33c      	add	r3, pc, #240	; (adr r3, 8007ad8 <__ieee754_pow+0x720>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	4620      	mov	r0, r4
 80079ee:	460d      	mov	r5, r1
 80079f0:	f7f8 fd72 	bl	80004d8 <__aeabi_dmul>
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fbb2 	bl	8000168 <__aeabi_dsub>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	f7f8 fbac 	bl	8000168 <__aeabi_dsub>
 8007a10:	a333      	add	r3, pc, #204	; (adr r3, 8007ae0 <__ieee754_pow+0x728>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fd5f 	bl	80004d8 <__aeabi_dmul>
 8007a1a:	a333      	add	r3, pc, #204	; (adr r3, 8007ae8 <__ieee754_pow+0x730>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	4606      	mov	r6, r0
 8007a22:	460f      	mov	r7, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fd56 	bl	80004d8 <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 fb9a 	bl	800016c <__adddf3>
 8007a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a3a:	4b34      	ldr	r3, [pc, #208]	; (8007b0c <__ieee754_pow+0x754>)
 8007a3c:	4413      	add	r3, r2
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fb93 	bl	800016c <__adddf3>
 8007a46:	4680      	mov	r8, r0
 8007a48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a4a:	4689      	mov	r9, r1
 8007a4c:	f7f8 fcda 	bl	8000404 <__aeabi_i2d>
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a5a:	4b2d      	ldr	r3, [pc, #180]	; (8007b10 <__ieee754_pow+0x758>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a62:	4642      	mov	r2, r8
 8007a64:	464b      	mov	r3, r9
 8007a66:	f7f8 fb81 	bl	800016c <__adddf3>
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	f7f8 fb7d 	bl	800016c <__adddf3>
 8007a72:	4622      	mov	r2, r4
 8007a74:	462b      	mov	r3, r5
 8007a76:	f7f8 fb79 	bl	800016c <__adddf3>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	462b      	mov	r3, r5
 8007a80:	4682      	mov	sl, r0
 8007a82:	468b      	mov	fp, r1
 8007a84:	f7f8 fb70 	bl	8000168 <__aeabi_dsub>
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	f7f8 fb6c 	bl	8000168 <__aeabi_dsub>
 8007a90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a94:	f7f8 fb68 	bl	8000168 <__aeabi_dsub>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	e60b      	b.n	80076ba <__ieee754_pow+0x302>
 8007aa2:	2601      	movs	r6, #1
 8007aa4:	e69f      	b.n	80077e6 <__ieee754_pow+0x42e>
 8007aa6:	bf00      	nop
 8007aa8:	4a454eef 	.word	0x4a454eef
 8007aac:	3fca7e28 	.word	0x3fca7e28
 8007ab0:	93c9db65 	.word	0x93c9db65
 8007ab4:	3fcd864a 	.word	0x3fcd864a
 8007ab8:	a91d4101 	.word	0xa91d4101
 8007abc:	3fd17460 	.word	0x3fd17460
 8007ac0:	518f264d 	.word	0x518f264d
 8007ac4:	3fd55555 	.word	0x3fd55555
 8007ac8:	db6fabff 	.word	0xdb6fabff
 8007acc:	3fdb6db6 	.word	0x3fdb6db6
 8007ad0:	33333303 	.word	0x33333303
 8007ad4:	3fe33333 	.word	0x3fe33333
 8007ad8:	e0000000 	.word	0xe0000000
 8007adc:	3feec709 	.word	0x3feec709
 8007ae0:	dc3a03fd 	.word	0xdc3a03fd
 8007ae4:	3feec709 	.word	0x3feec709
 8007ae8:	145b01f5 	.word	0x145b01f5
 8007aec:	be3e2fe0 	.word	0xbe3e2fe0
 8007af0:	7ff00000 	.word	0x7ff00000
 8007af4:	43400000 	.word	0x43400000
 8007af8:	0003988e 	.word	0x0003988e
 8007afc:	000bb679 	.word	0x000bb679
 8007b00:	08008968 	.word	0x08008968
 8007b04:	3ff00000 	.word	0x3ff00000
 8007b08:	40080000 	.word	0x40080000
 8007b0c:	08008988 	.word	0x08008988
 8007b10:	08008978 	.word	0x08008978
 8007b14:	a39c      	add	r3, pc, #624	; (adr r3, 8007d88 <__ieee754_pow+0x9d0>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f8 fb25 	bl	800016c <__adddf3>
 8007b22:	4622      	mov	r2, r4
 8007b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b28:	462b      	mov	r3, r5
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f8 fb1b 	bl	8000168 <__aeabi_dsub>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b3a:	f7f8 ff5d 	bl	80009f8 <__aeabi_dcmpgt>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f47f ae06 	bne.w	8007750 <__ieee754_pow+0x398>
 8007b44:	4aa2      	ldr	r2, [pc, #648]	; (8007dd0 <__ieee754_pow+0xa18>)
 8007b46:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	f340 8100 	ble.w	8007d50 <__ieee754_pow+0x998>
 8007b50:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007b54:	151b      	asrs	r3, r3, #20
 8007b56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007b5a:	fa4a fa03 	asr.w	sl, sl, r3
 8007b5e:	44b2      	add	sl, r6
 8007b60:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007b64:	489b      	ldr	r0, [pc, #620]	; (8007dd4 <__ieee754_pow+0xa1c>)
 8007b66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007b6a:	4108      	asrs	r0, r1
 8007b6c:	ea00 030a 	and.w	r3, r0, sl
 8007b70:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007b74:	f1c1 0114 	rsb	r1, r1, #20
 8007b78:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007b7c:	fa4a fa01 	asr.w	sl, sl, r1
 8007b80:	2e00      	cmp	r6, #0
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	bfb8      	it	lt
 8007b8c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007b90:	f7f8 faea 	bl	8000168 <__aeabi_dsub>
 8007b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	4642      	mov	r2, r8
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	f7f8 fae3 	bl	800016c <__adddf3>
 8007ba6:	a37a      	add	r3, pc, #488	; (adr r3, 8007d90 <__ieee754_pow+0x9d8>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	4620      	mov	r0, r4
 8007bae:	460d      	mov	r5, r1
 8007bb0:	f7f8 fc92 	bl	80004d8 <__aeabi_dmul>
 8007bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460f      	mov	r7, r1
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f7f8 fad2 	bl	8000168 <__aeabi_dsub>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	f7f8 facc 	bl	8000168 <__aeabi_dsub>
 8007bd0:	a371      	add	r3, pc, #452	; (adr r3, 8007d98 <__ieee754_pow+0x9e0>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fc7f 	bl	80004d8 <__aeabi_dmul>
 8007bda:	a371      	add	r3, pc, #452	; (adr r3, 8007da0 <__ieee754_pow+0x9e8>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	4680      	mov	r8, r0
 8007be2:	4689      	mov	r9, r1
 8007be4:	4620      	mov	r0, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	f7f8 fc76 	bl	80004d8 <__aeabi_dmul>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	f7f8 faba 	bl	800016c <__adddf3>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 fab2 	bl	800016c <__adddf3>
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4689      	mov	r9, r1
 8007c10:	f7f8 faaa 	bl	8000168 <__aeabi_dsub>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	f7f8 faa4 	bl	8000168 <__aeabi_dsub>
 8007c20:	4642      	mov	r2, r8
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	464b      	mov	r3, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	f7f8 fc54 	bl	80004d8 <__aeabi_dmul>
 8007c30:	a35d      	add	r3, pc, #372	; (adr r3, 8007da8 <__ieee754_pow+0x9f0>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	4604      	mov	r4, r0
 8007c38:	460d      	mov	r5, r1
 8007c3a:	f7f8 fc4d 	bl	80004d8 <__aeabi_dmul>
 8007c3e:	a35c      	add	r3, pc, #368	; (adr r3, 8007db0 <__ieee754_pow+0x9f8>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f7f8 fa90 	bl	8000168 <__aeabi_dsub>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f7f8 fc44 	bl	80004d8 <__aeabi_dmul>
 8007c50:	a359      	add	r3, pc, #356	; (adr r3, 8007db8 <__ieee754_pow+0xa00>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fa89 	bl	800016c <__adddf3>
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	f7f8 fc3b 	bl	80004d8 <__aeabi_dmul>
 8007c62:	a357      	add	r3, pc, #348	; (adr r3, 8007dc0 <__ieee754_pow+0xa08>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fa7e 	bl	8000168 <__aeabi_dsub>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fc32 	bl	80004d8 <__aeabi_dmul>
 8007c74:	a354      	add	r3, pc, #336	; (adr r3, 8007dc8 <__ieee754_pow+0xa10>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fa77 	bl	800016c <__adddf3>
 8007c7e:	4622      	mov	r2, r4
 8007c80:	462b      	mov	r3, r5
 8007c82:	f7f8 fc29 	bl	80004d8 <__aeabi_dmul>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	f7f8 fa6b 	bl	8000168 <__aeabi_dsub>
 8007c92:	4604      	mov	r4, r0
 8007c94:	460d      	mov	r5, r1
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fc1b 	bl	80004d8 <__aeabi_dmul>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fa5a 	bl	8000168 <__aeabi_dsub>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cbc:	f7f8 fd36 	bl	800072c <__aeabi_ddiv>
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 fc04 	bl	80004d8 <__aeabi_dmul>
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	f7f8 fa4a 	bl	800016c <__adddf3>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 fa42 	bl	8000168 <__aeabi_dsub>
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	f7f8 fa3e 	bl	8000168 <__aeabi_dsub>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4939      	ldr	r1, [pc, #228]	; (8007dd8 <__ieee754_pow+0xa20>)
 8007cf4:	f7f8 fa38 	bl	8000168 <__aeabi_dsub>
 8007cf8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007cfc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007d00:	da29      	bge.n	8007d56 <__ieee754_pow+0x99e>
 8007d02:	4652      	mov	r2, sl
 8007d04:	f000 f874 	bl	8007df0 <scalbn>
 8007d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d0c:	f7ff bbfd 	b.w	800750a <__ieee754_pow+0x152>
 8007d10:	4b32      	ldr	r3, [pc, #200]	; (8007ddc <__ieee754_pow+0xa24>)
 8007d12:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007d16:	429f      	cmp	r7, r3
 8007d18:	f77f af14 	ble.w	8007b44 <__ieee754_pow+0x78c>
 8007d1c:	4b30      	ldr	r3, [pc, #192]	; (8007de0 <__ieee754_pow+0xa28>)
 8007d1e:	440b      	add	r3, r1
 8007d20:	4303      	orrs	r3, r0
 8007d22:	d009      	beq.n	8007d38 <__ieee754_pow+0x980>
 8007d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f7f8 fe46 	bl	80009bc <__aeabi_dcmplt>
 8007d30:	3800      	subs	r0, #0
 8007d32:	bf18      	it	ne
 8007d34:	2001      	movne	r0, #1
 8007d36:	e452      	b.n	80075de <__ieee754_pow+0x226>
 8007d38:	4622      	mov	r2, r4
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	f7f8 fa14 	bl	8000168 <__aeabi_dsub>
 8007d40:	4642      	mov	r2, r8
 8007d42:	464b      	mov	r3, r9
 8007d44:	f7f8 fe4e 	bl	80009e4 <__aeabi_dcmpge>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f43f aefb 	beq.w	8007b44 <__ieee754_pow+0x78c>
 8007d4e:	e7e9      	b.n	8007d24 <__ieee754_pow+0x96c>
 8007d50:	f04f 0a00 	mov.w	sl, #0
 8007d54:	e720      	b.n	8007b98 <__ieee754_pow+0x7e0>
 8007d56:	4621      	mov	r1, r4
 8007d58:	e7d6      	b.n	8007d08 <__ieee754_pow+0x950>
 8007d5a:	f04f 0b00 	mov.w	fp, #0
 8007d5e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007dd8 <__ieee754_pow+0xa20>
 8007d62:	f7ff bbb9 	b.w	80074d8 <__ieee754_pow+0x120>
 8007d66:	f04f 0b00 	mov.w	fp, #0
 8007d6a:	f04f 0c00 	mov.w	ip, #0
 8007d6e:	f7ff bbb3 	b.w	80074d8 <__ieee754_pow+0x120>
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f7ff bb3c 	b.w	80073f2 <__ieee754_pow+0x3a>
 8007d7a:	9200      	str	r2, [sp, #0]
 8007d7c:	f7ff bb88 	b.w	8007490 <__ieee754_pow+0xd8>
 8007d80:	2300      	movs	r3, #0
 8007d82:	f7ff bb72 	b.w	800746a <__ieee754_pow+0xb2>
 8007d86:	bf00      	nop
 8007d88:	652b82fe 	.word	0x652b82fe
 8007d8c:	3c971547 	.word	0x3c971547
 8007d90:	00000000 	.word	0x00000000
 8007d94:	3fe62e43 	.word	0x3fe62e43
 8007d98:	fefa39ef 	.word	0xfefa39ef
 8007d9c:	3fe62e42 	.word	0x3fe62e42
 8007da0:	0ca86c39 	.word	0x0ca86c39
 8007da4:	be205c61 	.word	0xbe205c61
 8007da8:	72bea4d0 	.word	0x72bea4d0
 8007dac:	3e663769 	.word	0x3e663769
 8007db0:	c5d26bf1 	.word	0xc5d26bf1
 8007db4:	3ebbbd41 	.word	0x3ebbbd41
 8007db8:	af25de2c 	.word	0xaf25de2c
 8007dbc:	3f11566a 	.word	0x3f11566a
 8007dc0:	16bebd93 	.word	0x16bebd93
 8007dc4:	3f66c16c 	.word	0x3f66c16c
 8007dc8:	5555553e 	.word	0x5555553e
 8007dcc:	3fc55555 	.word	0x3fc55555
 8007dd0:	3fe00000 	.word	0x3fe00000
 8007dd4:	fff00000 	.word	0xfff00000
 8007dd8:	3ff00000 	.word	0x3ff00000
 8007ddc:	4090cbff 	.word	0x4090cbff
 8007de0:	3f6f3400 	.word	0x3f6f3400

08007de4 <fabs>:
 8007de4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007de8:	4619      	mov	r1, r3
 8007dea:	4770      	bx	lr
 8007dec:	0000      	movs	r0, r0
	...

08007df0 <scalbn>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	4616      	mov	r6, r2
 8007df4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	b992      	cbnz	r2, 8007e26 <scalbn+0x36>
 8007e00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e04:	4303      	orrs	r3, r0
 8007e06:	d03c      	beq.n	8007e82 <scalbn+0x92>
 8007e08:	4b31      	ldr	r3, [pc, #196]	; (8007ed0 <scalbn+0xe0>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f7f8 fb64 	bl	80004d8 <__aeabi_dmul>
 8007e10:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <scalbn+0xe4>)
 8007e12:	4604      	mov	r4, r0
 8007e14:	429e      	cmp	r6, r3
 8007e16:	460d      	mov	r5, r1
 8007e18:	da0f      	bge.n	8007e3a <scalbn+0x4a>
 8007e1a:	a329      	add	r3, pc, #164	; (adr r3, 8007ec0 <scalbn+0xd0>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fb5a 	bl	80004d8 <__aeabi_dmul>
 8007e24:	e006      	b.n	8007e34 <scalbn+0x44>
 8007e26:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007e2a:	42ba      	cmp	r2, r7
 8007e2c:	d109      	bne.n	8007e42 <scalbn+0x52>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	f7f8 f99c 	bl	800016c <__adddf3>
 8007e34:	4604      	mov	r4, r0
 8007e36:	460d      	mov	r5, r1
 8007e38:	e023      	b.n	8007e82 <scalbn+0x92>
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e40:	3a36      	subs	r2, #54	; 0x36
 8007e42:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007e46:	428e      	cmp	r6, r1
 8007e48:	dd0e      	ble.n	8007e68 <scalbn+0x78>
 8007e4a:	a31f      	add	r3, pc, #124	; (adr r3, 8007ec8 <scalbn+0xd8>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007e54:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007e58:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007e5c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007e60:	481d      	ldr	r0, [pc, #116]	; (8007ed8 <scalbn+0xe8>)
 8007e62:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007e66:	e7db      	b.n	8007e20 <scalbn+0x30>
 8007e68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e6c:	4432      	add	r2, r6
 8007e6e:	428a      	cmp	r2, r1
 8007e70:	dceb      	bgt.n	8007e4a <scalbn+0x5a>
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	dd08      	ble.n	8007e88 <scalbn+0x98>
 8007e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e7e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e88:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e8c:	da0c      	bge.n	8007ea8 <scalbn+0xb8>
 8007e8e:	a30c      	add	r3, pc, #48	; (adr r3, 8007ec0 <scalbn+0xd0>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007e98:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007e9c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007ea0:	480e      	ldr	r0, [pc, #56]	; (8007edc <scalbn+0xec>)
 8007ea2:	f041 011f 	orr.w	r1, r1, #31
 8007ea6:	e7bb      	b.n	8007e20 <scalbn+0x30>
 8007ea8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007eac:	3236      	adds	r2, #54	; 0x36
 8007eae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007eb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	4629      	mov	r1, r5
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <scalbn+0xf0>)
 8007ebe:	e7af      	b.n	8007e20 <scalbn+0x30>
 8007ec0:	c2f8f359 	.word	0xc2f8f359
 8007ec4:	01a56e1f 	.word	0x01a56e1f
 8007ec8:	8800759c 	.word	0x8800759c
 8007ecc:	7e37e43c 	.word	0x7e37e43c
 8007ed0:	43500000 	.word	0x43500000
 8007ed4:	ffff3cb0 	.word	0xffff3cb0
 8007ed8:	8800759c 	.word	0x8800759c
 8007edc:	c2f8f359 	.word	0xc2f8f359
 8007ee0:	3c900000 	.word	0x3c900000

08007ee4 <with_errno>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	4616      	mov	r6, r2
 8007eec:	f7fe fd6c 	bl	80069c8 <__errno>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	6006      	str	r6, [r0, #0]
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}

08007ef8 <xflow>:
 8007ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007efa:	4615      	mov	r5, r2
 8007efc:	461c      	mov	r4, r3
 8007efe:	b180      	cbz	r0, 8007f22 <xflow+0x2a>
 8007f00:	4610      	mov	r0, r2
 8007f02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f06:	e9cd 0100 	strd	r0, r1, [sp]
 8007f0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4621      	mov	r1, r4
 8007f12:	f7f8 fae1 	bl	80004d8 <__aeabi_dmul>
 8007f16:	2222      	movs	r2, #34	; 0x22
 8007f18:	b003      	add	sp, #12
 8007f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f1e:	f7ff bfe1 	b.w	8007ee4 <with_errno>
 8007f22:	4610      	mov	r0, r2
 8007f24:	4619      	mov	r1, r3
 8007f26:	e7ee      	b.n	8007f06 <xflow+0xe>

08007f28 <__math_uflow>:
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f2e:	f7ff bfe3 	b.w	8007ef8 <xflow>

08007f32 <__math_oflow>:
 8007f32:	2200      	movs	r2, #0
 8007f34:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007f38:	f7ff bfde 	b.w	8007ef8 <xflow>

08007f3c <__ieee754_sqrt>:
 8007f3c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80080e0 <__ieee754_sqrt+0x1a4>
 8007f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	ea3c 0c01 	bics.w	ip, ip, r1
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	460a      	mov	r2, r1
 8007f50:	4604      	mov	r4, r0
 8007f52:	d10e      	bne.n	8007f72 <__ieee754_sqrt+0x36>
 8007f54:	4602      	mov	r2, r0
 8007f56:	f7f8 fabf 	bl	80004d8 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 f903 	bl	800016c <__adddf3>
 8007f66:	4606      	mov	r6, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f72:	2900      	cmp	r1, #0
 8007f74:	dc0d      	bgt.n	8007f92 <__ieee754_sqrt+0x56>
 8007f76:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007f7a:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007f7e:	d0f4      	beq.n	8007f6a <__ieee754_sqrt+0x2e>
 8007f80:	b139      	cbz	r1, 8007f92 <__ieee754_sqrt+0x56>
 8007f82:	4602      	mov	r2, r0
 8007f84:	f7f8 f8f0 	bl	8000168 <__aeabi_dsub>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	f7f8 fbce 	bl	800072c <__aeabi_ddiv>
 8007f90:	e7e9      	b.n	8007f66 <__ieee754_sqrt+0x2a>
 8007f92:	1512      	asrs	r2, r2, #20
 8007f94:	f000 8089 	beq.w	80080aa <__ieee754_sqrt+0x16e>
 8007f98:	2500      	movs	r5, #0
 8007f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f9e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fa6:	07d2      	lsls	r2, r2, #31
 8007fa8:	bf5c      	itt	pl
 8007faa:	005b      	lslpl	r3, r3, #1
 8007fac:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007fb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007fb4:	bf58      	it	pl
 8007fb6:	0064      	lslpl	r4, r4, #1
 8007fb8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007fbc:	0062      	lsls	r2, r4, #1
 8007fbe:	2016      	movs	r0, #22
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007fc6:	1076      	asrs	r6, r6, #1
 8007fc8:	190f      	adds	r7, r1, r4
 8007fca:	429f      	cmp	r7, r3
 8007fcc:	bfde      	ittt	le
 8007fce:	1bdb      	suble	r3, r3, r7
 8007fd0:	1939      	addle	r1, r7, r4
 8007fd2:	192d      	addle	r5, r5, r4
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	3801      	subs	r0, #1
 8007fd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007fdc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007fe0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007fe4:	d1f0      	bne.n	8007fc8 <__ieee754_sqrt+0x8c>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	2720      	movs	r7, #32
 8007fea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007fee:	428b      	cmp	r3, r1
 8007ff0:	eb0c 0e00 	add.w	lr, ip, r0
 8007ff4:	dc02      	bgt.n	8007ffc <__ieee754_sqrt+0xc0>
 8007ff6:	d113      	bne.n	8008020 <__ieee754_sqrt+0xe4>
 8007ff8:	4596      	cmp	lr, r2
 8007ffa:	d811      	bhi.n	8008020 <__ieee754_sqrt+0xe4>
 8007ffc:	f1be 0f00 	cmp.w	lr, #0
 8008000:	eb0e 000c 	add.w	r0, lr, ip
 8008004:	da56      	bge.n	80080b4 <__ieee754_sqrt+0x178>
 8008006:	2800      	cmp	r0, #0
 8008008:	db54      	blt.n	80080b4 <__ieee754_sqrt+0x178>
 800800a:	f101 0801 	add.w	r8, r1, #1
 800800e:	1a5b      	subs	r3, r3, r1
 8008010:	4641      	mov	r1, r8
 8008012:	4596      	cmp	lr, r2
 8008014:	bf88      	it	hi
 8008016:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800801a:	eba2 020e 	sub.w	r2, r2, lr
 800801e:	4464      	add	r4, ip
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	3f01      	subs	r7, #1
 8008024:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008028:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800802c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008030:	d1dd      	bne.n	8007fee <__ieee754_sqrt+0xb2>
 8008032:	4313      	orrs	r3, r2
 8008034:	d01b      	beq.n	800806e <__ieee754_sqrt+0x132>
 8008036:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80080e4 <__ieee754_sqrt+0x1a8>
 800803a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80080e8 <__ieee754_sqrt+0x1ac>
 800803e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008042:	e9db 2300 	ldrd	r2, r3, [fp]
 8008046:	f7f8 f88f 	bl	8000168 <__aeabi_dsub>
 800804a:	e9da 8900 	ldrd	r8, r9, [sl]
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 fcbb 	bl	80009d0 <__aeabi_dcmple>
 800805a:	b140      	cbz	r0, 800806e <__ieee754_sqrt+0x132>
 800805c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008060:	e9db 2300 	ldrd	r2, r3, [fp]
 8008064:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008068:	d126      	bne.n	80080b8 <__ieee754_sqrt+0x17c>
 800806a:	463c      	mov	r4, r7
 800806c:	3501      	adds	r5, #1
 800806e:	106b      	asrs	r3, r5, #1
 8008070:	0864      	lsrs	r4, r4, #1
 8008072:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008076:	07ea      	lsls	r2, r5, #31
 8008078:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800807c:	bf48      	it	mi
 800807e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8008082:	4620      	mov	r0, r4
 8008084:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008088:	e76d      	b.n	8007f66 <__ieee754_sqrt+0x2a>
 800808a:	0ae3      	lsrs	r3, r4, #11
 800808c:	3915      	subs	r1, #21
 800808e:	0564      	lsls	r4, r4, #21
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0fa      	beq.n	800808a <__ieee754_sqrt+0x14e>
 8008094:	02d8      	lsls	r0, r3, #11
 8008096:	d50a      	bpl.n	80080ae <__ieee754_sqrt+0x172>
 8008098:	f1c2 0020 	rsb	r0, r2, #32
 800809c:	fa24 f000 	lsr.w	r0, r4, r0
 80080a0:	1e55      	subs	r5, r2, #1
 80080a2:	4094      	lsls	r4, r2
 80080a4:	4303      	orrs	r3, r0
 80080a6:	1b4a      	subs	r2, r1, r5
 80080a8:	e776      	b.n	8007f98 <__ieee754_sqrt+0x5c>
 80080aa:	4611      	mov	r1, r2
 80080ac:	e7f0      	b.n	8008090 <__ieee754_sqrt+0x154>
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	3201      	adds	r2, #1
 80080b2:	e7ef      	b.n	8008094 <__ieee754_sqrt+0x158>
 80080b4:	4688      	mov	r8, r1
 80080b6:	e7aa      	b.n	800800e <__ieee754_sqrt+0xd2>
 80080b8:	f7f8 f858 	bl	800016c <__adddf3>
 80080bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	f7f8 fc78 	bl	80009bc <__aeabi_dcmplt>
 80080cc:	b120      	cbz	r0, 80080d8 <__ieee754_sqrt+0x19c>
 80080ce:	1ca1      	adds	r1, r4, #2
 80080d0:	bf08      	it	eq
 80080d2:	3501      	addeq	r5, #1
 80080d4:	3402      	adds	r4, #2
 80080d6:	e7ca      	b.n	800806e <__ieee754_sqrt+0x132>
 80080d8:	3401      	adds	r4, #1
 80080da:	f024 0401 	bic.w	r4, r4, #1
 80080de:	e7c6      	b.n	800806e <__ieee754_sqrt+0x132>
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	20000068 	.word	0x20000068
 80080e8:	20000070 	.word	0x20000070

080080ec <_init>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr

080080f8 <_fini>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr

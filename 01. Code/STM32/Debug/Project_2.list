
Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006d78  08006d78  00016d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e60  08006e60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006e60  08006e60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e60  08006e60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000070  08006ed8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08006ed8  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb7c  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e5  00000000  00000000  0002ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acc  00000000  00000000  00032018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019373  00000000  00000000  00032ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113af  00000000  00000000  0004be57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000954e3  00000000  00000000  0005d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004350  00000000  00000000  000f26ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f6a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d5c 	.word	0x08006d5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006d5c 	.word	0x08006d5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2uiz>:
 8000f94:	0042      	lsls	r2, r0, #1
 8000f96:	d20e      	bcs.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30b      	bcc.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d409      	bmi.n	8000fbc <__aeabi_f2uiz+0x28>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr
 8000fbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc0:	d101      	bne.n	8000fc6 <__aeabi_f2uiz+0x32>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_f2uiz+0x38>
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <HAL_UART_RxCpltCallback>:
	uint8_t crc;       // CRC 8 bit dùng để kiểm tra lỗi
	uint8_t endframe;
} LoRaFrame;
LoRaFrame LoRaTx;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_UART_RxCpltCallback+0x70>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12a      	bne.n	800103c <HAL_UART_RxCpltCallback+0x68>
		// Kiểm tra ký tự nhận được
		if(rx_data[0] == ID_ESP){
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d102      	bne.n	8000ff4 <HAL_UART_RxCpltCallback+0x20>
			flat = 1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_RxCpltCallback+0x78>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
		}
		if (rx_data[0] != '\r')  // So sánh ký tự
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b0d      	cmp	r3, #13
 8000ffa:	d00b      	beq.n	8001014 <HAL_UART_RxCpltCallback+0x40>
				{
			buffer[index_buffer++] = rx_data[0];  // Lưu vào buffer
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_RxCpltCallback+0x7c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	b2d1      	uxtb	r1, r2
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_UART_RxCpltCallback+0x7c>)
 8001006:	7011      	strb	r1, [r2, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 800100c:	7819      	ldrb	r1, [r3, #0]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_RxCpltCallback+0x80>)
 8001010:	5499      	strb	r1, [r3, r2]
 8001012:	e00e      	b.n	8001032 <HAL_UART_RxCpltCallback+0x5e>
		} else {
			if(buffer[3] == ID_ESP){
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_UART_RxCpltCallback+0x80>)
 8001016:	78db      	ldrb	r3, [r3, #3]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d102      	bne.n	8001022 <HAL_UART_RxCpltCallback+0x4e>
				flat = 1;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_UART_RxCpltCallback+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
////            uint8_t test = CalculateCRC(&LoRaRx.data,index_buffer - 2);
//			if (LoRaRx.crc == test) {
//				int a = 1;
//			}
			// Xử lý dữ liệu đã nhận, hoặc g�?i hàm xử lý tại đây
			memset(buffer,'\0',sizeof(buffer));
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	2100      	movs	r1, #0
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_UART_RxCpltCallback+0x80>)
 8001028:	f004 fafc 	bl	8005624 <memset>

			index_buffer = 0;  // Reset lại chỉ số buffer để nhận tiếp
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_UART_RxCpltCallback+0x7c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
		}

		// Kích hoạt lại ngắt UART để nhận byte tiếp theo
		HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	4904      	ldr	r1, [pc, #16]	; (8001048 <HAL_UART_RxCpltCallback+0x74>)
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <HAL_UART_RxCpltCallback+0x84>)
 8001038:	f003 fb4b 	bl	80046d2 <HAL_UART_Receive_IT>
	}
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013800 	.word	0x40013800
 8001048:	2000027c 	.word	0x2000027c
 800104c:	20000304 	.word	0x20000304
 8001050:	20000300 	.word	0x20000300
 8001054:	20000280 	.word	0x20000280
 8001058:	2000020c 	.word	0x2000020c

0800105c <LoRa_SendFrame>:

// Hàm gửi khung dữ liệu (chuỗi) qua UART cho LoRa E32
void LoRa_SendFrame(LoRaFrame *data) {
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b0c9      	sub	sp, #292	; 0x124
 8001060:	af04      	add	r7, sp, #16
 8001062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001066:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800106a:	6018      	str	r0, [r3, #0]
//	uint8_t end = sizeof(frame.data) - 1;
//	frame.data[end] = '/0';
//	uint8_t len = strlen(data);
//	frame.crc = CalculateCRC(&frame, len);
	char buf[258];
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id, data->rw,
 800106c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001070:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461d      	mov	r5, r3
 800107a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800107e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	461e      	mov	r6, r3
			data->d_humi, data->d_temp,data->d_ppm,data->d_co);
 8001088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id, data->rw,
 8001094:	461a      	mov	r2, r3
			data->d_humi, data->d_temp,data->d_ppm,data->d_co);
 8001096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800109a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	78db      	ldrb	r3, [r3, #3]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id, data->rw,
 80010a2:	4619      	mov	r1, r3
			data->d_humi, data->d_temp,data->d_ppm,data->d_co);
 80010a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	889b      	ldrh	r3, [r3, #4]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id, data->rw,
 80010b0:	461c      	mov	r4, r3
			data->d_humi, data->d_temp,data->d_ppm,data->d_co);
 80010b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	88db      	ldrh	r3, [r3, #6]
	sprintf(buf, "ID:%u RW:%u HUMI:%u TEMP:%u PPM:%Lu CO:%Lu \n\r", data->id, data->rw,
 80010be:	f107 000c 	add.w	r0, r7, #12
 80010c2:	9303      	str	r3, [sp, #12]
 80010c4:	9402      	str	r4, [sp, #8]
 80010c6:	9101      	str	r1, [sp, #4]
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	462a      	mov	r2, r5
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <LoRa_SendFrame+0x9c>)
 80010d0:	f004 fa88 	bl	80055e4 <siprintf>
	// Gửi khung dữ liệu qua UART
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 100);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f839 	bl	8000150 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f107 010c 	add.w	r1, r7, #12
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <LoRa_SendFrame+0xa0>)
 80010ea:	f003 fa67 	bl	80045bc <HAL_UART_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	08006d78 	.word	0x08006d78
 80010fc:	2000020c 	.word	0x2000020c

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f000 fde9 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f917 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fb6d 	bl	80017ec <MX_GPIO_Init>
  MX_TIM4_Init();
 8001112:	f000 faf3 	bl	80016fc <MX_TIM4_Init>
  MX_TIM1_Init();
 8001116:	f000 f9dd 	bl	80014d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800111a:	f000 fa2b 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 800111e:	f000 fa9f 	bl	8001660 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001122:	f000 f95b 	bl	80013dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001126:	f000 f997 	bl	8001458 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800112a:	f000 fb35 	bl	8001798 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);
 800112e:	486e      	ldr	r0, [pc, #440]	; (80012e8 <main+0x1e8>)
 8001130:	f002 fbf2 	bl	8003918 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8001134:	486d      	ldr	r0, [pc, #436]	; (80012ec <main+0x1ec>)
 8001136:	f002 fbef 	bl	8003918 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	486c      	ldr	r0, [pc, #432]	; (80012f0 <main+0x1f0>)
 800113e:	f002 fcb3 	bl	8003aa8 <HAL_TIM_PWM_Start>
//	HAL_TIM_Base_Start(&htim1);
	timer_init(&htim3);
 8001142:	486a      	ldr	r0, [pc, #424]	; (80012ec <main+0x1ec>)
 8001144:	f004 fa2a 	bl	800559c <timer_init>

	init_dht11(&dht, &htim4, GPIOA, DHT_Pin);
 8001148:	2308      	movs	r3, #8
 800114a:	4a6a      	ldr	r2, [pc, #424]	; (80012f4 <main+0x1f4>)
 800114c:	4966      	ldr	r1, [pc, #408]	; (80012e8 <main+0x1e8>)
 800114e:	486a      	ldr	r0, [pc, #424]	; (80012f8 <main+0x1f8>)
 8001150:	f004 f84e 	bl	80051f0 <init_dht11>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	HAL_UART_Transmit(&huart1, "Hello World\n",strlen("Hello World\n"), 100);
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_data, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	4969      	ldr	r1, [pc, #420]	; (80012fc <main+0x1fc>)
 8001158:	4869      	ldr	r0, [pc, #420]	; (8001300 <main+0x200>)
 800115a:	f003 faba 	bl	80046d2 <HAL_UART_Receive_IT>
	char sendData[] = "Hello LoRa World";
 800115e:	4b69      	ldr	r3, [pc, #420]	; (8001304 <main+0x204>)
 8001160:	463c      	mov	r4, r7
 8001162:	461d      	mov	r5, r3
 8001164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	7023      	strb	r3, [r4, #0]

	// ID của thiết bị (giả sử là 0x01) và hành động ghi (write - 1)
	uint8_t id = 0x01;
 800116c:	2301      	movs	r3, #1
 800116e:	77fb      	strb	r3, [r7, #31]
	uint8_t rw = 1;  // 1 là write
 8001170:	2301      	movs	r3, #1
 8001172:	77bb      	strb	r3, [r7, #30]

	// Gửi dữ liệu qua LoRa
//	LoRa_SendFrame(id, rw, sendData);
	uint16_t tick = HAL_GetTick();
 8001174:	f000 fe0a 	bl	8001d8c <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	83bb      	strh	r3, [r7, #28]
	LoRaTx.id = 0x03;
 800117c:	4b62      	ldr	r3, [pc, #392]	; (8001308 <main+0x208>)
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
	LoRaTx.rw = 1;
 8001182:	4b61      	ldr	r3, [pc, #388]	; (8001308 <main+0x208>)
 8001184:	2201      	movs	r2, #1
 8001186:	705a      	strb	r2, [r3, #1]
//
//		current_tick = tick;
//		}
//		getDustDensity();
//		LoRa_SendFrame(id, rw, sendData);
		SensorCo = analogRead(&hadc2) / 3;
 8001188:	4860      	ldr	r0, [pc, #384]	; (800130c <main+0x20c>)
 800118a:	f004 f9ee 	bl	800556a <analogRead>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <main+0x210>)
 8001194:	fba3 2302 	umull	r2, r3, r3, r2
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fd55 	bl	8000c4c <__aeabi_i2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <main+0x214>)
 80011a6:	6013      	str	r3, [r2, #0]
		sensorvalue = analogRead(&hadc1);
 80011a8:	485b      	ldr	r0, [pc, #364]	; (8001318 <main+0x218>)
 80011aa:	f004 f9de 	bl	800556a <analogRead>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <main+0x21c>)
 80011b4:	601a      	str	r2, [r3, #0]
		voltage = sensorvalue * (5 / 4095.0);
 80011b6:	4b59      	ldr	r3, [pc, #356]	; (800131c <main+0x21c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f922 	bl	8000404 <__aeabi_i2d>
 80011c0:	a341      	add	r3, pc, #260	; (adr r3, 80012c8 <main+0x1c8>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc31 	bl	8000a38 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <main+0x220>)
 80011da:	6013      	str	r3, [r2, #0]
		rs = (5 - voltage) / voltage * RL;
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <main+0x220>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4850      	ldr	r0, [pc, #320]	; (8001324 <main+0x224>)
 80011e4:	f7ff fc7c 	bl	8000ae0 <__aeabi_fsub>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <main+0x220>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff fe32 	bl	8000e5c <__aeabi_fdiv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	494b      	ldr	r1, [pc, #300]	; (8001328 <main+0x228>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd79 	bl	8000cf4 <__aeabi_fmul>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b49      	ldr	r3, [pc, #292]	; (800132c <main+0x22c>)
 8001208:	601a      	str	r2, [r3, #0]
		ratio = rs / R0;
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <main+0x22c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f90a 	bl	8000428 <__aeabi_f2d>
 8001214:	a32e      	add	r3, pc, #184	; (adr r3, 80012d0 <main+0x1d0>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff fa87 	bl	800072c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc07 	bl	8000a38 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a40      	ldr	r2, [pc, #256]	; (8001330 <main+0x230>)
 800122e:	6013      	str	r3, [r2, #0]
		ppm = 116.6020682 * pow(ratio, -2.769034857);
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <main+0x230>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f8f7 	bl	8000428 <__aeabi_f2d>
 800123a:	a327      	add	r3, pc, #156	; (adr r3, 80012d8 <main+0x1d8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f004 fe82 	bl	8005f48 <pow>
 8001244:	a326      	add	r3, pc, #152	; (adr r3, 80012e0 <main+0x1e0>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f945 	bl	80004d8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fbef 	bl	8000a38 <__aeabi_d2f>
 800125a:	4603      	mov	r3, r0
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <main+0x234>)
 800125e:	6013      	str	r3, [r2, #0]
		readDHT11(&dht);
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <main+0x1f8>)
 8001262:	f004 f814 	bl	800528e <readDHT11>
		if (flat) {
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <main+0x238>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d025      	beq.n	80012ba <main+0x1ba>
			LoRaTx.id	  = ID_STM32_1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <main+0x208>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
			LoRaTx.rw	  = 1;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <main+0x208>)
 8001276:	2201      	movs	r2, #1
 8001278:	705a      	strb	r2, [r3, #1]
			LoRaTx.d_temp = dht.temperature;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <main+0x1f8>)
 800127c:	7b1a      	ldrb	r2, [r3, #12]
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <main+0x208>)
 8001280:	70da      	strb	r2, [r3, #3]
			LoRaTx.d_humi = dht.humidty;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <main+0x1f8>)
 8001284:	7b5a      	ldrb	r2, [r3, #13]
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <main+0x208>)
 8001288:	709a      	strb	r2, [r3, #2]
			LoRaTx.d_ppm = (uint16_t) ppm;
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <main+0x234>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe80 	bl	8000f94 <__aeabi_f2uiz>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <main+0x208>)
 800129a:	809a      	strh	r2, [r3, #4]
			LoRaTx.d_co = (uint16_t) SensorCo;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <main+0x214>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe77 	bl	8000f94 <__aeabi_f2uiz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <main+0x208>)
 80012ac:	80da      	strh	r2, [r3, #6]
			LoRa_SendFrame(&LoRaTx);
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <main+0x208>)
 80012b0:	f7ff fed4 	bl	800105c <LoRa_SendFrame>
//			HAL_UART_Transmit(&huart1,sendData,strlen(sendData), 100);
			flat = 0;
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <main+0x238>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,500);
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <main+0x1f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
		SensorCo = analogRead(&hadc2) / 3;
 80012c4:	e760      	b.n	8001188 <main+0x88>
 80012c6:	bf00      	nop
 80012c8:	14014014 	.word	0x14014014
 80012cc:	3f540140 	.word	0x3f540140
 80012d0:	eb851eb8 	.word	0xeb851eb8
 80012d4:	40532851 	.word	0x40532851
 80012d8:	bf42646d 	.word	0xbf42646d
 80012dc:	c00626fb 	.word	0xc00626fb
 80012e0:	490f3d8b 	.word	0x490f3d8b
 80012e4:	405d2688 	.word	0x405d2688
 80012e8:	200001c4 	.word	0x200001c4
 80012ec:	2000017c 	.word	0x2000017c
 80012f0:	20000134 	.word	0x20000134
 80012f4:	40010800 	.word	0x40010800
 80012f8:	2000026c 	.word	0x2000026c
 80012fc:	2000027c 	.word	0x2000027c
 8001300:	2000020c 	.word	0x2000020c
 8001304:	08006da8 	.word	0x08006da8
 8001308:	20000308 	.word	0x20000308
 800130c:	200000bc 	.word	0x200000bc
 8001310:	aaaaaaab 	.word	0xaaaaaaab
 8001314:	20000268 	.word	0x20000268
 8001318:	2000008c 	.word	0x2000008c
 800131c:	20000254 	.word	0x20000254
 8001320:	20000258 	.word	0x20000258
 8001324:	40a00000 	.word	0x40a00000
 8001328:	41200000 	.word	0x41200000
 800132c:	2000025c 	.word	0x2000025c
 8001330:	20000260 	.word	0x20000260
 8001334:	20000264 	.word	0x20000264
 8001338:	20000304 	.word	0x20000304

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	; 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 f96a 	bl	8005624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001374:	2310      	movs	r3, #16
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fcfd 	bl	8002d80 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800138c:	f000 fa82 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 ff6a 	bl	8003284 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80013b6:	f000 fa6d 	bl	8001894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ba:	2302      	movs	r3, #2
 80013bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 f8eb 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d0:	f000 fa60 	bl	8001894 <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3750      	adds	r7, #80	; 0x50
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_ADC1_Init+0x74>)
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <MX_ADC1_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_ADC1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_ADC1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_ADC1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_ADC1_Init+0x74>)
 8001406:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800140a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_ADC1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_ADC1_Init+0x74>)
 8001414:	2201      	movs	r2, #1
 8001416:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_ADC1_Init+0x74>)
 800141a:	f000 fce5 	bl	8001de8 <HAL_ADC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001424:	f000 fa36 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800142c:	2301      	movs	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001430:	2302      	movs	r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_ADC1_Init+0x74>)
 800143a:	f000 ff99 	bl	8002370 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001444:	f000 fa26 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000008c 	.word	0x2000008c
 8001454:	40012400 	.word	0x40012400

08001458 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_ADC2_Init+0x74>)
 800146a:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <MX_ADC2_Init+0x78>)
 800146c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_ADC2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_ADC2_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_ADC2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_ADC2_Init+0x74>)
 8001482:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001486:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_ADC2_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_ADC2_Init+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_ADC2_Init+0x74>)
 8001496:	f000 fca7 	bl	8001de8 <HAL_ADC_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 f9f8 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80014ac:	2302      	movs	r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_ADC2_Init+0x74>)
 80014b6:	f000 ff5b 	bl	8002370 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80014c0:	f000 f9e8 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000bc 	.word	0x200000bc
 80014d0:	40012800 	.word	0x40012800

080014d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM1_Init+0x98>)
 80014f2:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <MX_TIM1_Init+0x9c>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM1_Init+0x98>)
 80014f8:	2208      	movs	r2, #8
 80014fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_TIM1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM1_Init+0x98>)
 8001504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001508:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_TIM1_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM1_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_TIM1_Init+0x98>)
 800151e:	f002 f9ab 	bl	8003878 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001528:	f000 f9b4 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM1_Init+0x98>)
 800153a:	f002 fc19 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 f9a6 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM1_Init+0x98>)
 8001556:	f002 ff83 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001560:	f000 f998 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000ec 	.word	0x200000ec
 8001570:	40012c00 	.word	0x40012c00

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_TIM2_Init+0xe8>)
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_TIM2_Init+0xe8>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <MX_TIM2_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_TIM2_Init+0xe8>)
 80015ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_TIM2_Init+0xe8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_TIM2_Init+0xe8>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015cc:	4823      	ldr	r0, [pc, #140]	; (800165c <MX_TIM2_Init+0xe8>)
 80015ce:	f002 f953 	bl	8003878 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015d8:	f000 f95c 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	4619      	mov	r1, r3
 80015e8:	481c      	ldr	r0, [pc, #112]	; (800165c <MX_TIM2_Init+0xe8>)
 80015ea:	f002 fbc1 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015f4:	f000 f94e 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f8:	4818      	ldr	r0, [pc, #96]	; (800165c <MX_TIM2_Init+0xe8>)
 80015fa:	f002 f9fd 	bl	80039f8 <HAL_TIM_PWM_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001604:	f000 f946 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	4619      	mov	r1, r3
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <MX_TIM2_Init+0xe8>)
 8001618:	f002 ff22 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001622:	f000 f937 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001626:	2360      	movs	r3, #96	; 0x60
 8001628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM2_Init+0xe8>)
 800163e:	f002 fad5 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001648:	f000 f924 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM2_Init+0xe8>)
 800164e:	f000 fa17 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8001652:	bf00      	nop
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000134 	.word	0x20000134

08001660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM3_Init+0x94>)
 800167e:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <MX_TIM3_Init+0x98>)
 8001680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM3_Init+0x94>)
 8001684:	2207      	movs	r2, #7
 8001686:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM3_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM3_Init+0x94>)
 8001690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_TIM3_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM3_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_TIM3_Init+0x94>)
 80016a4:	f002 f8e8 	bl	8003878 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 f8f1 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4619      	mov	r1, r3
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_TIM3_Init+0x94>)
 80016c0:	f002 fb56 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f000 f8e3 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM3_Init+0x94>)
 80016dc:	f002 fec0 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016e6:	f000 f8d5 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000017c 	.word	0x2000017c
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_TIM4_Init+0x94>)
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <MX_TIM4_Init+0x98>)
 800171c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_TIM4_Init+0x94>)
 8001720:	2207      	movs	r2, #7
 8001722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_TIM4_Init+0x94>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_TIM4_Init+0x94>)
 800172c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_TIM4_Init+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_TIM4_Init+0x94>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <MX_TIM4_Init+0x94>)
 8001740:	f002 f89a 	bl	8003878 <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800174a:	f000 f8a3 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	4619      	mov	r1, r3
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_TIM4_Init+0x94>)
 800175c:	f002 fb08 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 f895 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_TIM4_Init+0x94>)
 8001778:	f002 fe72 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001782:	f000 f887 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200001c4 	.word	0x200001c4
 8001794:	40000800 	.word	0x40000800

08001798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_USART1_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017d0:	f002 fea4 	bl	800451c <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f85b 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000020c 	.word	0x2000020c
 80017e8:	40013800 	.word	0x40013800

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_GPIO_Init+0x9c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a20      	ldr	r2, [pc, #128]	; (8001888 <MX_GPIO_Init+0x9c>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_GPIO_Init+0x9c>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_GPIO_Init+0x9c>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <MX_GPIO_Init+0x9c>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_GPIO_Init+0x9c>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001836:	4815      	ldr	r0, [pc, #84]	; (800188c <MX_GPIO_Init+0xa0>)
 8001838:	f001 fa89 	bl	8002d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_PIN_Pin|DHT_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	210c      	movs	r1, #12
 8001840:	4813      	ldr	r0, [pc, #76]	; (8001890 <MX_GPIO_Init+0xa4>)
 8001842:	f001 fa84 	bl	8002d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001846:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800184a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2302      	movs	r3, #2
 8001856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	; (800188c <MX_GPIO_Init+0xa0>)
 8001860:	f001 f8da 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_PIN_Pin DHT_Pin */
  GPIO_InitStruct.Pin = DHT11_PIN_Pin|DHT_Pin;
 8001864:	230c      	movs	r3, #12
 8001866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2302      	movs	r3, #2
 8001872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4619      	mov	r1, r3
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_GPIO_Init+0xa4>)
 800187c:	f001 f8cc 	bl	8002a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	40011000 	.word	0x40011000
 8001890:	40010800 	.word	0x40010800

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800189c:	e7fe      	b.n	800189c <Error_Handler+0x8>
	...

080018a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_MspInit+0x5c>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_MspInit+0x5c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6193      	str	r3, [r2, #24]
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_MspInit+0x5c>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_MspInit+0x5c>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_MspInit+0x5c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_MspInit+0x5c>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_MspInit+0x60>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_MspInit+0x60>)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000

08001904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_ADC_MspInit+0xbc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d122      	bne.n	800196a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001954:	2301      	movs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001958:	2303      	movs	r3, #3
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	4619      	mov	r1, r3
 8001962:	4819      	ldr	r0, [pc, #100]	; (80019c8 <HAL_ADC_MspInit+0xc4>)
 8001964:	f001 f858 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001968:	e026      	b.n	80019b8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_ADC_MspInit+0xc8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d121      	bne.n	80019b8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 800197a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_ADC_MspInit+0xc0>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a8:	2303      	movs	r3, #3
 80019aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_ADC_MspInit+0xc4>)
 80019b4:	f001 f830 	bl	8002a18 <HAL_GPIO_Init>
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40012400 	.word	0x40012400
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40012800 	.word	0x40012800

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_TIM_Base_MspInit+0xa0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10c      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019fa:	e034      	b.n	8001a66 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a04:	d10c      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
}
 8001a1e:	e022      	b.n	8001a66 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <HAL_TIM_Base_MspInit+0xa8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10c      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	e010      	b.n	8001a66 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <HAL_TIM_Base_MspInit+0xac>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10b      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_TIM_Base_MspInit+0xa4>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
}
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40000800 	.word	0x40000800

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9e:	d12a      	bne.n	8001af6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_TIM_MspPostInit+0x80>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <HAL_TIM_MspPostInit+0x80>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_TIM_MspPostInit+0x80>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <HAL_TIM_MspPostInit+0x84>)
 8001ace:	f000 ffa3 	bl	8002a18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_TIM_MspPostInit+0x88>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_TIM_MspPostInit+0x88>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010000 	.word	0x40010000

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_UART_MspInit+0x9c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d139      	bne.n	8001ba0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_UART_MspInit+0xa0>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_UART_MspInit+0xa0>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_UART_MspInit+0xa0>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_UART_MspInit+0xa0>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_UART_MspInit+0xa0>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_UART_MspInit+0xa0>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480f      	ldr	r0, [pc, #60]	; (8001bb0 <HAL_UART_MspInit+0xa4>)
 8001b72:	f000 ff51 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <HAL_UART_MspInit+0xa4>)
 8001b8c:	f000 ff44 	bl	8002a18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2025      	movs	r0, #37	; 0x25
 8001b96:	f000 fe56 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9a:	2025      	movs	r0, #37	; 0x25
 8001b9c:	f000 fe6f 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010800 	.word	0x40010800

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f8b5 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <USART1_IRQHandler+0x10>)
 8001c0a:	f002 fd87 	bl	800471c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000020c 	.word	0x2000020c

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f003 fcf4 	bl	8005634 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20005000 	.word	0x20005000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000314 	.word	0x20000314
 8001c80:	20000470 	.word	0x20000470

08001c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c90:	f7ff fff8 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c96:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c98:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cac:	4c09      	ldr	r4, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f003 fcc1 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fa1f 	bl	8001100 <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ccc:	08006e68 	.word	0x08006e68
  ldr r2, =_sbss
 8001cd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001cd4:	20000470 	.word	0x20000470

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x28>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fd9f 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fdd2 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fdb7 	bl	800289a <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 fd7f 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x1c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x20>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_IncTick+0x20>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000318 	.word	0x20000318

08001d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000318 	.word	0x20000318

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffe0 	bl	8001d8c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008

08001de8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0be      	b.n	8001f88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fd6c 	bl	8001904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fbf1 	bl	8002614 <ADC_ConversionStop_Disable>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 8099 	bne.w	8001f76 <HAL_ADC_Init+0x18e>
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8095 	bne.w	8001f76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e54:	f023 0302 	bic.w	r3, r3, #2
 8001e58:	f043 0202 	orr.w	r2, r3, #2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7b1b      	ldrb	r3, [r3, #12]
 8001e6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e80:	d003      	beq.n	8001e8a <HAL_ADC_Init+0xa2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_ADC_Init+0xa8>
 8001e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8e:	e000      	b.n	8001e92 <HAL_ADC_Init+0xaa>
 8001e90:	2300      	movs	r3, #0
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7d1b      	ldrb	r3, [r3, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d119      	bne.n	8001ed4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	035a      	lsls	r2, r3, #13
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e00b      	b.n	8001ed4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_ADC_Init+0x1a8>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f04:	d003      	beq.n	8001f0e <HAL_ADC_Init+0x126>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d104      	bne.n	8001f18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_ADC_Init+0x1ac>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10b      	bne.n	8001f54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f023 0312 	bic.w	r3, r3, #18
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	ffe1f7fd 	.word	0xffe1f7fd
 8001f94:	ff1f0efe 	.word	0xff1f0efe

08001f98 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Start+0x1a>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e098      	b.n	80020e4 <HAL_ADC_Start+0x14c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fad0 	bl	8002560 <ADC_Enable>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8087 	bne.w	80020da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_ADC_Start+0x154>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_Start+0x5e>
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_ADC_Start+0x158>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d026      	beq.n	800205e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002018:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002020:	e01d      	b.n	800205e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_ADC_Start+0x158>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_ADC_Start+0xaa>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <HAL_ADC_Start+0x154>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10d      	bne.n	800205e <HAL_ADC_Start+0xc6>
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_ADC_Start+0x158>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	f023 0206 	bic.w	r2, r3, #6
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
 8002076:	e002      	b.n	800207e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0202 	mvn.w	r2, #2
 800208e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800209a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800209e:	d113      	bne.n	80020c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_ADC_Start+0x154>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_ADC_Start+0x158>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	e00c      	b.n	80020e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40012800 	.word	0x40012800
 80020f0:	40012400 	.word	0x40012400

080020f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADC_Stop+0x1a>
 800210a:	2302      	movs	r3, #2
 800210c:	e01a      	b.n	8002144 <HAL_ADC_Stop+0x50>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa7c 	bl	8002614 <ADC_ConversionStop_Disable>
 800211c:	4603      	mov	r3, r0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002162:	f7ff fe13 	bl	8001d8c <HAL_GetTick>
 8002166:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0d3      	b.n	8002336 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d131      	bne.n	8002200 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d12a      	bne.n	8002200 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021aa:	e021      	b.n	80021f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d01d      	beq.n	80021f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_ADC_PollForConversion+0x7e>
 80021ba:	f7ff fde7 	bl	8001d8c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d212      	bcs.n	80021f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10b      	bne.n	80021f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0a2      	b.n	8002336 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0d6      	beq.n	80021ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021fe:	e070      	b.n	80022e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002200:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <HAL_ADC_PollForConversion+0x1f4>)
 8002202:	681c      	ldr	r4, [r3, #0]
 8002204:	2002      	movs	r0, #2
 8002206:	f001 fa81 	bl	800370c <HAL_RCCEx_GetPeriphCLKFreq>
 800220a:	4603      	mov	r3, r0
 800220c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6919      	ldr	r1, [r3, #16]
 8002216:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_ADC_PollForConversion+0x1f8>)
 8002218:	400b      	ands	r3, r1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_ADC_PollForConversion+0x104>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68d9      	ldr	r1, [r3, #12]
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_ADC_PollForConversion+0x1fc>)
 8002226:	400b      	ands	r3, r1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d111      	bne.n	8002250 <HAL_ADC_PollForConversion+0x104>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_ADC_PollForConversion+0x200>)
 8002234:	400b      	ands	r3, r1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_ADC_PollForConversion+0x100>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68d9      	ldr	r1, [r3, #12]
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_ADC_PollForConversion+0x204>)
 8002242:	400b      	ands	r3, r1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_PollForConversion+0x100>
 8002248:	2314      	movs	r3, #20
 800224a:	e020      	b.n	800228e <HAL_ADC_PollForConversion+0x142>
 800224c:	2329      	movs	r3, #41	; 0x29
 800224e:	e01e      	b.n	800228e <HAL_ADC_PollForConversion+0x142>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_ADC_PollForConversion+0x200>)
 8002258:	400b      	ands	r3, r1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_ADC_PollForConversion+0x120>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68d9      	ldr	r1, [r3, #12]
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_ADC_PollForConversion+0x204>)
 8002266:	400b      	ands	r3, r1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00d      	beq.n	8002288 <HAL_ADC_PollForConversion+0x13c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_ADC_PollForConversion+0x208>)
 8002274:	400b      	ands	r3, r1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <HAL_ADC_PollForConversion+0x140>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_ADC_PollForConversion+0x208>)
 8002282:	400b      	ands	r3, r1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_PollForConversion+0x140>
 8002288:	2354      	movs	r3, #84	; 0x54
 800228a:	e000      	b.n	800228e <HAL_ADC_PollForConversion+0x142>
 800228c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002294:	e021      	b.n	80022da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d01a      	beq.n	80022d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_ADC_PollForConversion+0x168>
 80022a4:	f7ff fd72 	bl	8001d8c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d20f      	bcs.n	80022d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d90b      	bls.n	80022d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e030      	b.n	8002336 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d8d9      	bhi.n	8002296 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0212 	mvn.w	r2, #18
 80022ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002302:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002306:	d115      	bne.n	8002334 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000
 8002344:	24924924 	.word	0x24924924
 8002348:	00924924 	.word	0x00924924
 800234c:	12492492 	.word	0x12492492
 8002350:	00492492 	.word	0x00492492
 8002354:	00249249 	.word	0x00249249

08002358 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x20>
 800238c:	2302      	movs	r3, #2
 800238e:	e0dc      	b.n	800254a <HAL_ADC_ConfigChannel+0x1da>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d81c      	bhi.n	80023da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3b05      	subs	r3, #5
 80023b2:	221f      	movs	r2, #31
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b05      	subs	r3, #5
 80023cc:	fa00 f203 	lsl.w	r2, r0, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34
 80023d8:	e03c      	b.n	8002454 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d81c      	bhi.n	800241c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b23      	subs	r3, #35	; 0x23
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	4019      	ands	r1, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b23      	subs	r3, #35	; 0x23
 800240e:	fa00 f203 	lsl.w	r2, r0, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
 800241a:	e01b      	b.n	8002454 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b41      	subs	r3, #65	; 0x41
 800242e:	221f      	movs	r2, #31
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	4019      	ands	r1, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b41      	subs	r3, #65	; 0x41
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b09      	cmp	r3, #9
 800245a:	d91c      	bls.n	8002496 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68d9      	ldr	r1, [r3, #12]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	3b1e      	subs	r3, #30
 8002488:	fa00 f203 	lsl.w	r2, r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	e019      	b.n	80024ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6919      	ldr	r1, [r3, #16]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	2207      	movs	r2, #7
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4019      	ands	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6898      	ldr	r0, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	fa00 f203 	lsl.w	r2, r0, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d003      	beq.n	80024da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024d6:	2b11      	cmp	r3, #17
 80024d8:	d132      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_ADC_ConfigChannel+0x1e4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d125      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d126      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002500:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b10      	cmp	r3, #16
 8002508:	d11a      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_ADC_ConfigChannel+0x1e8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <HAL_ADC_ConfigChannel+0x1ec>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9a      	lsrs	r2, r3, #18
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002520:	e002      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x1b2>
 800252e:	e007      	b.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40012400 	.word	0x40012400
 8002558:	20000000 	.word	0x20000000
 800255c:	431bde83 	.word	0x431bde83

08002560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d040      	beq.n	8002600 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <ADC_Enable+0xac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <ADC_Enable+0xb0>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800259c:	e002      	b.n	80025a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025aa:	f7ff fbef 	bl	8001d8c <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025b0:	e01f      	b.n	80025f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025b2:	f7ff fbeb 	bl	8001d8c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d918      	bls.n	80025f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d011      	beq.n	80025f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d1d8      	bne.n	80025b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12e      	bne.n	800268c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800263e:	f7ff fba5 	bl	8001d8c <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002644:	e01b      	b.n	800267e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002646:	f7ff fba1 	bl	8001d8c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d914      	bls.n	800267e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10d      	bne.n	800267e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d0dc      	beq.n	8002646 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4906      	ldr	r1, [pc, #24]	; (8002730 <__NVIC_EnableIRQ+0x34>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff90 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff2d 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff42 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff90 	bl	8002788 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5f 	bl	8002734 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff35 	bl	80026fc <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d008      	beq.n	80028dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2204      	movs	r2, #4
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e020      	b.n	800291e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020e 	bic.w	r2, r2, #14
 80028ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d005      	beq.n	800294c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e051      	b.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020e 	bic.w	r2, r2, #14
 800295a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_DMA_Abort_IT+0xd4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d029      	beq.n	80029ca <HAL_DMA_Abort_IT+0xa2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <HAL_DMA_Abort_IT+0xd8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x9e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_DMA_Abort_IT+0xdc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01a      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x98>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_DMA_Abort_IT+0xe0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d012      	beq.n	80029ba <HAL_DMA_Abort_IT+0x92>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_DMA_Abort_IT+0xe4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00a      	beq.n	80029b4 <HAL_DMA_Abort_IT+0x8c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_DMA_Abort_IT+0xe8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d102      	bne.n	80029ae <HAL_DMA_Abort_IT+0x86>
 80029a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029ac:	e00e      	b.n	80029cc <HAL_DMA_Abort_IT+0xa4>
 80029ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b2:	e00b      	b.n	80029cc <HAL_DMA_Abort_IT+0xa4>
 80029b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b8:	e008      	b.n	80029cc <HAL_DMA_Abort_IT+0xa4>
 80029ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029be:	e005      	b.n	80029cc <HAL_DMA_Abort_IT+0xa4>
 80029c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c4:	e002      	b.n	80029cc <HAL_DMA_Abort_IT+0xa4>
 80029c6:	2310      	movs	r3, #16
 80029c8:	e000      	b.n	80029cc <HAL_DMA_Abort_IT+0xa4>
 80029ca:	2301      	movs	r3, #1
 80029cc:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <HAL_DMA_Abort_IT+0xec>)
 80029ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
    } 
  }
  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40020008 	.word	0x40020008
 8002a00:	4002001c 	.word	0x4002001c
 8002a04:	40020030 	.word	0x40020030
 8002a08:	40020044 	.word	0x40020044
 8002a0c:	40020058 	.word	0x40020058
 8002a10:	4002006c 	.word	0x4002006c
 8002a14:	40020000 	.word	0x40020000

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b08b      	sub	sp, #44	; 0x2c
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	e169      	b.n	8002d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8158 	bne.w	8002cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a9a      	ldr	r2, [pc, #616]	; (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d05e      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a54:	4a98      	ldr	r2, [pc, #608]	; (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d875      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a98      	ldr	r2, [pc, #608]	; (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d058      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a60:	4a96      	ldr	r2, [pc, #600]	; (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d86f      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a66:	4a96      	ldr	r2, [pc, #600]	; (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d052      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a6c:	4a94      	ldr	r2, [pc, #592]	; (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d869      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a72:	4a94      	ldr	r2, [pc, #592]	; (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04c      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a78:	4a92      	ldr	r2, [pc, #584]	; (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d863      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a92      	ldr	r2, [pc, #584]	; (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d046      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a84:	4a90      	ldr	r2, [pc, #576]	; (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d85d      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d82a      	bhi.n	8002ae4 <HAL_GPIO_Init+0xcc>
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d859      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_GPIO_Init+0x80>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002b13 	.word	0x08002b13
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002aff 	.word	0x08002aff
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002b47 	.word	0x08002b47
 8002aac:	08002b47 	.word	0x08002b47
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002b47 	.word	0x08002b47
 8002ab8:	08002b47 	.word	0x08002b47
 8002abc:	08002b47 	.word	0x08002b47
 8002ac0:	08002b47 	.word	0x08002b47
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b47 	.word	0x08002b47
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b47 	.word	0x08002b47
 8002ad4:	08002b47 	.word	0x08002b47
 8002ad8:	08002b47 	.word	0x08002b47
 8002adc:	08002af5 	.word	0x08002af5
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	4a79      	ldr	r2, [pc, #484]	; (8002ccc <HAL_GPIO_Init+0x2b4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aea:	e02c      	b.n	8002b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e029      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	3304      	adds	r3, #4
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e024      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	3308      	adds	r3, #8
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e01f      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e01a      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e013      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	611a      	str	r2, [r3, #16]
          break;
 8002b32:	e009      	b.n	8002b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	615a      	str	r2, [r3, #20]
          break;
 8002b3e:	e003      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          break;
 8002b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2bff      	cmp	r3, #255	; 0xff
 8002b4c:	d801      	bhi.n	8002b52 <HAL_GPIO_Init+0x13a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_Init+0x13e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	d802      	bhi.n	8002b64 <HAL_GPIO_Init+0x14c>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x152>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	3b08      	subs	r3, #8
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	210f      	movs	r1, #15
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80b1 	beq.w	8002cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b98:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb0:	4a48      	ldr	r2, [pc, #288]	; (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a40      	ldr	r2, [pc, #256]	; (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00d      	beq.n	8002c00 <HAL_GPIO_Init+0x1e8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3e      	ldr	r2, [pc, #248]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x1e4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3d      	ldr	r2, [pc, #244]	; (8002ce4 <HAL_GPIO_Init+0x2cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	e004      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_GPIO_Init+0x1ee>
 8002c04:	2300      	movs	r3, #0
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	f002 0203 	and.w	r2, r2, #3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4093      	lsls	r3, r2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c16:	492f      	ldr	r1, [pc, #188]	; (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	492c      	ldr	r1, [pc, #176]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4928      	ldr	r1, [pc, #160]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4922      	ldr	r1, [pc, #136]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	491e      	ldr	r1, [pc, #120]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4918      	ldr	r1, [pc, #96]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	4914      	ldr	r1, [pc, #80]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]
 8002cb4:	e021      	b.n	8002cfa <HAL_GPIO_Init+0x2e2>
 8002cb6:	bf00      	nop
 8002cb8:	10320000 	.word	0x10320000
 8002cbc:	10310000 	.word	0x10310000
 8002cc0:	10220000 	.word	0x10220000
 8002cc4:	10210000 	.word	0x10210000
 8002cc8:	10120000 	.word	0x10120000
 8002ccc:	10110000 	.word	0x10110000
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	40010c00 	.word	0x40010c00
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40011400 	.word	0x40011400
 8002ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	4909      	ldr	r1, [pc, #36]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f47f ae8e 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	372c      	adds	r7, #44	; 0x2c
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40010400 	.word	0x40010400

08002d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e001      	b.n	8002d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	807b      	strh	r3, [r7, #2]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5e:	787b      	ldrb	r3, [r7, #1]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d6a:	e003      	b.n	8002d74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	041a      	lsls	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e272      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8087 	beq.w	8002eae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da0:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d00c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dac:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d112      	bne.n	8002dde <HAL_RCC_OscConfig+0x5e>
 8002db8:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d10b      	bne.n	8002dde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc6:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d06c      	beq.n	8002eac <HAL_RCC_OscConfig+0x12c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d168      	bne.n	8002eac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e24c      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x76>
 8002de8:	4b80      	ldr	r3, [pc, #512]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a7f      	ldr	r2, [pc, #508]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e02e      	b.n	8002e54 <HAL_RCC_OscConfig+0xd4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x98>
 8002dfe:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7a      	ldr	r2, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b78      	ldr	r3, [pc, #480]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a77      	ldr	r2, [pc, #476]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xd4>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0xbc>
 8002e22:	4b72      	ldr	r3, [pc, #456]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a71      	ldr	r2, [pc, #452]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6e      	ldr	r2, [pc, #440]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xd4>
 8002e3c:	4b6b      	ldr	r3, [pc, #428]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a67      	ldr	r2, [pc, #412]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe ff96 	bl	8001d8c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe ff92 	bl	8001d8c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e200      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xe4>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe ff82 	bl	8001d8c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe ff7e 	bl	8001d8c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1ec      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x10c>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eba:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d11c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x18c>
 8002ed2:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d116      	bne.n	8002f0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x176>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1c0      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4939      	ldr	r1, [pc, #228]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	e03a      	b.n	8002f82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe ff37 	bl	8001d8c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe ff33 	bl	8001d8c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1a1      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4927      	ldr	r1, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe ff16 	bl	8001d8c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe ff12 	bl	8001d8c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e180      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03a      	beq.n	8003004 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d019      	beq.n	8002fca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_RCC_OscConfig+0x274>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fef6 	bl	8001d8c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fef2 	bl	8001d8c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e160      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f000 face 	bl	8003564 <RCC_Delay>
 8002fc8:	e01c      	b.n	8003004 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fedc 	bl	8001d8c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd6:	e00f      	b.n	8002ff8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fed8 	bl	8001d8c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d908      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e146      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	42420000 	.word	0x42420000
 8002ff4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	4b92      	ldr	r3, [pc, #584]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e9      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80a6 	beq.w	800315e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003016:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4a87      	ldr	r2, [pc, #540]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302c:	61d3      	str	r3, [r2, #28]
 800302e:	4b85      	ldr	r3, [pc, #532]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	4b82      	ldr	r3, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x4c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d118      	bne.n	800307c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x4c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x4c8>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7fe fe99 	bl	8001d8c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305e:	f7fe fe95 	bl	8001d8c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b64      	cmp	r3, #100	; 0x64
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e103      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x4c8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x312>
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4a6e      	ldr	r2, [pc, #440]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6213      	str	r3, [r2, #32]
 8003090:	e02d      	b.n	80030ee <HAL_RCC_OscConfig+0x36e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x334>
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a69      	ldr	r2, [pc, #420]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6213      	str	r3, [r2, #32]
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a66      	ldr	r2, [pc, #408]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	e01c      	b.n	80030ee <HAL_RCC_OscConfig+0x36e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d10c      	bne.n	80030d6 <HAL_RCC_OscConfig+0x356>
 80030bc:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a60      	ldr	r2, [pc, #384]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e00b      	b.n	80030ee <HAL_RCC_OscConfig+0x36e>
 80030d6:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a5a      	ldr	r2, [pc, #360]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	6213      	str	r3, [r2, #32]
 80030e2:	4b58      	ldr	r3, [pc, #352]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a57      	ldr	r2, [pc, #348]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d015      	beq.n	8003122 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fe49 	bl	8001d8c <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fe45 	bl	8001d8c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0b1      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003114:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ee      	beq.n	80030fe <HAL_RCC_OscConfig+0x37e>
 8003120:	e014      	b.n	800314c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fe fe33 	bl	8001d8c <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fe2f 	bl	8001d8c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e09b      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ee      	bne.n	800312a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003152:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8087 	beq.w	8003276 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d061      	beq.n	8003238 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d146      	bne.n	800320a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317c:	4b33      	ldr	r3, [pc, #204]	; (800324c <HAL_RCC_OscConfig+0x4cc>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fe03 	bl	8001d8c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe fdff 	bl	8001d8c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e06d      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f0      	bne.n	800318a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b0:	d108      	bne.n	80031c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4921      	ldr	r1, [pc, #132]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a19      	ldr	r1, [r3, #32]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	430b      	orrs	r3, r1
 80031d6:	491b      	ldr	r1, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x4cc>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fdd3 	bl	8001d8c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ea:	f7fe fdcf 	bl	8001d8c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e03d      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x46a>
 8003208:	e035      	b.n	8003276 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_RCC_OscConfig+0x4cc>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fdbc 	bl	8001d8c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fdb8 	bl	8001d8c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e026      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x498>
 8003236:	e01e      	b.n	8003276 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e019      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
 8003244:	40021000 	.word	0x40021000
 8003248:	40007000 	.word	0x40007000
 800324c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_OscConfig+0x500>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	429a      	cmp	r2, r3
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d001      	beq.n	8003276 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000

08003284 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d0      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0207 	bic.w	r2, r3, #7
 80032ae:	4965      	ldr	r1, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003302:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d040      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e073      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4936      	ldr	r1, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7fe fd0a 	bl	8001d8c <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fe fd06 	bl	8001d8c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e053      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d210      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490a      	ldr	r1, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1cc>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1d0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fc68 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	08006dbc 	.word	0x08006dbc
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x30>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x36>
 8003486:	e027      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800348a:	613b      	str	r3, [r7, #16]
      break;
 800348c:	e027      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0c9b      	lsrs	r3, r3, #18
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_RCC_GetSysClockFreq+0x94>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0c5b      	lsrs	r3, r3, #17
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ba:	fb03 f202 	mul.w	r2, r3, r2
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e004      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	613b      	str	r3, [r7, #16]
      break;
 80034d6:	e002      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034da:	613b      	str	r3, [r7, #16]
      break;
 80034dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034de:	693b      	ldr	r3, [r7, #16]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	08006dd4 	.word	0x08006dd4
 80034f8:	08006de4 	.word	0x08006de4
 80034fc:	003d0900 	.word	0x003d0900

08003500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <HAL_RCC_GetHCLKFreq+0x10>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	20000000 	.word	0x20000000

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003518:	f7ff fff2 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	08006dcc 	.word	0x08006dcc

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003540:	f7ff ffde 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0adb      	lsrs	r3, r3, #11
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	08006dcc 	.word	0x08006dcc

08003564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <RCC_Delay+0x34>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <RCC_Delay+0x38>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003580:	bf00      	nop
  }
  while (Delay --);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e5a      	subs	r2, r3, #1
 8003586:	60fa      	str	r2, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f9      	bne.n	8003580 <RCC_Delay+0x1c>
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000000 	.word	0x20000000
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d07d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c0:	4b4f      	ldr	r3, [pc, #316]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a4b      	ldr	r2, [pc, #300]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	61d3      	str	r3, [r2, #28]
 80035d8:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d118      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a42      	ldr	r2, [pc, #264]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003600:	f7fe fbc4 	bl	8001d8c <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	e008      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fe fbc0 	bl	8001d8c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e06d      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d027      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003644:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003654:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800365a:	4a29      	ldr	r2, [pc, #164]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d014      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fb8f 	bl	8001d8c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fb8b 	bl	8001d8c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e036      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ee      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4917      	ldr	r1, [pc, #92]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	490b      	ldr	r1, [pc, #44]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4904      	ldr	r1, [pc, #16]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	42420440 	.word	0x42420440

0800370c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b10      	cmp	r3, #16
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b10      	cmp	r3, #16
 8003732:	f200 808a 	bhi.w	800384a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d045      	beq.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d075      	beq.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003742:	e082      	b.n	800384a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003744:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800374a:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d07b      	beq.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	4a41      	ldr	r2, [pc, #260]	; (8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d015      	beq.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376e:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	0c5b      	lsrs	r3, r3, #17
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	4a3b      	ldr	r2, [pc, #236]	; (8003868 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003788:	4a38      	ldr	r2, [pc, #224]	; (800386c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e004      	b.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b0:	d102      	bne.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	61bb      	str	r3, [r7, #24]
      break;
 80037b6:	e04a      	b.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
      break;
 80037c6:	e042      	b.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d8:	d108      	bne.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80037e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e01f      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f6:	d109      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003804:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e00f      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003816:	d11c      	bne.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d016      	beq.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003824:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003828:	61bb      	str	r3, [r7, #24]
      break;
 800382a:	e012      	b.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800382c:	e011      	b.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800382e:	f7ff fe85 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	0b9b      	lsrs	r3, r3, #14
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	3301      	adds	r3, #1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	61bb      	str	r3, [r7, #24]
      break;
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800384a:	bf00      	nop
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003852:	bf00      	nop
    }
  }
  return (frequency);
 8003854:	69bb      	ldr	r3, [r7, #24]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	08006de8 	.word	0x08006de8
 8003868:	08006df8 	.word	0x08006df8
 800386c:	007a1200 	.word	0x007a1200
 8003870:	003d0900 	.word	0x003d0900
 8003874:	aaaaaaab 	.word	0xaaaaaaab

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e041      	b.n	800390e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe f896 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fb22 	bl	8003f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d001      	beq.n	8003930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <HAL_TIM_Base_Start+0x88>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_TIM_Base_Start+0x48>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d009      	beq.n	8003960 <HAL_TIM_Base_Start+0x48>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <HAL_TIM_Base_Start+0x8c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_TIM_Base_Start+0x48>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <HAL_TIM_Base_Start+0x90>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d111      	bne.n	8003984 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d010      	beq.n	8003994 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	e007      	b.n	8003994 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800

080039ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10f      	bne.n	80039e4 <HAL_TIM_Base_Stop+0x38>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	f240 4344 	movw	r3, #1092	; 0x444
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_Base_Stop+0x38>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e041      	b.n	8003a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f839 	bl	8003a96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fa62 	bl	8003f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_TIM_PWM_Start+0x24>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e022      	b.n	8003b12 <HAL_TIM_PWM_Start+0x6a>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d109      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0x3e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	e015      	b.n	8003b12 <HAL_TIM_PWM_Start+0x6a>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d109      	bne.n	8003b00 <HAL_TIM_PWM_Start+0x58>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e008      	b.n	8003b12 <HAL_TIM_PWM_Start+0x6a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e05e      	b.n	8003bd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start+0x82>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b28:	e013      	b.n	8003b52 <HAL_TIM_PWM_Start+0xaa>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x92>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	e00b      	b.n	8003b52 <HAL_TIM_PWM_Start+0xaa>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0xa2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b48:	e003      	b.n	8003b52 <HAL_TIM_PWM_Start+0xaa>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2201      	movs	r2, #1
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc5c 	bl	8004418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <HAL_TIM_PWM_Start+0x138>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d107      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_TIM_PWM_Start+0x138>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0xfa>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d009      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0xfa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <HAL_TIM_PWM_Start+0x13c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0xfa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_TIM_PWM_Start+0x140>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d111      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d010      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	e007      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800

08003bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0ae      	b.n	8003d68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	f200 809f 	bhi.w	8003d58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003d59 	.word	0x08003d59
 8003c28:	08003d59 	.word	0x08003d59
 8003c2c:	08003d59 	.word	0x08003d59
 8003c30:	08003c95 	.word	0x08003c95
 8003c34:	08003d59 	.word	0x08003d59
 8003c38:	08003d59 	.word	0x08003d59
 8003c3c:	08003d59 	.word	0x08003d59
 8003c40:	08003cd7 	.word	0x08003cd7
 8003c44:	08003d59 	.word	0x08003d59
 8003c48:	08003d59 	.word	0x08003d59
 8003c4c:	08003d59 	.word	0x08003d59
 8003c50:	08003d17 	.word	0x08003d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f9be 	bl	8003fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6999      	ldr	r1, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
      break;
 8003c92:	e064      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa04 	bl	80040a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]
      break;
 8003cd4:	e043      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fa4d 	bl	800417c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0208 	orr.w	r2, r2, #8
 8003cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
      break;
 8003d14:	e023      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fa97 	bl	8004250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	61da      	str	r2, [r3, #28]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_ConfigClockSource+0x1c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0b4      	b.n	8003ef6 <HAL_TIM_ConfigClockSource+0x186>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d03e      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0xd4>
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dca:	f200 8087 	bhi.w	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	f000 8086 	beq.w	8003ee2 <HAL_TIM_ConfigClockSource+0x172>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d87f      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b70      	cmp	r3, #112	; 0x70
 8003dde:	d01a      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0xa6>
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d87b      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b60      	cmp	r3, #96	; 0x60
 8003de6:	d050      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x11a>
 8003de8:	2b60      	cmp	r3, #96	; 0x60
 8003dea:	d877      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b50      	cmp	r3, #80	; 0x50
 8003dee:	d03c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xfa>
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d873      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d058      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x13a>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d86f      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b30      	cmp	r3, #48	; 0x30
 8003dfe:	d064      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d86b      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d060      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d867      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05c      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d05a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	e062      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e26:	f000 fad8 	bl	80043da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	609a      	str	r2, [r3, #8]
      break;
 8003e42:	e04f      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	f000 fac1 	bl	80043da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e66:	609a      	str	r2, [r3, #8]
      break;
 8003e68:	e03c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 fa38 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2150      	movs	r1, #80	; 0x50
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fa8f 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e88:	e02c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 fa56 	bl	8004348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2160      	movs	r1, #96	; 0x60
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fa7f 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e01c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 fa18 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2140      	movs	r1, #64	; 0x40
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fa6f 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f000 fa66 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <TIM_Base_SetConfig+0xd0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x30>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x30>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a2c      	ldr	r2, [pc, #176]	; (8003fd4 <TIM_Base_SetConfig+0xd4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x30>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <TIM_Base_SetConfig+0xd8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <TIM_Base_SetConfig+0xd0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0x62>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <TIM_Base_SetConfig+0xd4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <TIM_Base_SetConfig+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <TIM_Base_SetConfig+0xd0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800

08003fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <TIM_OC1_SetConfig+0xc8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10c      	bne.n	8004052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0308 	bic.w	r3, r3, #8
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <TIM_OC1_SetConfig+0xc8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0210 	bic.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0320 	bic.w	r3, r3, #32
 80040f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <TIM_OC2_SetConfig+0xd0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10d      	bne.n	8004124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <TIM_OC2_SetConfig+0xd0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d113      	bne.n	8004154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	40012c00 	.word	0x40012c00

0800417c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <TIM_OC3_SetConfig+0xd0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10d      	bne.n	80041f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <TIM_OC3_SetConfig+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40012c00 	.word	0x40012c00

08004250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0f      	ldr	r2, [pc, #60]	; (80042e8 <TIM_OC4_SetConfig+0x98>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d109      	bne.n	80042c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00

080042ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 030a 	bic.w	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0210 	bic.w	r2, r3, #16
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	031b      	lsls	r3, r3, #12
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004384:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	621a      	str	r2, [r3, #32]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f043 0307 	orr.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4313      	orrs	r3, r2
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2201      	movs	r2, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004474:	2302      	movs	r3, #2
 8004476:	e046      	b.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a16      	ldr	r2, [pc, #88]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d009      	beq.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a12      	ldr	r2, [pc, #72]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a10      	ldr	r2, [pc, #64]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d10c      	bne.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800

0800451c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e042      	b.n	80045b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fae2 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fdb7 	bl	80050d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d175      	bne.n	80046c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_Transmit+0x2c>
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e06e      	b.n	80046ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2221      	movs	r2, #33	; 0x21
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fa:	f7fd fbc7 	bl	8001d8c <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004614:	d108      	bne.n	8004628 <HAL_UART_Transmit+0x6c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e003      	b.n	8004630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004630:	e02e      	b.n	8004690 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fb1c 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e03a      	b.n	80046ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10b      	bne.n	8004672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004668:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	3302      	adds	r3, #2
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	e007      	b.n	8004682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3301      	adds	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1cb      	bne.n	8004632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2140      	movs	r1, #64	; 0x40
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fae8 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d112      	bne.n	8004712 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_UART_Receive_IT+0x26>
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e00b      	b.n	8004714 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	461a      	mov	r2, r3
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fb0f 	bl	8004d2c <UART_Start_Receive_IT>
 800470e:	4603      	mov	r3, r0
 8004710:	e000      	b.n	8004714 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b0ba      	sub	sp, #232	; 0xe8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004748:	2300      	movs	r3, #0
 800474a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800475a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_UART_IRQHandler+0x66>
 800476e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fbec 	bl	8004f58 <UART_Receive_IT>
      return;
 8004780:	e25b      	b.n	8004c3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80de 	beq.w	8004948 <HAL_UART_IRQHandler+0x22c>
 800478c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80d1 	beq.w	8004948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_UART_IRQHandler+0xae>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f043 0201 	orr.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_UART_IRQHandler+0xd2>
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f043 0202 	orr.w	r2, r3, #2
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_UART_IRQHandler+0xf6>
 80047fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d011      	beq.n	8004842 <HAL_UART_IRQHandler+0x126>
 800481e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800482a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f043 0208 	orr.w	r2, r3, #8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 81f2 	beq.w	8004c30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_UART_IRQHandler+0x14e>
 8004858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fb77 	bl	8004f58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <HAL_UART_IRQHandler+0x17a>
 800488e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d04f      	beq.n	8004936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa81 	bl	8004d9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d041      	beq.n	800492e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1d9      	bne.n	80048aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d013      	beq.n	8004926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	4a7e      	ldr	r2, [pc, #504]	; (8004afc <HAL_UART_IRQHandler+0x3e0>)
 8004904:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe f80c 	bl	8002928 <HAL_DMA_Abort_IT>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d016      	beq.n	8004944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004920:	4610      	mov	r0, r2
 8004922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	e00e      	b.n	8004944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f993 	bl	8004c52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	e00a      	b.n	8004944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f98f 	bl	8004c52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	e006      	b.n	8004944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f98b 	bl	8004c52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004942:	e175      	b.n	8004c30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	bf00      	nop
    return;
 8004946:	e173      	b.n	8004c30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b01      	cmp	r3, #1
 800494e:	f040 814f 	bne.w	8004bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8148 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8141 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80b6 	beq.w	8004b00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8145 	beq.w	8004c34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049b2:	429a      	cmp	r2, r3
 80049b4:	f080 813e 	bcs.w	8004c34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f000 8088 	beq.w	8004adc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1d9      	bne.n	80049cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3314      	adds	r3, #20
 8004a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e1      	bne.n	8004a18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e3      	bne.n	8004a54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	f023 0310 	bic.w	r3, r3, #16
 8004ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004abe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ac0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e3      	bne.n	8004a9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fd feeb 	bl	80028b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8b6 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004af8:	e09c      	b.n	8004c34 <HAL_UART_IRQHandler+0x518>
 8004afa:	bf00      	nop
 8004afc:	08004e63 	.word	0x08004e63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 808e 	beq.w	8004c38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8089 	beq.w	8004c38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b82:	633a      	str	r2, [r7, #48]	; 0x30
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e3      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f83b 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bee:	e023      	b.n	8004c38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_UART_IRQHandler+0x4f4>
 8004bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f93e 	bl	8004e8a <UART_Transmit_IT>
    return;
 8004c0e:	e014      	b.n	8004c3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <HAL_UART_IRQHandler+0x51e>
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f97d 	bl	8004f28 <UART_EndTransmit_IT>
    return;
 8004c2e:	e004      	b.n	8004c3a <HAL_UART_IRQHandler+0x51e>
    return;
 8004c30:	bf00      	nop
 8004c32:	e002      	b.n	8004c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c34:	bf00      	nop
 8004c36:	e000      	b.n	8004c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c38:	bf00      	nop
  }
}
 8004c3a:	37e8      	adds	r7, #232	; 0xe8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	e03b      	b.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d037      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fd f87a 	bl	8001d8c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	6a3a      	ldr	r2, [r7, #32]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e03a      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d020      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d01d      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d116      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f856 	bl	8004d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e00f      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d0b4      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2222      	movs	r2, #34	; 0x22
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0220 	orr.w	r2, r2, #32
 8004d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b095      	sub	sp, #84	; 0x54
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc6:	643a      	str	r2, [r7, #64]	; 0x40
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e5      	bne.n	8004da6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e5      	bne.n	8004dda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d119      	bne.n	8004e4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f023 0310 	bic.w	r3, r3, #16
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e36:	61ba      	str	r2, [r7, #24]
 8004e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6979      	ldr	r1, [r7, #20]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	613b      	str	r3, [r7, #16]
   return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e58:	bf00      	nop
 8004e5a:	3754      	adds	r7, #84	; 0x54
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fee8 	bl	8004c52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b21      	cmp	r3, #33	; 0x21
 8004e9c:	d13e      	bne.n	8004f1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d114      	bne.n	8004ed2 <UART_Transmit_IT+0x48>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]
 8004ed0:	e008      	b.n	8004ee4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6211      	str	r1, [r2, #32]
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fe79 	bl	8004c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b22      	cmp	r3, #34	; 0x22
 8004f6a:	f040 80ae 	bne.w	80050ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d117      	bne.n	8004fa8 <UART_Receive_IT+0x50>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d113      	bne.n	8004fa8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa6:	e026      	b.n	8004ff6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d007      	beq.n	8004fcc <UART_Receive_IT+0x74>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <UART_Receive_IT+0x82>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	e008      	b.n	8004fec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4619      	mov	r1, r3
 8005004:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005006:	2b00      	cmp	r3, #0
 8005008:	d15d      	bne.n	80050c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0220 	bic.w	r2, r2, #32
 8005018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005028:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	2b01      	cmp	r3, #1
 800504e:	d135      	bne.n	80050bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	613b      	str	r3, [r7, #16]
   return(result);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	623a      	str	r2, [r7, #32]
 8005078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	69f9      	ldr	r1, [r7, #28]
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	61bb      	str	r3, [r7, #24]
   return(result);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d10a      	bne.n	80050ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fdd5 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
 80050ba:	e002      	b.n	80050c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7fb ff89 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e002      	b.n	80050cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800510e:	f023 030c 	bic.w	r3, r3, #12
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	430b      	orrs	r3, r1
 800511a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <UART_SetConfig+0x114>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d103      	bne.n	8005144 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fe f9fe 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	e002      	b.n	800514a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005144:	f7fe f9e6 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8005148:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009a      	lsls	r2, r3, #2
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <UART_SetConfig+0x118>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	0119      	lsls	r1, r3, #4
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <UART_SetConfig+0x118>)
 8005182:	fba3 0302 	umull	r0, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2064      	movs	r0, #100	; 0x64
 800518a:	fb00 f303 	mul.w	r3, r0, r3
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	3332      	adds	r3, #50	; 0x32
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <UART_SetConfig+0x118>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a0:	4419      	add	r1, r3
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009a      	lsls	r2, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <UART_SetConfig+0x118>)
 80051ba:	fba3 0302 	umull	r0, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2064      	movs	r0, #100	; 0x64
 80051c2:	fb00 f303 	mul.w	r3, r0, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	3332      	adds	r3, #50	; 0x32
 80051cc:	4a07      	ldr	r2, [pc, #28]	; (80051ec <UART_SetConfig+0x118>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	440a      	add	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40013800 	.word	0x40013800
 80051ec:	51eb851f 	.word	0x51eb851f

080051f0 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	809a      	strh	r2, [r3, #4]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005226:	f107 0308 	add.w	r3, r7, #8
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	609a      	str	r2, [r3, #8]
 8005232:	60da      	str	r2, [r3, #12]

	if(pMode == OUTPUT)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d111      	bne.n	800525e <set_dht11_gpio_mode+0x44>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	889b      	ldrh	r3, [r3, #4]
 800523e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005240:	2301      	movs	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005248:	2303      	movs	r3, #3
 800524a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f107 0208 	add.w	r2, r7, #8
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f7fd fbde 	bl	8002a18 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 800525c:	e013      	b.n	8005286 <set_dht11_gpio_mode+0x6c>
	}else if(pMode == INPUT)
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d110      	bne.n	8005286 <set_dht11_gpio_mode+0x6c>
	  GPIO_InitStruct.Pin = dht->pin;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	889b      	ldrh	r3, [r3, #4]
 8005268:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005272:	2303      	movs	r3, #3
 8005274:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f107 0208 	add.w	r2, r7, #8
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f7fd fbc9 	bl	8002a18 <HAL_GPIO_Init>
}
 8005286:	bf00      	nop
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b094      	sub	sp, #80	; 0x50
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t mTime2 = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t mBit = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	uint8_t humVal = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t tempVal = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t parityVal = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
//	uint8_t genParity = 0;
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 80052b6:	2101      	movs	r1, #1
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ffae 	bl	800521a <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	889b      	ldrh	r3, [r3, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	4619      	mov	r1, r3
 80052ca:	f7fd fd40 	bl	8002d4e <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80052ce:	2012      	movs	r0, #18
 80052d0:	f7fc fd66 	bl	8001da0 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80052d4:	b672      	cpsid	i
}
 80052d6:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fb1b 	bl	8003918 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80052e2:	2100      	movs	r1, #0
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff98 	bl	800521a <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80052f4:	e00b      	b.n	800530e <readDHT11+0x80>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005304:	d903      	bls.n	800530e <readDHT11+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 8005306:	b662      	cpsie	i
}
 8005308:	bf00      	nop
			__enable_irq();
			return 0;
 800530a:	2300      	movs	r3, #0
 800530c:	e129      	b.n	8005562 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	889b      	ldrh	r3, [r3, #4]
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fd fd01 	bl	8002d20 <HAL_GPIO_ReadPin>
 800531e:	4603      	mov	r3, r0
 8005320:	2b01      	cmp	r3, #1
 8005322:	d0e8      	beq.n	80052f6 <readDHT11+0x68>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800532e:	e00b      	b.n	8005348 <readDHT11+0xba>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b29b      	uxth	r3, r3
 800533a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800533e:	d903      	bls.n	8005348 <readDHT11+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8005340:	b662      	cpsie	i
}
 8005342:	bf00      	nop
			__enable_irq();
			return 0;
 8005344:	2300      	movs	r3, #0
 8005346:	e10c      	b.n	8005562 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	889b      	ldrh	r3, [r3, #4]
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f7fd fce4 	bl	8002d20 <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0e8      	beq.n	8005330 <readDHT11+0xa2>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8005372:	e00b      	b.n	800538c <readDHT11+0xfe>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b29b      	uxth	r3, r3
 800537e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005382:	d903      	bls.n	800538c <readDHT11+0xfe>
  __ASM volatile ("cpsie i" : : : "memory");
 8005384:	b662      	cpsie	i
}
 8005386:	bf00      	nop
			__enable_irq();
			return 0;
 8005388:	2300      	movs	r3, #0
 800538a:	e0ea      	b.n	8005562 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	889b      	ldrh	r3, [r3, #4]
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7fd fcc2 	bl	8002d20 <HAL_GPIO_ReadPin>
 800539c:	4603      	mov	r3, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d0e8      	beq.n	8005374 <readDHT11+0xe6>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 80053ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053ae:	2b4a      	cmp	r3, #74	; 0x4a
 80053b0:	d80c      	bhi.n	80053cc <readDHT11+0x13e>
 80053b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053b4:	2b55      	cmp	r3, #85	; 0x55
 80053b6:	d909      	bls.n	80053cc <readDHT11+0x13e>
 80053b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053ba:	2b4a      	cmp	r3, #74	; 0x4a
 80053bc:	d806      	bhi.n	80053cc <readDHT11+0x13e>
 80053be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053c0:	2b55      	cmp	r3, #85	; 0x55
 80053c2:	d903      	bls.n	80053cc <readDHT11+0x13e>
  __ASM volatile ("cpsie i" : : : "memory");
 80053c4:	b662      	cpsie	i
}
 80053c6:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e0ca      	b.n	8005562 <readDHT11+0x2d4>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	647b      	str	r3, [r7, #68]	; 0x44
 80053d0:	e05d      	b.n	800548e <readDHT11+0x200>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2200      	movs	r2, #0
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80053dc:	e00b      	b.n	80053f6 <readDHT11+0x168>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053ec:	d903      	bls.n	80053f6 <readDHT11+0x168>
  __ASM volatile ("cpsie i" : : : "memory");
 80053ee:	b662      	cpsie	i
}
 80053f0:	bf00      	nop
				__enable_irq();
				return 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e0b5      	b.n	8005562 <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	889b      	ldrh	r3, [r3, #4]
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fd fc8d 	bl	8002d20 <HAL_GPIO_ReadPin>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0e8      	beq.n	80053de <readDHT11+0x150>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8005416:	e00b      	b.n	8005430 <readDHT11+0x1a2>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	b29b      	uxth	r3, r3
 8005422:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005426:	d903      	bls.n	8005430 <readDHT11+0x1a2>
  __ASM volatile ("cpsie i" : : : "memory");
 8005428:	b662      	cpsie	i
}
 800542a:	bf00      	nop
				__enable_irq();
				return 0;
 800542c:	2300      	movs	r3, #0
 800542e:	e098      	b.n	8005562 <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	889b      	ldrh	r3, [r3, #4]
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7fd fc70 	bl	8002d20 <HAL_GPIO_ReadPin>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d0e8      	beq.n	8005418 <readDHT11+0x18a>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8005450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005452:	2b14      	cmp	r3, #20
 8005454:	d906      	bls.n	8005464 <readDHT11+0x1d6>
 8005456:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005458:	2b1d      	cmp	r3, #29
 800545a:	d803      	bhi.n	8005464 <readDHT11+0x1d6>
		{
			mBit = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005462:	e008      	b.n	8005476 <readDHT11+0x1e8>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8005464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005466:	2b3c      	cmp	r3, #60	; 0x3c
 8005468:	d905      	bls.n	8005476 <readDHT11+0x1e8>
 800546a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800546c:	2b4f      	cmp	r3, #79	; 0x4f
 800546e:	d802      	bhi.n	8005476 <readDHT11+0x1e8>
		{
			 mBit = 1;
 8005470:	2301      	movs	r3, #1
 8005472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8005476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800547a:	b2d9      	uxtb	r1, r3
 800547c:	f107 020c 	add.w	r2, r7, #12
 8005480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005482:	4413      	add	r3, r2
 8005484:	460a      	mov	r2, r1
 8005486:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8005488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548a:	3301      	adds	r3, #1
 800548c:	647b      	str	r3, [r7, #68]	; 0x44
 800548e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005490:	2b27      	cmp	r3, #39	; 0x27
 8005492:	dd9e      	ble.n	80053d2 <readDHT11+0x144>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe fa87 	bl	80039ac <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 800549e:	b662      	cpsie	i
}
 80054a0:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
 80054a6:	e011      	b.n	80054cc <readDHT11+0x23e>
	{
		humVal += mData[i];
 80054a8:	f107 020c 	add.w	r2, r7, #12
 80054ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ae:	4413      	add	r3, r2
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80054b6:	4413      	add	r3, r2
 80054b8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 80054bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	3301      	adds	r3, #1
 80054ca:	643b      	str	r3, [r7, #64]	; 0x40
 80054cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ce:	2b07      	cmp	r3, #7
 80054d0:	ddea      	ble.n	80054a8 <readDHT11+0x21a>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80054d2:	2310      	movs	r3, #16
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d6:	e011      	b.n	80054fc <readDHT11+0x26e>
	{
		tempVal += mData[i];
 80054d8:	f107 020c 	add.w	r2, r7, #12
 80054dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054de:	4413      	add	r3, r2
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80054e6:	4413      	add	r3, r2
 80054e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 80054ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 80054f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f8:	3301      	adds	r3, #1
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	2b17      	cmp	r3, #23
 8005500:	ddea      	ble.n	80054d8 <readDHT11+0x24a>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8005502:	2320      	movs	r3, #32
 8005504:	63bb      	str	r3, [r7, #56]	; 0x38
 8005506:	e011      	b.n	800552c <readDHT11+0x29e>
	{
		parityVal += mData[i];
 8005508:	f107 020c 	add.w	r2, r7, #12
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	4413      	add	r3, r2
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005516:	4413      	add	r3, r2
 8005518:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 800551c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	3301      	adds	r3, #1
 800552a:	63bb      	str	r3, [r7, #56]	; 0x38
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	2b27      	cmp	r3, #39	; 0x27
 8005530:	ddea      	ble.n	8005508 <readDHT11+0x27a>
	}

	parityVal = parityVal >> 1;
 8005532:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 800553c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 8005546:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

//	genParity = humVal + tempVal;

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005556:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800555e:	735a      	strb	r2, [r3, #13]
	return 1;
 8005560:	2301      	movs	r3, #1
}
 8005562:	4618      	mov	r0, r3
 8005564:	3750      	adds	r7, #80	; 0x50
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <analogRead>:
 *  Created on: Sep 13, 2024
 *      Author: phat.nguyen-thanh
 */

#include "analog.h"
uint16_t analogRead(ADC_HandleTypeDef *adcx) {
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adcx);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fd10 	bl	8001f98 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adcx, 1000);
 8005578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fc fde5 	bl	800214c <HAL_ADC_PollForConversion>
	uint16_t ret = HAL_ADC_GetValue(adcx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fee8 	bl	8002358 <HAL_ADC_GetValue>
 8005588:	4603      	mov	r3, r0
 800558a:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(adcx);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fc fdb1 	bl	80020f4 <HAL_ADC_Stop>
	return ret;
 8005592:	89fb      	ldrh	r3, [r7, #14]

}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <timer_init>:

#include "timer.h"
struct Timer_Conf_t TimerConfig;
enum TimerStatus gTimerStatus = TIMER_NOT_INITIAL;

void timer_init(TIM_HandleTypeDef *htim){
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	gTimerStatus = TIMER_NOT_INITIAL;
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <timer_init+0x40>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
	switch(gTimerStatus)
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <timer_init+0x40>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <timer_init+0x1c>
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d00c      	beq.n	80055d0 <timer_init+0x34>
			break;
		case TIMER_INITIALIZED:
			// TODO
			break;
		default:
			break;
 80055b6:	e00c      	b.n	80055d2 <timer_init+0x36>
			TimerConfig.htim = htim;
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <timer_init+0x44>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start(TimerConfig.htim);
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <timer_init+0x44>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe f9a8 	bl	8003918 <HAL_TIM_Base_Start>
			gTimerStatus = TIMER_INITIALIZED;
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <timer_init+0x40>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
			break;
 80055ce:	e000      	b.n	80055d2 <timer_init+0x36>
			break;
 80055d0:	bf00      	nop
	}
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000324 	.word	0x20000324
 80055e0:	2000031c 	.word	0x2000031c

080055e4 <siprintf>:
 80055e4:	b40e      	push	{r1, r2, r3}
 80055e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ea:	b500      	push	{lr}
 80055ec:	b09c      	sub	sp, #112	; 0x70
 80055ee:	ab1d      	add	r3, sp, #116	; 0x74
 80055f0:	9002      	str	r0, [sp, #8]
 80055f2:	9006      	str	r0, [sp, #24]
 80055f4:	9107      	str	r1, [sp, #28]
 80055f6:	9104      	str	r1, [sp, #16]
 80055f8:	4808      	ldr	r0, [pc, #32]	; (800561c <siprintf+0x38>)
 80055fa:	4909      	ldr	r1, [pc, #36]	; (8005620 <siprintf+0x3c>)
 80055fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005600:	9105      	str	r1, [sp, #20]
 8005602:	6800      	ldr	r0, [r0, #0]
 8005604:	a902      	add	r1, sp, #8
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	f000 f98e 	bl	8005928 <_svfiprintf_r>
 800560c:	2200      	movs	r2, #0
 800560e:	9b02      	ldr	r3, [sp, #8]
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	b01c      	add	sp, #112	; 0x70
 8005614:	f85d eb04 	ldr.w	lr, [sp], #4
 8005618:	b003      	add	sp, #12
 800561a:	4770      	bx	lr
 800561c:	20000058 	.word	0x20000058
 8005620:	ffff0208 	.word	0xffff0208

08005624 <memset>:
 8005624:	4603      	mov	r3, r0
 8005626:	4402      	add	r2, r0
 8005628:	4293      	cmp	r3, r2
 800562a:	d100      	bne.n	800562e <memset+0xa>
 800562c:	4770      	bx	lr
 800562e:	f803 1b01 	strb.w	r1, [r3], #1
 8005632:	e7f9      	b.n	8005628 <memset+0x4>

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000058 	.word	0x20000058

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	2600      	movs	r6, #0
 8005644:	4d0c      	ldr	r5, [pc, #48]	; (8005678 <__libc_init_array+0x38>)
 8005646:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005648:	1b64      	subs	r4, r4, r5
 800564a:	10a4      	asrs	r4, r4, #2
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	f001 fb84 	bl	8006d5c <_init>
 8005654:	2600      	movs	r6, #0
 8005656:	4d0a      	ldr	r5, [pc, #40]	; (8005680 <__libc_init_array+0x40>)
 8005658:	4c0a      	ldr	r4, [pc, #40]	; (8005684 <__libc_init_array+0x44>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	08006e60 	.word	0x08006e60
 800567c:	08006e60 	.word	0x08006e60
 8005680:	08006e60 	.word	0x08006e60
 8005684:	08006e64 	.word	0x08006e64

08005688 <__retarget_lock_acquire_recursive>:
 8005688:	4770      	bx	lr

0800568a <__retarget_lock_release_recursive>:
 800568a:	4770      	bx	lr

0800568c <_free_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4605      	mov	r5, r0
 8005690:	2900      	cmp	r1, #0
 8005692:	d040      	beq.n	8005716 <_free_r+0x8a>
 8005694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005698:	1f0c      	subs	r4, r1, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	bfb8      	it	lt
 800569e:	18e4      	addlt	r4, r4, r3
 80056a0:	f000 f8dc 	bl	800585c <__malloc_lock>
 80056a4:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <_free_r+0x8c>)
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	b933      	cbnz	r3, 80056b8 <_free_r+0x2c>
 80056aa:	6063      	str	r3, [r4, #4]
 80056ac:	6014      	str	r4, [r2, #0]
 80056ae:	4628      	mov	r0, r5
 80056b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b4:	f000 b8d8 	b.w	8005868 <__malloc_unlock>
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d908      	bls.n	80056ce <_free_r+0x42>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	1821      	adds	r1, r4, r0
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf01      	itttt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	1809      	addeq	r1, r1, r0
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	e7ed      	b.n	80056aa <_free_r+0x1e>
 80056ce:	461a      	mov	r2, r3
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	b10b      	cbz	r3, 80056d8 <_free_r+0x4c>
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d9fa      	bls.n	80056ce <_free_r+0x42>
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	1850      	adds	r0, r2, r1
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d10b      	bne.n	80056f8 <_free_r+0x6c>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	4401      	add	r1, r0
 80056e4:	1850      	adds	r0, r2, r1
 80056e6:	4283      	cmp	r3, r0
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	d1e0      	bne.n	80056ae <_free_r+0x22>
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4408      	add	r0, r1
 80056f2:	6010      	str	r0, [r2, #0]
 80056f4:	6053      	str	r3, [r2, #4]
 80056f6:	e7da      	b.n	80056ae <_free_r+0x22>
 80056f8:	d902      	bls.n	8005700 <_free_r+0x74>
 80056fa:	230c      	movs	r3, #12
 80056fc:	602b      	str	r3, [r5, #0]
 80056fe:	e7d6      	b.n	80056ae <_free_r+0x22>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	1821      	adds	r1, r4, r0
 8005704:	428b      	cmp	r3, r1
 8005706:	bf01      	itttt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6054      	str	r4, [r2, #4]
 8005714:	e7cb      	b.n	80056ae <_free_r+0x22>
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000468 	.word	0x20000468

0800571c <sbrk_aligned>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4e0e      	ldr	r6, [pc, #56]	; (8005758 <sbrk_aligned+0x3c>)
 8005720:	460c      	mov	r4, r1
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	4605      	mov	r5, r0
 8005726:	b911      	cbnz	r1, 800572e <sbrk_aligned+0x12>
 8005728:	f000 fbaa 	bl	8005e80 <_sbrk_r>
 800572c:	6030      	str	r0, [r6, #0]
 800572e:	4621      	mov	r1, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fba5 	bl	8005e80 <_sbrk_r>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d00a      	beq.n	8005750 <sbrk_aligned+0x34>
 800573a:	1cc4      	adds	r4, r0, #3
 800573c:	f024 0403 	bic.w	r4, r4, #3
 8005740:	42a0      	cmp	r0, r4
 8005742:	d007      	beq.n	8005754 <sbrk_aligned+0x38>
 8005744:	1a21      	subs	r1, r4, r0
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fb9a 	bl	8005e80 <_sbrk_r>
 800574c:	3001      	adds	r0, #1
 800574e:	d101      	bne.n	8005754 <sbrk_aligned+0x38>
 8005750:	f04f 34ff 	mov.w	r4, #4294967295
 8005754:	4620      	mov	r0, r4
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	2000046c 	.word	0x2000046c

0800575c <_malloc_r>:
 800575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005760:	1ccd      	adds	r5, r1, #3
 8005762:	f025 0503 	bic.w	r5, r5, #3
 8005766:	3508      	adds	r5, #8
 8005768:	2d0c      	cmp	r5, #12
 800576a:	bf38      	it	cc
 800576c:	250c      	movcc	r5, #12
 800576e:	2d00      	cmp	r5, #0
 8005770:	4607      	mov	r7, r0
 8005772:	db01      	blt.n	8005778 <_malloc_r+0x1c>
 8005774:	42a9      	cmp	r1, r5
 8005776:	d905      	bls.n	8005784 <_malloc_r+0x28>
 8005778:	230c      	movs	r3, #12
 800577a:	2600      	movs	r6, #0
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	4630      	mov	r0, r6
 8005780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005784:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005858 <_malloc_r+0xfc>
 8005788:	f000 f868 	bl	800585c <__malloc_lock>
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	461c      	mov	r4, r3
 8005792:	bb5c      	cbnz	r4, 80057ec <_malloc_r+0x90>
 8005794:	4629      	mov	r1, r5
 8005796:	4638      	mov	r0, r7
 8005798:	f7ff ffc0 	bl	800571c <sbrk_aligned>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	4604      	mov	r4, r0
 80057a0:	d155      	bne.n	800584e <_malloc_r+0xf2>
 80057a2:	f8d8 4000 	ldr.w	r4, [r8]
 80057a6:	4626      	mov	r6, r4
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	d145      	bne.n	8005838 <_malloc_r+0xdc>
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	d048      	beq.n	8005842 <_malloc_r+0xe6>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	4631      	mov	r1, r6
 80057b4:	4638      	mov	r0, r7
 80057b6:	eb04 0903 	add.w	r9, r4, r3
 80057ba:	f000 fb61 	bl	8005e80 <_sbrk_r>
 80057be:	4581      	cmp	r9, r0
 80057c0:	d13f      	bne.n	8005842 <_malloc_r+0xe6>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	4638      	mov	r0, r7
 80057c6:	1a6d      	subs	r5, r5, r1
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7ff ffa7 	bl	800571c <sbrk_aligned>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d037      	beq.n	8005842 <_malloc_r+0xe6>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	442b      	add	r3, r5
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	f8d8 3000 	ldr.w	r3, [r8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d038      	beq.n	8005852 <_malloc_r+0xf6>
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	42a2      	cmp	r2, r4
 80057e4:	d12b      	bne.n	800583e <_malloc_r+0xe2>
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e00f      	b.n	800580c <_malloc_r+0xb0>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	1b52      	subs	r2, r2, r5
 80057f0:	d41f      	bmi.n	8005832 <_malloc_r+0xd6>
 80057f2:	2a0b      	cmp	r2, #11
 80057f4:	d917      	bls.n	8005826 <_malloc_r+0xca>
 80057f6:	1961      	adds	r1, r4, r5
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	bf18      	it	ne
 80057fe:	6059      	strne	r1, [r3, #4]
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	bf08      	it	eq
 8005804:	f8c8 1000 	streq.w	r1, [r8]
 8005808:	5162      	str	r2, [r4, r5]
 800580a:	604b      	str	r3, [r1, #4]
 800580c:	4638      	mov	r0, r7
 800580e:	f104 060b 	add.w	r6, r4, #11
 8005812:	f000 f829 	bl	8005868 <__malloc_unlock>
 8005816:	f026 0607 	bic.w	r6, r6, #7
 800581a:	1d23      	adds	r3, r4, #4
 800581c:	1af2      	subs	r2, r6, r3
 800581e:	d0ae      	beq.n	800577e <_malloc_r+0x22>
 8005820:	1b9b      	subs	r3, r3, r6
 8005822:	50a3      	str	r3, [r4, r2]
 8005824:	e7ab      	b.n	800577e <_malloc_r+0x22>
 8005826:	42a3      	cmp	r3, r4
 8005828:	6862      	ldr	r2, [r4, #4]
 800582a:	d1dd      	bne.n	80057e8 <_malloc_r+0x8c>
 800582c:	f8c8 2000 	str.w	r2, [r8]
 8005830:	e7ec      	b.n	800580c <_malloc_r+0xb0>
 8005832:	4623      	mov	r3, r4
 8005834:	6864      	ldr	r4, [r4, #4]
 8005836:	e7ac      	b.n	8005792 <_malloc_r+0x36>
 8005838:	4634      	mov	r4, r6
 800583a:	6876      	ldr	r6, [r6, #4]
 800583c:	e7b4      	b.n	80057a8 <_malloc_r+0x4c>
 800583e:	4613      	mov	r3, r2
 8005840:	e7cc      	b.n	80057dc <_malloc_r+0x80>
 8005842:	230c      	movs	r3, #12
 8005844:	4638      	mov	r0, r7
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	f000 f80e 	bl	8005868 <__malloc_unlock>
 800584c:	e797      	b.n	800577e <_malloc_r+0x22>
 800584e:	6025      	str	r5, [r4, #0]
 8005850:	e7dc      	b.n	800580c <_malloc_r+0xb0>
 8005852:	605b      	str	r3, [r3, #4]
 8005854:	deff      	udf	#255	; 0xff
 8005856:	bf00      	nop
 8005858:	20000468 	.word	0x20000468

0800585c <__malloc_lock>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__malloc_lock+0x8>)
 800585e:	f7ff bf13 	b.w	8005688 <__retarget_lock_acquire_recursive>
 8005862:	bf00      	nop
 8005864:	20000464 	.word	0x20000464

08005868 <__malloc_unlock>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__malloc_unlock+0x8>)
 800586a:	f7ff bf0e 	b.w	800568a <__retarget_lock_release_recursive>
 800586e:	bf00      	nop
 8005870:	20000464 	.word	0x20000464

08005874 <__ssputs_r>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	461f      	mov	r7, r3
 800587a:	688e      	ldr	r6, [r1, #8]
 800587c:	4682      	mov	sl, r0
 800587e:	42be      	cmp	r6, r7
 8005880:	460c      	mov	r4, r1
 8005882:	4690      	mov	r8, r2
 8005884:	680b      	ldr	r3, [r1, #0]
 8005886:	d82c      	bhi.n	80058e2 <__ssputs_r+0x6e>
 8005888:	898a      	ldrh	r2, [r1, #12]
 800588a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800588e:	d026      	beq.n	80058de <__ssputs_r+0x6a>
 8005890:	6965      	ldr	r5, [r4, #20]
 8005892:	6909      	ldr	r1, [r1, #16]
 8005894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005898:	eba3 0901 	sub.w	r9, r3, r1
 800589c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058a0:	1c7b      	adds	r3, r7, #1
 80058a2:	444b      	add	r3, r9
 80058a4:	106d      	asrs	r5, r5, #1
 80058a6:	429d      	cmp	r5, r3
 80058a8:	bf38      	it	cc
 80058aa:	461d      	movcc	r5, r3
 80058ac:	0553      	lsls	r3, r2, #21
 80058ae:	d527      	bpl.n	8005900 <__ssputs_r+0x8c>
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7ff ff53 	bl	800575c <_malloc_r>
 80058b6:	4606      	mov	r6, r0
 80058b8:	b360      	cbz	r0, 8005914 <__ssputs_r+0xa0>
 80058ba:	464a      	mov	r2, r9
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	f000 fafd 	bl	8005ebc <memcpy>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	6126      	str	r6, [r4, #16]
 80058d0:	444e      	add	r6, r9
 80058d2:	6026      	str	r6, [r4, #0]
 80058d4:	463e      	mov	r6, r7
 80058d6:	6165      	str	r5, [r4, #20]
 80058d8:	eba5 0509 	sub.w	r5, r5, r9
 80058dc:	60a5      	str	r5, [r4, #8]
 80058de:	42be      	cmp	r6, r7
 80058e0:	d900      	bls.n	80058e4 <__ssputs_r+0x70>
 80058e2:	463e      	mov	r6, r7
 80058e4:	4632      	mov	r2, r6
 80058e6:	4641      	mov	r1, r8
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	f000 faaf 	bl	8005e4c <memmove>
 80058ee:	2000      	movs	r0, #0
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	1b9b      	subs	r3, r3, r6
 80058f4:	60a3      	str	r3, [r4, #8]
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	4433      	add	r3, r6
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	462a      	mov	r2, r5
 8005902:	f000 fae9 	bl	8005ed8 <_realloc_r>
 8005906:	4606      	mov	r6, r0
 8005908:	2800      	cmp	r0, #0
 800590a:	d1e0      	bne.n	80058ce <__ssputs_r+0x5a>
 800590c:	4650      	mov	r0, sl
 800590e:	6921      	ldr	r1, [r4, #16]
 8005910:	f7ff febc 	bl	800568c <_free_r>
 8005914:	230c      	movs	r3, #12
 8005916:	f8ca 3000 	str.w	r3, [sl]
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	e7e9      	b.n	80058fc <__ssputs_r+0x88>

08005928 <_svfiprintf_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	4698      	mov	r8, r3
 800592e:	898b      	ldrh	r3, [r1, #12]
 8005930:	4607      	mov	r7, r0
 8005932:	061b      	lsls	r3, r3, #24
 8005934:	460d      	mov	r5, r1
 8005936:	4614      	mov	r4, r2
 8005938:	b09d      	sub	sp, #116	; 0x74
 800593a:	d50e      	bpl.n	800595a <_svfiprintf_r+0x32>
 800593c:	690b      	ldr	r3, [r1, #16]
 800593e:	b963      	cbnz	r3, 800595a <_svfiprintf_r+0x32>
 8005940:	2140      	movs	r1, #64	; 0x40
 8005942:	f7ff ff0b 	bl	800575c <_malloc_r>
 8005946:	6028      	str	r0, [r5, #0]
 8005948:	6128      	str	r0, [r5, #16]
 800594a:	b920      	cbnz	r0, 8005956 <_svfiprintf_r+0x2e>
 800594c:	230c      	movs	r3, #12
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	e0d0      	b.n	8005af8 <_svfiprintf_r+0x1d0>
 8005956:	2340      	movs	r3, #64	; 0x40
 8005958:	616b      	str	r3, [r5, #20]
 800595a:	2300      	movs	r3, #0
 800595c:	9309      	str	r3, [sp, #36]	; 0x24
 800595e:	2320      	movs	r3, #32
 8005960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005964:	2330      	movs	r3, #48	; 0x30
 8005966:	f04f 0901 	mov.w	r9, #1
 800596a:	f8cd 800c 	str.w	r8, [sp, #12]
 800596e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005b10 <_svfiprintf_r+0x1e8>
 8005972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005976:	4623      	mov	r3, r4
 8005978:	469a      	mov	sl, r3
 800597a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800597e:	b10a      	cbz	r2, 8005984 <_svfiprintf_r+0x5c>
 8005980:	2a25      	cmp	r2, #37	; 0x25
 8005982:	d1f9      	bne.n	8005978 <_svfiprintf_r+0x50>
 8005984:	ebba 0b04 	subs.w	fp, sl, r4
 8005988:	d00b      	beq.n	80059a2 <_svfiprintf_r+0x7a>
 800598a:	465b      	mov	r3, fp
 800598c:	4622      	mov	r2, r4
 800598e:	4629      	mov	r1, r5
 8005990:	4638      	mov	r0, r7
 8005992:	f7ff ff6f 	bl	8005874 <__ssputs_r>
 8005996:	3001      	adds	r0, #1
 8005998:	f000 80a9 	beq.w	8005aee <_svfiprintf_r+0x1c6>
 800599c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599e:	445a      	add	r2, fp
 80059a0:	9209      	str	r2, [sp, #36]	; 0x24
 80059a2:	f89a 3000 	ldrb.w	r3, [sl]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80a1 	beq.w	8005aee <_svfiprintf_r+0x1c6>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f04f 32ff 	mov.w	r2, #4294967295
 80059b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b6:	f10a 0a01 	add.w	sl, sl, #1
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	9307      	str	r3, [sp, #28]
 80059be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059c2:	931a      	str	r3, [sp, #104]	; 0x68
 80059c4:	4654      	mov	r4, sl
 80059c6:	2205      	movs	r2, #5
 80059c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059cc:	4850      	ldr	r0, [pc, #320]	; (8005b10 <_svfiprintf_r+0x1e8>)
 80059ce:	f000 fa67 	bl	8005ea0 <memchr>
 80059d2:	9a04      	ldr	r2, [sp, #16]
 80059d4:	b9d8      	cbnz	r0, 8005a0e <_svfiprintf_r+0xe6>
 80059d6:	06d0      	lsls	r0, r2, #27
 80059d8:	bf44      	itt	mi
 80059da:	2320      	movmi	r3, #32
 80059dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e0:	0711      	lsls	r1, r2, #28
 80059e2:	bf44      	itt	mi
 80059e4:	232b      	movmi	r3, #43	; 0x2b
 80059e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ea:	f89a 3000 	ldrb.w	r3, [sl]
 80059ee:	2b2a      	cmp	r3, #42	; 0x2a
 80059f0:	d015      	beq.n	8005a1e <_svfiprintf_r+0xf6>
 80059f2:	4654      	mov	r4, sl
 80059f4:	2000      	movs	r0, #0
 80059f6:	f04f 0c0a 	mov.w	ip, #10
 80059fa:	9a07      	ldr	r2, [sp, #28]
 80059fc:	4621      	mov	r1, r4
 80059fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a02:	3b30      	subs	r3, #48	; 0x30
 8005a04:	2b09      	cmp	r3, #9
 8005a06:	d94d      	bls.n	8005aa4 <_svfiprintf_r+0x17c>
 8005a08:	b1b0      	cbz	r0, 8005a38 <_svfiprintf_r+0x110>
 8005a0a:	9207      	str	r2, [sp, #28]
 8005a0c:	e014      	b.n	8005a38 <_svfiprintf_r+0x110>
 8005a0e:	eba0 0308 	sub.w	r3, r0, r8
 8005a12:	fa09 f303 	lsl.w	r3, r9, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	46a2      	mov	sl, r4
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	e7d2      	b.n	80059c4 <_svfiprintf_r+0x9c>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	1d19      	adds	r1, r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	9103      	str	r1, [sp, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfbb      	ittet	lt
 8005a2a:	425b      	neglt	r3, r3
 8005a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a30:	9307      	strge	r3, [sp, #28]
 8005a32:	9307      	strlt	r3, [sp, #28]
 8005a34:	bfb8      	it	lt
 8005a36:	9204      	strlt	r2, [sp, #16]
 8005a38:	7823      	ldrb	r3, [r4, #0]
 8005a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a3c:	d10c      	bne.n	8005a58 <_svfiprintf_r+0x130>
 8005a3e:	7863      	ldrb	r3, [r4, #1]
 8005a40:	2b2a      	cmp	r3, #42	; 0x2a
 8005a42:	d134      	bne.n	8005aae <_svfiprintf_r+0x186>
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	3402      	adds	r4, #2
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	9203      	str	r2, [sp, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bfb8      	it	lt
 8005a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a56:	9305      	str	r3, [sp, #20]
 8005a58:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005b14 <_svfiprintf_r+0x1ec>
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	4650      	mov	r0, sl
 8005a60:	7821      	ldrb	r1, [r4, #0]
 8005a62:	f000 fa1d 	bl	8005ea0 <memchr>
 8005a66:	b138      	cbz	r0, 8005a78 <_svfiprintf_r+0x150>
 8005a68:	2240      	movs	r2, #64	; 0x40
 8005a6a:	9b04      	ldr	r3, [sp, #16]
 8005a6c:	eba0 000a 	sub.w	r0, r0, sl
 8005a70:	4082      	lsls	r2, r0
 8005a72:	4313      	orrs	r3, r2
 8005a74:	3401      	adds	r4, #1
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7c:	2206      	movs	r2, #6
 8005a7e:	4826      	ldr	r0, [pc, #152]	; (8005b18 <_svfiprintf_r+0x1f0>)
 8005a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a84:	f000 fa0c 	bl	8005ea0 <memchr>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d038      	beq.n	8005afe <_svfiprintf_r+0x1d6>
 8005a8c:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <_svfiprintf_r+0x1f4>)
 8005a8e:	bb1b      	cbnz	r3, 8005ad8 <_svfiprintf_r+0x1b0>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	3307      	adds	r3, #7
 8005a94:	f023 0307 	bic.w	r3, r3, #7
 8005a98:	3308      	adds	r3, #8
 8005a9a:	9303      	str	r3, [sp, #12]
 8005a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9e:	4433      	add	r3, r6
 8005aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa2:	e768      	b.n	8005976 <_svfiprintf_r+0x4e>
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aac:	e7a6      	b.n	80059fc <_svfiprintf_r+0xd4>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f04f 0c0a 	mov.w	ip, #10
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	4620      	mov	r0, r4
 8005abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ac0:	3a30      	subs	r2, #48	; 0x30
 8005ac2:	2a09      	cmp	r2, #9
 8005ac4:	d903      	bls.n	8005ace <_svfiprintf_r+0x1a6>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0c6      	beq.n	8005a58 <_svfiprintf_r+0x130>
 8005aca:	9105      	str	r1, [sp, #20]
 8005acc:	e7c4      	b.n	8005a58 <_svfiprintf_r+0x130>
 8005ace:	4604      	mov	r4, r0
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad6:	e7f0      	b.n	8005aba <_svfiprintf_r+0x192>
 8005ad8:	ab03      	add	r3, sp, #12
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	462a      	mov	r2, r5
 8005ade:	4638      	mov	r0, r7
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <_svfiprintf_r+0x1f8>)
 8005ae2:	a904      	add	r1, sp, #16
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	1c42      	adds	r2, r0, #1
 8005aea:	4606      	mov	r6, r0
 8005aec:	d1d6      	bne.n	8005a9c <_svfiprintf_r+0x174>
 8005aee:	89ab      	ldrh	r3, [r5, #12]
 8005af0:	065b      	lsls	r3, r3, #25
 8005af2:	f53f af2d 	bmi.w	8005950 <_svfiprintf_r+0x28>
 8005af6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af8:	b01d      	add	sp, #116	; 0x74
 8005afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afe:	ab03      	add	r3, sp, #12
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	462a      	mov	r2, r5
 8005b04:	4638      	mov	r0, r7
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <_svfiprintf_r+0x1f8>)
 8005b08:	a904      	add	r1, sp, #16
 8005b0a:	f000 f87d 	bl	8005c08 <_printf_i>
 8005b0e:	e7eb      	b.n	8005ae8 <_svfiprintf_r+0x1c0>
 8005b10:	08006dfa 	.word	0x08006dfa
 8005b14:	08006e00 	.word	0x08006e00
 8005b18:	08006e04 	.word	0x08006e04
 8005b1c:	00000000 	.word	0x00000000
 8005b20:	08005875 	.word	0x08005875

08005b24 <_printf_common>:
 8005b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	4616      	mov	r6, r2
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	688a      	ldr	r2, [r1, #8]
 8005b2e:	690b      	ldr	r3, [r1, #16]
 8005b30:	4607      	mov	r7, r0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfb8      	it	lt
 8005b36:	4613      	movlt	r3, r2
 8005b38:	6033      	str	r3, [r6, #0]
 8005b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b44:	b10a      	cbz	r2, 8005b4a <_printf_common+0x26>
 8005b46:	3301      	adds	r3, #1
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	0699      	lsls	r1, r3, #26
 8005b4e:	bf42      	ittt	mi
 8005b50:	6833      	ldrmi	r3, [r6, #0]
 8005b52:	3302      	addmi	r3, #2
 8005b54:	6033      	strmi	r3, [r6, #0]
 8005b56:	6825      	ldr	r5, [r4, #0]
 8005b58:	f015 0506 	ands.w	r5, r5, #6
 8005b5c:	d106      	bne.n	8005b6c <_printf_common+0x48>
 8005b5e:	f104 0a19 	add.w	sl, r4, #25
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	6832      	ldr	r2, [r6, #0]
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	dc2b      	bgt.n	8005bc4 <_printf_common+0xa0>
 8005b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b70:	1e13      	subs	r3, r2, #0
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	0692      	lsls	r2, r2, #26
 8005b7a:	d430      	bmi.n	8005bde <_printf_common+0xba>
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d023      	beq.n	8005bd2 <_printf_common+0xae>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	6922      	ldr	r2, [r4, #16]
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	bf14      	ite	ne
 8005b96:	2500      	movne	r5, #0
 8005b98:	6833      	ldreq	r3, [r6, #0]
 8005b9a:	f04f 0600 	mov.w	r6, #0
 8005b9e:	bf08      	it	eq
 8005ba0:	68e5      	ldreq	r5, [r4, #12]
 8005ba2:	f104 041a 	add.w	r4, r4, #26
 8005ba6:	bf08      	it	eq
 8005ba8:	1aed      	subeq	r5, r5, r3
 8005baa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005bae:	bf08      	it	eq
 8005bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	bfc4      	itt	gt
 8005bb8:	1a9b      	subgt	r3, r3, r2
 8005bba:	18ed      	addgt	r5, r5, r3
 8005bbc:	42b5      	cmp	r5, r6
 8005bbe:	d11a      	bne.n	8005bf6 <_printf_common+0xd2>
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	e008      	b.n	8005bd6 <_printf_common+0xb2>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c0      	blx	r8
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d103      	bne.n	8005bda <_printf_common+0xb6>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bda:	3501      	adds	r5, #1
 8005bdc:	e7c1      	b.n	8005b62 <_printf_common+0x3e>
 8005bde:	2030      	movs	r0, #48	; 0x30
 8005be0:	18e1      	adds	r1, r4, r3
 8005be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bec:	4422      	add	r2, r4
 8005bee:	3302      	adds	r3, #2
 8005bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf4:	e7c2      	b.n	8005b7c <_printf_common+0x58>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	47c0      	blx	r8
 8005c00:	3001      	adds	r0, #1
 8005c02:	d0e6      	beq.n	8005bd2 <_printf_common+0xae>
 8005c04:	3601      	adds	r6, #1
 8005c06:	e7d9      	b.n	8005bbc <_printf_common+0x98>

08005c08 <_printf_i>:
 8005c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	7e0f      	ldrb	r7, [r1, #24]
 8005c0e:	4691      	mov	r9, r2
 8005c10:	2f78      	cmp	r7, #120	; 0x78
 8005c12:	4680      	mov	r8, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	469a      	mov	sl, r3
 8005c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c1e:	d807      	bhi.n	8005c30 <_printf_i+0x28>
 8005c20:	2f62      	cmp	r7, #98	; 0x62
 8005c22:	d80a      	bhi.n	8005c3a <_printf_i+0x32>
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	f000 80d5 	beq.w	8005dd4 <_printf_i+0x1cc>
 8005c2a:	2f58      	cmp	r7, #88	; 0x58
 8005c2c:	f000 80c1 	beq.w	8005db2 <_printf_i+0x1aa>
 8005c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c38:	e03a      	b.n	8005cb0 <_printf_i+0xa8>
 8005c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c3e:	2b15      	cmp	r3, #21
 8005c40:	d8f6      	bhi.n	8005c30 <_printf_i+0x28>
 8005c42:	a101      	add	r1, pc, #4	; (adr r1, 8005c48 <_printf_i+0x40>)
 8005c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c48:	08005ca1 	.word	0x08005ca1
 8005c4c:	08005cb5 	.word	0x08005cb5
 8005c50:	08005c31 	.word	0x08005c31
 8005c54:	08005c31 	.word	0x08005c31
 8005c58:	08005c31 	.word	0x08005c31
 8005c5c:	08005c31 	.word	0x08005c31
 8005c60:	08005cb5 	.word	0x08005cb5
 8005c64:	08005c31 	.word	0x08005c31
 8005c68:	08005c31 	.word	0x08005c31
 8005c6c:	08005c31 	.word	0x08005c31
 8005c70:	08005c31 	.word	0x08005c31
 8005c74:	08005dbb 	.word	0x08005dbb
 8005c78:	08005ce1 	.word	0x08005ce1
 8005c7c:	08005d75 	.word	0x08005d75
 8005c80:	08005c31 	.word	0x08005c31
 8005c84:	08005c31 	.word	0x08005c31
 8005c88:	08005ddd 	.word	0x08005ddd
 8005c8c:	08005c31 	.word	0x08005c31
 8005c90:	08005ce1 	.word	0x08005ce1
 8005c94:	08005c31 	.word	0x08005c31
 8005c98:	08005c31 	.word	0x08005c31
 8005c9c:	08005d7d 	.word	0x08005d7d
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	602a      	str	r2, [r5, #0]
 8005ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0a0      	b.n	8005df6 <_printf_i+0x1ee>
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	0607      	lsls	r7, r0, #24
 8005cba:	f103 0104 	add.w	r1, r3, #4
 8005cbe:	6029      	str	r1, [r5, #0]
 8005cc0:	d501      	bpl.n	8005cc6 <_printf_i+0xbe>
 8005cc2:	681e      	ldr	r6, [r3, #0]
 8005cc4:	e003      	b.n	8005cce <_printf_i+0xc6>
 8005cc6:	0646      	lsls	r6, r0, #25
 8005cc8:	d5fb      	bpl.n	8005cc2 <_printf_i+0xba>
 8005cca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	da03      	bge.n	8005cda <_printf_i+0xd2>
 8005cd2:	232d      	movs	r3, #45	; 0x2d
 8005cd4:	4276      	negs	r6, r6
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cda:	230a      	movs	r3, #10
 8005cdc:	4859      	ldr	r0, [pc, #356]	; (8005e44 <_printf_i+0x23c>)
 8005cde:	e012      	b.n	8005d06 <_printf_i+0xfe>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	1d19      	adds	r1, r3, #4
 8005ce6:	6029      	str	r1, [r5, #0]
 8005ce8:	0605      	lsls	r5, r0, #24
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0xe8>
 8005cec:	681e      	ldr	r6, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <_printf_i+0xee>
 8005cf0:	0641      	lsls	r1, r0, #25
 8005cf2:	d5fb      	bpl.n	8005cec <_printf_i+0xe4>
 8005cf4:	881e      	ldrh	r6, [r3, #0]
 8005cf6:	2f6f      	cmp	r7, #111	; 0x6f
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2308      	moveq	r3, #8
 8005cfc:	230a      	movne	r3, #10
 8005cfe:	4851      	ldr	r0, [pc, #324]	; (8005e44 <_printf_i+0x23c>)
 8005d00:	2100      	movs	r1, #0
 8005d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d06:	6865      	ldr	r5, [r4, #4]
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	bfa8      	it	ge
 8005d0c:	6821      	ldrge	r1, [r4, #0]
 8005d0e:	60a5      	str	r5, [r4, #8]
 8005d10:	bfa4      	itt	ge
 8005d12:	f021 0104 	bicge.w	r1, r1, #4
 8005d16:	6021      	strge	r1, [r4, #0]
 8005d18:	b90e      	cbnz	r6, 8005d1e <_printf_i+0x116>
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	d04b      	beq.n	8005db6 <_printf_i+0x1ae>
 8005d1e:	4615      	mov	r5, r2
 8005d20:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d24:	fb03 6711 	mls	r7, r3, r1, r6
 8005d28:	5dc7      	ldrb	r7, [r0, r7]
 8005d2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d2e:	4637      	mov	r7, r6
 8005d30:	42bb      	cmp	r3, r7
 8005d32:	460e      	mov	r6, r1
 8005d34:	d9f4      	bls.n	8005d20 <_printf_i+0x118>
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d10b      	bne.n	8005d52 <_printf_i+0x14a>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	07de      	lsls	r6, r3, #31
 8005d3e:	d508      	bpl.n	8005d52 <_printf_i+0x14a>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	6861      	ldr	r1, [r4, #4]
 8005d44:	4299      	cmp	r1, r3
 8005d46:	bfde      	ittt	le
 8005d48:	2330      	movle	r3, #48	; 0x30
 8005d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d52:	1b52      	subs	r2, r2, r5
 8005d54:	6122      	str	r2, [r4, #16]
 8005d56:	464b      	mov	r3, r9
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	aa03      	add	r2, sp, #12
 8005d62:	f7ff fedf 	bl	8005b24 <_printf_common>
 8005d66:	3001      	adds	r0, #1
 8005d68:	d14a      	bne.n	8005e00 <_printf_i+0x1f8>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	b004      	add	sp, #16
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	f043 0320 	orr.w	r3, r3, #32
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	2778      	movs	r7, #120	; 0x78
 8005d7e:	4832      	ldr	r0, [pc, #200]	; (8005e48 <_printf_i+0x240>)
 8005d80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	061f      	lsls	r7, r3, #24
 8005d8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d8e:	d402      	bmi.n	8005d96 <_printf_i+0x18e>
 8005d90:	065f      	lsls	r7, r3, #25
 8005d92:	bf48      	it	mi
 8005d94:	b2b6      	uxthmi	r6, r6
 8005d96:	07df      	lsls	r7, r3, #31
 8005d98:	bf48      	it	mi
 8005d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9e:	6029      	str	r1, [r5, #0]
 8005da0:	bf48      	it	mi
 8005da2:	6023      	strmi	r3, [r4, #0]
 8005da4:	b91e      	cbnz	r6, 8005dae <_printf_i+0x1a6>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f023 0320 	bic.w	r3, r3, #32
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	2310      	movs	r3, #16
 8005db0:	e7a6      	b.n	8005d00 <_printf_i+0xf8>
 8005db2:	4824      	ldr	r0, [pc, #144]	; (8005e44 <_printf_i+0x23c>)
 8005db4:	e7e4      	b.n	8005d80 <_printf_i+0x178>
 8005db6:	4615      	mov	r5, r2
 8005db8:	e7bd      	b.n	8005d36 <_printf_i+0x12e>
 8005dba:	682b      	ldr	r3, [r5, #0]
 8005dbc:	6826      	ldr	r6, [r4, #0]
 8005dbe:	1d18      	adds	r0, r3, #4
 8005dc0:	6961      	ldr	r1, [r4, #20]
 8005dc2:	6028      	str	r0, [r5, #0]
 8005dc4:	0635      	lsls	r5, r6, #24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	d501      	bpl.n	8005dce <_printf_i+0x1c6>
 8005dca:	6019      	str	r1, [r3, #0]
 8005dcc:	e002      	b.n	8005dd4 <_printf_i+0x1cc>
 8005dce:	0670      	lsls	r0, r6, #25
 8005dd0:	d5fb      	bpl.n	8005dca <_printf_i+0x1c2>
 8005dd2:	8019      	strh	r1, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4615      	mov	r5, r2
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	e7bc      	b.n	8005d56 <_printf_i+0x14e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	2100      	movs	r1, #0
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	602a      	str	r2, [r5, #0]
 8005de4:	681d      	ldr	r5, [r3, #0]
 8005de6:	6862      	ldr	r2, [r4, #4]
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 f859 	bl	8005ea0 <memchr>
 8005dee:	b108      	cbz	r0, 8005df4 <_printf_i+0x1ec>
 8005df0:	1b40      	subs	r0, r0, r5
 8005df2:	6060      	str	r0, [r4, #4]
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dfe:	e7aa      	b.n	8005d56 <_printf_i+0x14e>
 8005e00:	462a      	mov	r2, r5
 8005e02:	4649      	mov	r1, r9
 8005e04:	4640      	mov	r0, r8
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	47d0      	blx	sl
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0ad      	beq.n	8005d6a <_printf_i+0x162>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	079b      	lsls	r3, r3, #30
 8005e12:	d413      	bmi.n	8005e3c <_printf_i+0x234>
 8005e14:	68e0      	ldr	r0, [r4, #12]
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	4298      	cmp	r0, r3
 8005e1a:	bfb8      	it	lt
 8005e1c:	4618      	movlt	r0, r3
 8005e1e:	e7a6      	b.n	8005d6e <_printf_i+0x166>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4632      	mov	r2, r6
 8005e24:	4649      	mov	r1, r9
 8005e26:	4640      	mov	r0, r8
 8005e28:	47d0      	blx	sl
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d09d      	beq.n	8005d6a <_printf_i+0x162>
 8005e2e:	3501      	adds	r5, #1
 8005e30:	68e3      	ldr	r3, [r4, #12]
 8005e32:	9903      	ldr	r1, [sp, #12]
 8005e34:	1a5b      	subs	r3, r3, r1
 8005e36:	42ab      	cmp	r3, r5
 8005e38:	dcf2      	bgt.n	8005e20 <_printf_i+0x218>
 8005e3a:	e7eb      	b.n	8005e14 <_printf_i+0x20c>
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	f104 0619 	add.w	r6, r4, #25
 8005e42:	e7f5      	b.n	8005e30 <_printf_i+0x228>
 8005e44:	08006e0b 	.word	0x08006e0b
 8005e48:	08006e1c 	.word	0x08006e1c

08005e4c <memmove>:
 8005e4c:	4288      	cmp	r0, r1
 8005e4e:	b510      	push	{r4, lr}
 8005e50:	eb01 0402 	add.w	r4, r1, r2
 8005e54:	d902      	bls.n	8005e5c <memmove+0x10>
 8005e56:	4284      	cmp	r4, r0
 8005e58:	4623      	mov	r3, r4
 8005e5a:	d807      	bhi.n	8005e6c <memmove+0x20>
 8005e5c:	1e43      	subs	r3, r0, #1
 8005e5e:	42a1      	cmp	r1, r4
 8005e60:	d008      	beq.n	8005e74 <memmove+0x28>
 8005e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e6a:	e7f8      	b.n	8005e5e <memmove+0x12>
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	4402      	add	r2, r0
 8005e70:	428a      	cmp	r2, r1
 8005e72:	d100      	bne.n	8005e76 <memmove+0x2a>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e7e:	e7f7      	b.n	8005e70 <memmove+0x24>

08005e80 <_sbrk_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	2300      	movs	r3, #0
 8005e84:	4d05      	ldr	r5, [pc, #20]	; (8005e9c <_sbrk_r+0x1c>)
 8005e86:	4604      	mov	r4, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	f7fb fec4 	bl	8001c18 <_sbrk>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_sbrk_r+0x1a>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_sbrk_r+0x1a>
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	20000460 	.word	0x20000460

08005ea0 <memchr>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	b2c9      	uxtb	r1, r1
 8005ea6:	4402      	add	r2, r0
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	d101      	bne.n	8005eb2 <memchr+0x12>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e003      	b.n	8005eba <memchr+0x1a>
 8005eb2:	7804      	ldrb	r4, [r0, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	428c      	cmp	r4, r1
 8005eb8:	d1f6      	bne.n	8005ea8 <memchr+0x8>
 8005eba:	bd10      	pop	{r4, pc}

08005ebc <memcpy>:
 8005ebc:	440a      	add	r2, r1
 8005ebe:	4291      	cmp	r1, r2
 8005ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec4:	d100      	bne.n	8005ec8 <memcpy+0xc>
 8005ec6:	4770      	bx	lr
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ece:	4291      	cmp	r1, r2
 8005ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed4:	d1f9      	bne.n	8005eca <memcpy+0xe>
 8005ed6:	bd10      	pop	{r4, pc}

08005ed8 <_realloc_r>:
 8005ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005edc:	4680      	mov	r8, r0
 8005ede:	4614      	mov	r4, r2
 8005ee0:	460e      	mov	r6, r1
 8005ee2:	b921      	cbnz	r1, 8005eee <_realloc_r+0x16>
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	f7ff bc37 	b.w	800575c <_malloc_r>
 8005eee:	b92a      	cbnz	r2, 8005efc <_realloc_r+0x24>
 8005ef0:	f7ff fbcc 	bl	800568c <_free_r>
 8005ef4:	4625      	mov	r5, r4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005efc:	f000 f81b 	bl	8005f36 <_malloc_usable_size_r>
 8005f00:	4284      	cmp	r4, r0
 8005f02:	4607      	mov	r7, r0
 8005f04:	d802      	bhi.n	8005f0c <_realloc_r+0x34>
 8005f06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f0a:	d812      	bhi.n	8005f32 <_realloc_r+0x5a>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f7ff fc24 	bl	800575c <_malloc_r>
 8005f14:	4605      	mov	r5, r0
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d0ed      	beq.n	8005ef6 <_realloc_r+0x1e>
 8005f1a:	42bc      	cmp	r4, r7
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4631      	mov	r1, r6
 8005f20:	bf28      	it	cs
 8005f22:	463a      	movcs	r2, r7
 8005f24:	f7ff ffca 	bl	8005ebc <memcpy>
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f7ff fbae 	bl	800568c <_free_r>
 8005f30:	e7e1      	b.n	8005ef6 <_realloc_r+0x1e>
 8005f32:	4635      	mov	r5, r6
 8005f34:	e7df      	b.n	8005ef6 <_realloc_r+0x1e>

08005f36 <_malloc_usable_size_r>:
 8005f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f3a:	1f18      	subs	r0, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfbc      	itt	lt
 8005f40:	580b      	ldrlt	r3, [r1, r0]
 8005f42:	18c0      	addlt	r0, r0, r3
 8005f44:	4770      	bx	lr
	...

08005f48 <pow>:
 8005f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	461d      	mov	r5, r3
 8005f50:	4680      	mov	r8, r0
 8005f52:	4689      	mov	r9, r1
 8005f54:	f000 f868 	bl	8006028 <__ieee754_pow>
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460f      	mov	r7, r1
 8005f5e:	462b      	mov	r3, r5
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa fd52 	bl	8000a0c <__aeabi_dcmpun>
 8005f68:	bbc8      	cbnz	r0, 8005fde <pow+0x96>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa fd19 	bl	80009a8 <__aeabi_dcmpeq>
 8005f76:	b1b8      	cbz	r0, 8005fa8 <pow+0x60>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d141      	bne.n	800600c <pow+0xc4>
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f000 f844 	bl	8006018 <finite>
 8005f90:	b328      	cbz	r0, 8005fde <pow+0x96>
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa fd0f 	bl	80009bc <__aeabi_dcmplt>
 8005f9e:	b1f0      	cbz	r0, 8005fde <pow+0x96>
 8005fa0:	f7ff fb48 	bl	8005634 <__errno>
 8005fa4:	2322      	movs	r3, #34	; 0x22
 8005fa6:	e019      	b.n	8005fdc <pow+0x94>
 8005fa8:	4630      	mov	r0, r6
 8005faa:	4639      	mov	r1, r7
 8005fac:	f000 f834 	bl	8006018 <finite>
 8005fb0:	b9c8      	cbnz	r0, 8005fe6 <pow+0x9e>
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f000 f82f 	bl	8006018 <finite>
 8005fba:	b1a0      	cbz	r0, 8005fe6 <pow+0x9e>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f000 f82a 	bl	8006018 <finite>
 8005fc4:	b178      	cbz	r0, 8005fe6 <pow+0x9e>
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	463b      	mov	r3, r7
 8005fca:	4630      	mov	r0, r6
 8005fcc:	4639      	mov	r1, r7
 8005fce:	f7fa fd1d 	bl	8000a0c <__aeabi_dcmpun>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d0e4      	beq.n	8005fa0 <pow+0x58>
 8005fd6:	f7ff fb2d 	bl	8005634 <__errno>
 8005fda:	2321      	movs	r3, #33	; 0x21
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa fcdb 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d0f3      	beq.n	8005fde <pow+0x96>
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	f000 f80d 	bl	8006018 <finite>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0ed      	beq.n	8005fde <pow+0x96>
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f000 f807 	bl	8006018 <finite>
 800600a:	e7c8      	b.n	8005f9e <pow+0x56>
 800600c:	2600      	movs	r6, #0
 800600e:	4f01      	ldr	r7, [pc, #4]	; (8006014 <pow+0xcc>)
 8006010:	e7e5      	b.n	8005fde <pow+0x96>
 8006012:	bf00      	nop
 8006014:	3ff00000 	.word	0x3ff00000

08006018 <finite>:
 8006018:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800601c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006020:	0fc0      	lsrs	r0, r0, #31
 8006022:	4770      	bx	lr
 8006024:	0000      	movs	r0, r0
	...

08006028 <__ieee754_pow>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	b093      	sub	sp, #76	; 0x4c
 800602e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006032:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006036:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800603a:	4689      	mov	r9, r1
 800603c:	ea56 0102 	orrs.w	r1, r6, r2
 8006040:	4680      	mov	r8, r0
 8006042:	d111      	bne.n	8006068 <__ieee754_pow+0x40>
 8006044:	1803      	adds	r3, r0, r0
 8006046:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800604a:	4152      	adcs	r2, r2
 800604c:	4299      	cmp	r1, r3
 800604e:	4b82      	ldr	r3, [pc, #520]	; (8006258 <__ieee754_pow+0x230>)
 8006050:	4193      	sbcs	r3, r2
 8006052:	f080 84ba 	bcs.w	80069ca <__ieee754_pow+0x9a2>
 8006056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa f885 	bl	800016c <__adddf3>
 8006062:	4683      	mov	fp, r0
 8006064:	468c      	mov	ip, r1
 8006066:	e06f      	b.n	8006148 <__ieee754_pow+0x120>
 8006068:	4b7c      	ldr	r3, [pc, #496]	; (800625c <__ieee754_pow+0x234>)
 800606a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800606e:	429c      	cmp	r4, r3
 8006070:	464d      	mov	r5, r9
 8006072:	4682      	mov	sl, r0
 8006074:	dc06      	bgt.n	8006084 <__ieee754_pow+0x5c>
 8006076:	d101      	bne.n	800607c <__ieee754_pow+0x54>
 8006078:	2800      	cmp	r0, #0
 800607a:	d1ec      	bne.n	8006056 <__ieee754_pow+0x2e>
 800607c:	429e      	cmp	r6, r3
 800607e:	dc01      	bgt.n	8006084 <__ieee754_pow+0x5c>
 8006080:	d10f      	bne.n	80060a2 <__ieee754_pow+0x7a>
 8006082:	b172      	cbz	r2, 80060a2 <__ieee754_pow+0x7a>
 8006084:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006088:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800608c:	ea55 050a 	orrs.w	r5, r5, sl
 8006090:	d1e1      	bne.n	8006056 <__ieee754_pow+0x2e>
 8006092:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006096:	18db      	adds	r3, r3, r3
 8006098:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800609c:	4152      	adcs	r2, r2
 800609e:	429d      	cmp	r5, r3
 80060a0:	e7d5      	b.n	800604e <__ieee754_pow+0x26>
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	da39      	bge.n	800611a <__ieee754_pow+0xf2>
 80060a6:	4b6e      	ldr	r3, [pc, #440]	; (8006260 <__ieee754_pow+0x238>)
 80060a8:	429e      	cmp	r6, r3
 80060aa:	dc52      	bgt.n	8006152 <__ieee754_pow+0x12a>
 80060ac:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80060b0:	429e      	cmp	r6, r3
 80060b2:	f340 849d 	ble.w	80069f0 <__ieee754_pow+0x9c8>
 80060b6:	1533      	asrs	r3, r6, #20
 80060b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80060bc:	2b14      	cmp	r3, #20
 80060be:	dd0f      	ble.n	80060e0 <__ieee754_pow+0xb8>
 80060c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80060c4:	fa22 f103 	lsr.w	r1, r2, r3
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	4293      	cmp	r3, r2
 80060ce:	f040 848f 	bne.w	80069f0 <__ieee754_pow+0x9c8>
 80060d2:	f001 0101 	and.w	r1, r1, #1
 80060d6:	f1c1 0302 	rsb	r3, r1, #2
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	b182      	cbz	r2, 8006100 <__ieee754_pow+0xd8>
 80060de:	e05d      	b.n	800619c <__ieee754_pow+0x174>
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d159      	bne.n	8006198 <__ieee754_pow+0x170>
 80060e4:	f1c3 0314 	rsb	r3, r3, #20
 80060e8:	fa46 f103 	asr.w	r1, r6, r3
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	42b3      	cmp	r3, r6
 80060f2:	f040 847a 	bne.w	80069ea <__ieee754_pow+0x9c2>
 80060f6:	f001 0101 	and.w	r1, r1, #1
 80060fa:	f1c1 0302 	rsb	r3, r1, #2
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4b58      	ldr	r3, [pc, #352]	; (8006264 <__ieee754_pow+0x23c>)
 8006102:	429e      	cmp	r6, r3
 8006104:	d132      	bne.n	800616c <__ieee754_pow+0x144>
 8006106:	2f00      	cmp	r7, #0
 8006108:	f280 846b 	bge.w	80069e2 <__ieee754_pow+0x9ba>
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	2000      	movs	r0, #0
 8006112:	4954      	ldr	r1, [pc, #336]	; (8006264 <__ieee754_pow+0x23c>)
 8006114:	f7fa fb0a 	bl	800072c <__aeabi_ddiv>
 8006118:	e7a3      	b.n	8006062 <__ieee754_pow+0x3a>
 800611a:	2300      	movs	r3, #0
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2a00      	cmp	r2, #0
 8006120:	d13c      	bne.n	800619c <__ieee754_pow+0x174>
 8006122:	4b4e      	ldr	r3, [pc, #312]	; (800625c <__ieee754_pow+0x234>)
 8006124:	429e      	cmp	r6, r3
 8006126:	d1eb      	bne.n	8006100 <__ieee754_pow+0xd8>
 8006128:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800612c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006130:	ea53 030a 	orrs.w	r3, r3, sl
 8006134:	f000 8449 	beq.w	80069ca <__ieee754_pow+0x9a2>
 8006138:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <__ieee754_pow+0x240>)
 800613a:	429c      	cmp	r4, r3
 800613c:	dd0b      	ble.n	8006156 <__ieee754_pow+0x12e>
 800613e:	2f00      	cmp	r7, #0
 8006140:	f2c0 8449 	blt.w	80069d6 <__ieee754_pow+0x9ae>
 8006144:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006148:	4658      	mov	r0, fp
 800614a:	4661      	mov	r1, ip
 800614c:	b013      	add	sp, #76	; 0x4c
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	2302      	movs	r3, #2
 8006154:	e7e2      	b.n	800611c <__ieee754_pow+0xf4>
 8006156:	2f00      	cmp	r7, #0
 8006158:	f04f 0b00 	mov.w	fp, #0
 800615c:	f04f 0c00 	mov.w	ip, #0
 8006160:	daf2      	bge.n	8006148 <__ieee754_pow+0x120>
 8006162:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006166:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800616a:	e7ed      	b.n	8006148 <__ieee754_pow+0x120>
 800616c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006170:	d106      	bne.n	8006180 <__ieee754_pow+0x158>
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	f7fa f9ad 	bl	80004d8 <__aeabi_dmul>
 800617e:	e770      	b.n	8006062 <__ieee754_pow+0x3a>
 8006180:	4b3a      	ldr	r3, [pc, #232]	; (800626c <__ieee754_pow+0x244>)
 8006182:	429f      	cmp	r7, r3
 8006184:	d10a      	bne.n	800619c <__ieee754_pow+0x174>
 8006186:	2d00      	cmp	r5, #0
 8006188:	db08      	blt.n	800619c <__ieee754_pow+0x174>
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	b013      	add	sp, #76	; 0x4c
 8006190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	f000 bd0a 	b.w	8006bac <__ieee754_sqrt>
 8006198:	2300      	movs	r3, #0
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f000 fc58 	bl	8006a54 <fabs>
 80061a4:	4683      	mov	fp, r0
 80061a6:	468c      	mov	ip, r1
 80061a8:	f1ba 0f00 	cmp.w	sl, #0
 80061ac:	d128      	bne.n	8006200 <__ieee754_pow+0x1d8>
 80061ae:	b124      	cbz	r4, 80061ba <__ieee754_pow+0x192>
 80061b0:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <__ieee754_pow+0x23c>)
 80061b2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d122      	bne.n	8006200 <__ieee754_pow+0x1d8>
 80061ba:	2f00      	cmp	r7, #0
 80061bc:	da07      	bge.n	80061ce <__ieee754_pow+0x1a6>
 80061be:	465a      	mov	r2, fp
 80061c0:	4663      	mov	r3, ip
 80061c2:	2000      	movs	r0, #0
 80061c4:	4927      	ldr	r1, [pc, #156]	; (8006264 <__ieee754_pow+0x23c>)
 80061c6:	f7fa fab1 	bl	800072c <__aeabi_ddiv>
 80061ca:	4683      	mov	fp, r0
 80061cc:	468c      	mov	ip, r1
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	daba      	bge.n	8006148 <__ieee754_pow+0x120>
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80061d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80061dc:	431c      	orrs	r4, r3
 80061de:	d108      	bne.n	80061f2 <__ieee754_pow+0x1ca>
 80061e0:	465a      	mov	r2, fp
 80061e2:	4663      	mov	r3, ip
 80061e4:	4658      	mov	r0, fp
 80061e6:	4661      	mov	r1, ip
 80061e8:	f7f9 ffbe 	bl	8000168 <__aeabi_dsub>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	e790      	b.n	8006114 <__ieee754_pow+0xec>
 80061f2:	9b00      	ldr	r3, [sp, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d1a7      	bne.n	8006148 <__ieee754_pow+0x120>
 80061f8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80061fc:	469c      	mov	ip, r3
 80061fe:	e7a3      	b.n	8006148 <__ieee754_pow+0x120>
 8006200:	0feb      	lsrs	r3, r5, #31
 8006202:	3b01      	subs	r3, #1
 8006204:	930c      	str	r3, [sp, #48]	; 0x30
 8006206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006208:	9b00      	ldr	r3, [sp, #0]
 800620a:	4313      	orrs	r3, r2
 800620c:	d104      	bne.n	8006218 <__ieee754_pow+0x1f0>
 800620e:	4642      	mov	r2, r8
 8006210:	464b      	mov	r3, r9
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	e7e7      	b.n	80061e8 <__ieee754_pow+0x1c0>
 8006218:	4b15      	ldr	r3, [pc, #84]	; (8006270 <__ieee754_pow+0x248>)
 800621a:	429e      	cmp	r6, r3
 800621c:	f340 80f6 	ble.w	800640c <__ieee754_pow+0x3e4>
 8006220:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006224:	429e      	cmp	r6, r3
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <__ieee754_pow+0x240>)
 8006228:	dd09      	ble.n	800623e <__ieee754_pow+0x216>
 800622a:	429c      	cmp	r4, r3
 800622c:	dc0c      	bgt.n	8006248 <__ieee754_pow+0x220>
 800622e:	2f00      	cmp	r7, #0
 8006230:	da0c      	bge.n	800624c <__ieee754_pow+0x224>
 8006232:	2000      	movs	r0, #0
 8006234:	b013      	add	sp, #76	; 0x4c
 8006236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623a:	f000 bcb2 	b.w	8006ba2 <__math_oflow>
 800623e:	429c      	cmp	r4, r3
 8006240:	dbf5      	blt.n	800622e <__ieee754_pow+0x206>
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <__ieee754_pow+0x23c>)
 8006244:	429c      	cmp	r4, r3
 8006246:	dd15      	ble.n	8006274 <__ieee754_pow+0x24c>
 8006248:	2f00      	cmp	r7, #0
 800624a:	dcf2      	bgt.n	8006232 <__ieee754_pow+0x20a>
 800624c:	2000      	movs	r0, #0
 800624e:	b013      	add	sp, #76	; 0x4c
 8006250:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	f000 bca0 	b.w	8006b98 <__math_uflow>
 8006258:	fff00000 	.word	0xfff00000
 800625c:	7ff00000 	.word	0x7ff00000
 8006260:	433fffff 	.word	0x433fffff
 8006264:	3ff00000 	.word	0x3ff00000
 8006268:	3fefffff 	.word	0x3fefffff
 800626c:	3fe00000 	.word	0x3fe00000
 8006270:	41e00000 	.word	0x41e00000
 8006274:	4661      	mov	r1, ip
 8006276:	2200      	movs	r2, #0
 8006278:	4658      	mov	r0, fp
 800627a:	4b5f      	ldr	r3, [pc, #380]	; (80063f8 <__ieee754_pow+0x3d0>)
 800627c:	f7f9 ff74 	bl	8000168 <__aeabi_dsub>
 8006280:	a355      	add	r3, pc, #340	; (adr r3, 80063d8 <__ieee754_pow+0x3b0>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	4604      	mov	r4, r0
 8006288:	460d      	mov	r5, r1
 800628a:	f7fa f925 	bl	80004d8 <__aeabi_dmul>
 800628e:	a354      	add	r3, pc, #336	; (adr r3, 80063e0 <__ieee754_pow+0x3b8>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	f7fa f91c 	bl	80004d8 <__aeabi_dmul>
 80062a0:	2200      	movs	r2, #0
 80062a2:	4682      	mov	sl, r0
 80062a4:	468b      	mov	fp, r1
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	4b54      	ldr	r3, [pc, #336]	; (80063fc <__ieee754_pow+0x3d4>)
 80062ac:	f7fa f914 	bl	80004d8 <__aeabi_dmul>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	a14c      	add	r1, pc, #304	; (adr r1, 80063e8 <__ieee754_pow+0x3c0>)
 80062b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ba:	f7f9 ff55 	bl	8000168 <__aeabi_dsub>
 80062be:	4622      	mov	r2, r4
 80062c0:	462b      	mov	r3, r5
 80062c2:	f7fa f909 	bl	80004d8 <__aeabi_dmul>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	2000      	movs	r0, #0
 80062cc:	494c      	ldr	r1, [pc, #304]	; (8006400 <__ieee754_pow+0x3d8>)
 80062ce:	f7f9 ff4b 	bl	8000168 <__aeabi_dsub>
 80062d2:	4622      	mov	r2, r4
 80062d4:	462b      	mov	r3, r5
 80062d6:	4680      	mov	r8, r0
 80062d8:	4689      	mov	r9, r1
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7fa f8fb 	bl	80004d8 <__aeabi_dmul>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7fa f8f5 	bl	80004d8 <__aeabi_dmul>
 80062ee:	a340      	add	r3, pc, #256	; (adr r3, 80063f0 <__ieee754_pow+0x3c8>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7fa f8f0 	bl	80004d8 <__aeabi_dmul>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4650      	mov	r0, sl
 80062fe:	4659      	mov	r1, fp
 8006300:	f7f9 ff32 	bl	8000168 <__aeabi_dsub>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7f9 ff2c 	bl	800016c <__adddf3>
 8006314:	2000      	movs	r0, #0
 8006316:	4632      	mov	r2, r6
 8006318:	463b      	mov	r3, r7
 800631a:	4682      	mov	sl, r0
 800631c:	468b      	mov	fp, r1
 800631e:	f7f9 ff23 	bl	8000168 <__aeabi_dsub>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7f9 ff1d 	bl	8000168 <__aeabi_dsub>
 800632e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006332:	9b00      	ldr	r3, [sp, #0]
 8006334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006336:	3b01      	subs	r3, #1
 8006338:	4313      	orrs	r3, r2
 800633a:	f04f 0600 	mov.w	r6, #0
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	bf0c      	ite	eq
 8006344:	4b2f      	ldreq	r3, [pc, #188]	; (8006404 <__ieee754_pow+0x3dc>)
 8006346:	4b2c      	ldrne	r3, [pc, #176]	; (80063f8 <__ieee754_pow+0x3d0>)
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006350:	e9cd 2300 	strd	r2, r3, [sp]
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	f7f9 ff06 	bl	8000168 <__aeabi_dsub>
 800635c:	4652      	mov	r2, sl
 800635e:	465b      	mov	r3, fp
 8006360:	f7fa f8ba 	bl	80004d8 <__aeabi_dmul>
 8006364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006368:	4680      	mov	r8, r0
 800636a:	4689      	mov	r9, r1
 800636c:	4620      	mov	r0, r4
 800636e:	4629      	mov	r1, r5
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7f9 fef6 	bl	800016c <__adddf3>
 8006380:	4632      	mov	r2, r6
 8006382:	463b      	mov	r3, r7
 8006384:	4680      	mov	r8, r0
 8006386:	4689      	mov	r9, r1
 8006388:	4650      	mov	r0, sl
 800638a:	4659      	mov	r1, fp
 800638c:	f7fa f8a4 	bl	80004d8 <__aeabi_dmul>
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
 8006394:	460b      	mov	r3, r1
 8006396:	4602      	mov	r2, r0
 8006398:	4649      	mov	r1, r9
 800639a:	4640      	mov	r0, r8
 800639c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80063a0:	f7f9 fee4 	bl	800016c <__adddf3>
 80063a4:	4b18      	ldr	r3, [pc, #96]	; (8006408 <__ieee754_pow+0x3e0>)
 80063a6:	4682      	mov	sl, r0
 80063a8:	4299      	cmp	r1, r3
 80063aa:	460f      	mov	r7, r1
 80063ac:	460e      	mov	r6, r1
 80063ae:	f340 82e7 	ble.w	8006980 <__ieee754_pow+0x958>
 80063b2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80063b6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80063ba:	4303      	orrs	r3, r0
 80063bc:	f000 81e2 	beq.w	8006784 <__ieee754_pow+0x75c>
 80063c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2300      	movs	r3, #0
 80063c8:	f7fa faf8 	bl	80009bc <__aeabi_dcmplt>
 80063cc:	3800      	subs	r0, #0
 80063ce:	bf18      	it	ne
 80063d0:	2001      	movne	r0, #1
 80063d2:	e72f      	b.n	8006234 <__ieee754_pow+0x20c>
 80063d4:	f3af 8000 	nop.w
 80063d8:	60000000 	.word	0x60000000
 80063dc:	3ff71547 	.word	0x3ff71547
 80063e0:	f85ddf44 	.word	0xf85ddf44
 80063e4:	3e54ae0b 	.word	0x3e54ae0b
 80063e8:	55555555 	.word	0x55555555
 80063ec:	3fd55555 	.word	0x3fd55555
 80063f0:	652b82fe 	.word	0x652b82fe
 80063f4:	3ff71547 	.word	0x3ff71547
 80063f8:	3ff00000 	.word	0x3ff00000
 80063fc:	3fd00000 	.word	0x3fd00000
 8006400:	3fe00000 	.word	0x3fe00000
 8006404:	bff00000 	.word	0xbff00000
 8006408:	408fffff 	.word	0x408fffff
 800640c:	4bd4      	ldr	r3, [pc, #848]	; (8006760 <__ieee754_pow+0x738>)
 800640e:	2200      	movs	r2, #0
 8006410:	402b      	ands	r3, r5
 8006412:	b943      	cbnz	r3, 8006426 <__ieee754_pow+0x3fe>
 8006414:	4658      	mov	r0, fp
 8006416:	4661      	mov	r1, ip
 8006418:	4bd2      	ldr	r3, [pc, #840]	; (8006764 <__ieee754_pow+0x73c>)
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006422:	4683      	mov	fp, r0
 8006424:	460c      	mov	r4, r1
 8006426:	1523      	asrs	r3, r4, #20
 8006428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800642c:	4413      	add	r3, r2
 800642e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006430:	4bcd      	ldr	r3, [pc, #820]	; (8006768 <__ieee754_pow+0x740>)
 8006432:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006436:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800643a:	429c      	cmp	r4, r3
 800643c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006440:	dd08      	ble.n	8006454 <__ieee754_pow+0x42c>
 8006442:	4bca      	ldr	r3, [pc, #808]	; (800676c <__ieee754_pow+0x744>)
 8006444:	429c      	cmp	r4, r3
 8006446:	f340 8164 	ble.w	8006712 <__ieee754_pow+0x6ea>
 800644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006450:	3301      	adds	r3, #1
 8006452:	930b      	str	r3, [sp, #44]	; 0x2c
 8006454:	2600      	movs	r6, #0
 8006456:	00f3      	lsls	r3, r6, #3
 8006458:	930d      	str	r3, [sp, #52]	; 0x34
 800645a:	4bc5      	ldr	r3, [pc, #788]	; (8006770 <__ieee754_pow+0x748>)
 800645c:	4658      	mov	r0, fp
 800645e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006462:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006466:	4629      	mov	r1, r5
 8006468:	461a      	mov	r2, r3
 800646a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800646e:	4623      	mov	r3, r4
 8006470:	f7f9 fe7a 	bl	8000168 <__aeabi_dsub>
 8006474:	46da      	mov	sl, fp
 8006476:	462b      	mov	r3, r5
 8006478:	4652      	mov	r2, sl
 800647a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800647e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006482:	f7f9 fe73 	bl	800016c <__adddf3>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	2000      	movs	r0, #0
 800648c:	49b9      	ldr	r1, [pc, #740]	; (8006774 <__ieee754_pow+0x74c>)
 800648e:	f7fa f94d 	bl	800072c <__aeabi_ddiv>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800649a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800649e:	f7fa f81b 	bl	80004d8 <__aeabi_dmul>
 80064a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80064aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064ae:	2300      	movs	r3, #0
 80064b0:	2200      	movs	r2, #0
 80064b2:	46ab      	mov	fp, r5
 80064b4:	106d      	asrs	r5, r5, #1
 80064b6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80064c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80064c4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	4614      	mov	r4, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	f7fa f802 	bl	80004d8 <__aeabi_dmul>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064dc:	f7f9 fe44 	bl	8000168 <__aeabi_dsub>
 80064e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	4620      	mov	r0, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	f7f9 fe3c 	bl	8000168 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4650      	mov	r0, sl
 80064f6:	4659      	mov	r1, fp
 80064f8:	f7f9 fe36 	bl	8000168 <__aeabi_dsub>
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	f7f9 ffea 	bl	80004d8 <__aeabi_dmul>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7f9 fe2c 	bl	8000168 <__aeabi_dsub>
 8006510:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006514:	f7f9 ffe0 	bl	80004d8 <__aeabi_dmul>
 8006518:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800651c:	4682      	mov	sl, r0
 800651e:	468b      	mov	fp, r1
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	a37b      	add	r3, pc, #492	; (adr r3, 8006718 <__ieee754_pow+0x6f0>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	f7f9 ffd1 	bl	80004d8 <__aeabi_dmul>
 8006536:	a37a      	add	r3, pc, #488	; (adr r3, 8006720 <__ieee754_pow+0x6f8>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 fe16 	bl	800016c <__adddf3>
 8006540:	4622      	mov	r2, r4
 8006542:	462b      	mov	r3, r5
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	a377      	add	r3, pc, #476	; (adr r3, 8006728 <__ieee754_pow+0x700>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 fe0d 	bl	800016c <__adddf3>
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f7f9 ffbf 	bl	80004d8 <__aeabi_dmul>
 800655a:	a375      	add	r3, pc, #468	; (adr r3, 8006730 <__ieee754_pow+0x708>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7f9 fe04 	bl	800016c <__adddf3>
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	f7f9 ffb6 	bl	80004d8 <__aeabi_dmul>
 800656c:	a372      	add	r3, pc, #456	; (adr r3, 8006738 <__ieee754_pow+0x710>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f7f9 fdfb 	bl	800016c <__adddf3>
 8006576:	4622      	mov	r2, r4
 8006578:	462b      	mov	r3, r5
 800657a:	f7f9 ffad 	bl	80004d8 <__aeabi_dmul>
 800657e:	a370      	add	r3, pc, #448	; (adr r3, 8006740 <__ieee754_pow+0x718>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7f9 fdf2 	bl	800016c <__adddf3>
 8006588:	4622      	mov	r2, r4
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	462b      	mov	r3, r5
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 ffa0 	bl	80004d8 <__aeabi_dmul>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7f9 ff9a 	bl	80004d8 <__aeabi_dmul>
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ac:	4642      	mov	r2, r8
 80065ae:	464b      	mov	r3, r9
 80065b0:	f7f9 fddc 	bl	800016c <__adddf3>
 80065b4:	4652      	mov	r2, sl
 80065b6:	465b      	mov	r3, fp
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	f7f9 fdd4 	bl	800016c <__adddf3>
 80065c4:	4642      	mov	r2, r8
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	464b      	mov	r3, r9
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7f9 ff82 	bl	80004d8 <__aeabi_dmul>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065dc:	2200      	movs	r2, #0
 80065de:	4b66      	ldr	r3, [pc, #408]	; (8006778 <__ieee754_pow+0x750>)
 80065e0:	f7f9 fdc4 	bl	800016c <__adddf3>
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	f7f9 fdc0 	bl	800016c <__adddf3>
 80065ec:	2400      	movs	r4, #0
 80065ee:	460d      	mov	r5, r1
 80065f0:	4622      	mov	r2, r4
 80065f2:	460b      	mov	r3, r1
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7f9 ff6e 	bl	80004d8 <__aeabi_dmul>
 80065fc:	2200      	movs	r2, #0
 80065fe:	4680      	mov	r8, r0
 8006600:	4689      	mov	r9, r1
 8006602:	4620      	mov	r0, r4
 8006604:	4629      	mov	r1, r5
 8006606:	4b5c      	ldr	r3, [pc, #368]	; (8006778 <__ieee754_pow+0x750>)
 8006608:	f7f9 fdae 	bl	8000168 <__aeabi_dsub>
 800660c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006610:	f7f9 fdaa 	bl	8000168 <__aeabi_dsub>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7f9 fda4 	bl	8000168 <__aeabi_dsub>
 8006620:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006624:	f7f9 ff58 	bl	80004d8 <__aeabi_dmul>
 8006628:	4622      	mov	r2, r4
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	462b      	mov	r3, r5
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	f7f9 ff50 	bl	80004d8 <__aeabi_dmul>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	f7f9 fd94 	bl	800016c <__adddf3>
 8006644:	2400      	movs	r4, #0
 8006646:	4606      	mov	r6, r0
 8006648:	460f      	mov	r7, r1
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4640      	mov	r0, r8
 8006650:	4649      	mov	r1, r9
 8006652:	f7f9 fd8b 	bl	800016c <__adddf3>
 8006656:	a33c      	add	r3, pc, #240	; (adr r3, 8006748 <__ieee754_pow+0x720>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	4620      	mov	r0, r4
 800665e:	460d      	mov	r5, r1
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 fd74 	bl	8000168 <__aeabi_dsub>
 8006680:	a333      	add	r3, pc, #204	; (adr r3, 8006750 <__ieee754_pow+0x728>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 ff27 	bl	80004d8 <__aeabi_dmul>
 800668a:	a333      	add	r3, pc, #204	; (adr r3, 8006758 <__ieee754_pow+0x730>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	4606      	mov	r6, r0
 8006692:	460f      	mov	r7, r1
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ff1e 	bl	80004d8 <__aeabi_dmul>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7f9 fd62 	bl	800016c <__adddf3>
 80066a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066aa:	4b34      	ldr	r3, [pc, #208]	; (800677c <__ieee754_pow+0x754>)
 80066ac:	4413      	add	r3, r2
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fd5b 	bl	800016c <__adddf3>
 80066b6:	4680      	mov	r8, r0
 80066b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066ba:	4689      	mov	r9, r1
 80066bc:	f7f9 fea2 	bl	8000404 <__aeabi_i2d>
 80066c0:	4604      	mov	r4, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066ca:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <__ieee754_pow+0x758>)
 80066cc:	4413      	add	r3, r2
 80066ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 80066d2:	4642      	mov	r2, r8
 80066d4:	464b      	mov	r3, r9
 80066d6:	f7f9 fd49 	bl	800016c <__adddf3>
 80066da:	4632      	mov	r2, r6
 80066dc:	463b      	mov	r3, r7
 80066de:	f7f9 fd45 	bl	800016c <__adddf3>
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f7f9 fd41 	bl	800016c <__adddf3>
 80066ea:	2000      	movs	r0, #0
 80066ec:	4622      	mov	r2, r4
 80066ee:	462b      	mov	r3, r5
 80066f0:	4682      	mov	sl, r0
 80066f2:	468b      	mov	fp, r1
 80066f4:	f7f9 fd38 	bl	8000168 <__aeabi_dsub>
 80066f8:	4632      	mov	r2, r6
 80066fa:	463b      	mov	r3, r7
 80066fc:	f7f9 fd34 	bl	8000168 <__aeabi_dsub>
 8006700:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006704:	f7f9 fd30 	bl	8000168 <__aeabi_dsub>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4640      	mov	r0, r8
 800670e:	4649      	mov	r1, r9
 8006710:	e60b      	b.n	800632a <__ieee754_pow+0x302>
 8006712:	2601      	movs	r6, #1
 8006714:	e69f      	b.n	8006456 <__ieee754_pow+0x42e>
 8006716:	bf00      	nop
 8006718:	4a454eef 	.word	0x4a454eef
 800671c:	3fca7e28 	.word	0x3fca7e28
 8006720:	93c9db65 	.word	0x93c9db65
 8006724:	3fcd864a 	.word	0x3fcd864a
 8006728:	a91d4101 	.word	0xa91d4101
 800672c:	3fd17460 	.word	0x3fd17460
 8006730:	518f264d 	.word	0x518f264d
 8006734:	3fd55555 	.word	0x3fd55555
 8006738:	db6fabff 	.word	0xdb6fabff
 800673c:	3fdb6db6 	.word	0x3fdb6db6
 8006740:	33333303 	.word	0x33333303
 8006744:	3fe33333 	.word	0x3fe33333
 8006748:	e0000000 	.word	0xe0000000
 800674c:	3feec709 	.word	0x3feec709
 8006750:	dc3a03fd 	.word	0xdc3a03fd
 8006754:	3feec709 	.word	0x3feec709
 8006758:	145b01f5 	.word	0x145b01f5
 800675c:	be3e2fe0 	.word	0xbe3e2fe0
 8006760:	7ff00000 	.word	0x7ff00000
 8006764:	43400000 	.word	0x43400000
 8006768:	0003988e 	.word	0x0003988e
 800676c:	000bb679 	.word	0x000bb679
 8006770:	08006e30 	.word	0x08006e30
 8006774:	3ff00000 	.word	0x3ff00000
 8006778:	40080000 	.word	0x40080000
 800677c:	08006e50 	.word	0x08006e50
 8006780:	08006e40 	.word	0x08006e40
 8006784:	a39c      	add	r3, pc, #624	; (adr r3, 80069f8 <__ieee754_pow+0x9d0>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f7f9 fced 	bl	800016c <__adddf3>
 8006792:	4622      	mov	r2, r4
 8006794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006798:	462b      	mov	r3, r5
 800679a:	4650      	mov	r0, sl
 800679c:	4639      	mov	r1, r7
 800679e:	f7f9 fce3 	bl	8000168 <__aeabi_dsub>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067aa:	f7fa f925 	bl	80009f8 <__aeabi_dcmpgt>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f47f ae06 	bne.w	80063c0 <__ieee754_pow+0x398>
 80067b4:	4aa2      	ldr	r2, [pc, #648]	; (8006a40 <__ieee754_pow+0xa18>)
 80067b6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f340 8100 	ble.w	80069c0 <__ieee754_pow+0x998>
 80067c0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80067c4:	151b      	asrs	r3, r3, #20
 80067c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80067ca:	fa4a fa03 	asr.w	sl, sl, r3
 80067ce:	44b2      	add	sl, r6
 80067d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80067d4:	489b      	ldr	r0, [pc, #620]	; (8006a44 <__ieee754_pow+0xa1c>)
 80067d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80067da:	4108      	asrs	r0, r1
 80067dc:	ea00 030a 	and.w	r3, r0, sl
 80067e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80067e4:	f1c1 0114 	rsb	r1, r1, #20
 80067e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80067ec:	fa4a fa01 	asr.w	sl, sl, r1
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	4620      	mov	r0, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	bfb8      	it	lt
 80067fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8006800:	f7f9 fcb2 	bl	8000168 <__aeabi_dsub>
 8006804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800680c:	2400      	movs	r4, #0
 800680e:	4642      	mov	r2, r8
 8006810:	464b      	mov	r3, r9
 8006812:	f7f9 fcab 	bl	800016c <__adddf3>
 8006816:	a37a      	add	r3, pc, #488	; (adr r3, 8006a00 <__ieee754_pow+0x9d8>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	4620      	mov	r0, r4
 800681e:	460d      	mov	r5, r1
 8006820:	f7f9 fe5a 	bl	80004d8 <__aeabi_dmul>
 8006824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006828:	4606      	mov	r6, r0
 800682a:	460f      	mov	r7, r1
 800682c:	4620      	mov	r0, r4
 800682e:	4629      	mov	r1, r5
 8006830:	f7f9 fc9a 	bl	8000168 <__aeabi_dsub>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4640      	mov	r0, r8
 800683a:	4649      	mov	r1, r9
 800683c:	f7f9 fc94 	bl	8000168 <__aeabi_dsub>
 8006840:	a371      	add	r3, pc, #452	; (adr r3, 8006a08 <__ieee754_pow+0x9e0>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fe47 	bl	80004d8 <__aeabi_dmul>
 800684a:	a371      	add	r3, pc, #452	; (adr r3, 8006a10 <__ieee754_pow+0x9e8>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	4680      	mov	r8, r0
 8006852:	4689      	mov	r9, r1
 8006854:	4620      	mov	r0, r4
 8006856:	4629      	mov	r1, r5
 8006858:	f7f9 fe3e 	bl	80004d8 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4640      	mov	r0, r8
 8006862:	4649      	mov	r1, r9
 8006864:	f7f9 fc82 	bl	800016c <__adddf3>
 8006868:	4604      	mov	r4, r0
 800686a:	460d      	mov	r5, r1
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fc7a 	bl	800016c <__adddf3>
 8006878:	4632      	mov	r2, r6
 800687a:	463b      	mov	r3, r7
 800687c:	4680      	mov	r8, r0
 800687e:	4689      	mov	r9, r1
 8006880:	f7f9 fc72 	bl	8000168 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7f9 fc6c 	bl	8000168 <__aeabi_dsub>
 8006890:	4642      	mov	r2, r8
 8006892:	4606      	mov	r6, r0
 8006894:	460f      	mov	r7, r1
 8006896:	464b      	mov	r3, r9
 8006898:	4640      	mov	r0, r8
 800689a:	4649      	mov	r1, r9
 800689c:	f7f9 fe1c 	bl	80004d8 <__aeabi_dmul>
 80068a0:	a35d      	add	r3, pc, #372	; (adr r3, 8006a18 <__ieee754_pow+0x9f0>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	4604      	mov	r4, r0
 80068a8:	460d      	mov	r5, r1
 80068aa:	f7f9 fe15 	bl	80004d8 <__aeabi_dmul>
 80068ae:	a35c      	add	r3, pc, #368	; (adr r3, 8006a20 <__ieee754_pow+0x9f8>)
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f7f9 fc58 	bl	8000168 <__aeabi_dsub>
 80068b8:	4622      	mov	r2, r4
 80068ba:	462b      	mov	r3, r5
 80068bc:	f7f9 fe0c 	bl	80004d8 <__aeabi_dmul>
 80068c0:	a359      	add	r3, pc, #356	; (adr r3, 8006a28 <__ieee754_pow+0xa00>)
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f7f9 fc51 	bl	800016c <__adddf3>
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	f7f9 fe03 	bl	80004d8 <__aeabi_dmul>
 80068d2:	a357      	add	r3, pc, #348	; (adr r3, 8006a30 <__ieee754_pow+0xa08>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fc46 	bl	8000168 <__aeabi_dsub>
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	f7f9 fdfa 	bl	80004d8 <__aeabi_dmul>
 80068e4:	a354      	add	r3, pc, #336	; (adr r3, 8006a38 <__ieee754_pow+0xa10>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7f9 fc3f 	bl	800016c <__adddf3>
 80068ee:	4622      	mov	r2, r4
 80068f0:	462b      	mov	r3, r5
 80068f2:	f7f9 fdf1 	bl	80004d8 <__aeabi_dmul>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fc33 	bl	8000168 <__aeabi_dsub>
 8006902:	4604      	mov	r4, r0
 8006904:	460d      	mov	r5, r1
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4640      	mov	r0, r8
 800690c:	4649      	mov	r1, r9
 800690e:	f7f9 fde3 	bl	80004d8 <__aeabi_dmul>
 8006912:	2200      	movs	r2, #0
 8006914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7f9 fc22 	bl	8000168 <__aeabi_dsub>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692c:	f7f9 fefe 	bl	800072c <__aeabi_ddiv>
 8006930:	4632      	mov	r2, r6
 8006932:	4604      	mov	r4, r0
 8006934:	460d      	mov	r5, r1
 8006936:	463b      	mov	r3, r7
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f7f9 fdcc 	bl	80004d8 <__aeabi_dmul>
 8006940:	4632      	mov	r2, r6
 8006942:	463b      	mov	r3, r7
 8006944:	f7f9 fc12 	bl	800016c <__adddf3>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7f9 fc0a 	bl	8000168 <__aeabi_dsub>
 8006954:	4642      	mov	r2, r8
 8006956:	464b      	mov	r3, r9
 8006958:	f7f9 fc06 	bl	8000168 <__aeabi_dsub>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	2000      	movs	r0, #0
 8006962:	4939      	ldr	r1, [pc, #228]	; (8006a48 <__ieee754_pow+0xa20>)
 8006964:	f7f9 fc00 	bl	8000168 <__aeabi_dsub>
 8006968:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800696c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006970:	da29      	bge.n	80069c6 <__ieee754_pow+0x99e>
 8006972:	4652      	mov	r2, sl
 8006974:	f000 f874 	bl	8006a60 <scalbn>
 8006978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697c:	f7ff bbfd 	b.w	800617a <__ieee754_pow+0x152>
 8006980:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <__ieee754_pow+0xa24>)
 8006982:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006986:	429f      	cmp	r7, r3
 8006988:	f77f af14 	ble.w	80067b4 <__ieee754_pow+0x78c>
 800698c:	4b30      	ldr	r3, [pc, #192]	; (8006a50 <__ieee754_pow+0xa28>)
 800698e:	440b      	add	r3, r1
 8006990:	4303      	orrs	r3, r0
 8006992:	d009      	beq.n	80069a8 <__ieee754_pow+0x980>
 8006994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006998:	2200      	movs	r2, #0
 800699a:	2300      	movs	r3, #0
 800699c:	f7fa f80e 	bl	80009bc <__aeabi_dcmplt>
 80069a0:	3800      	subs	r0, #0
 80069a2:	bf18      	it	ne
 80069a4:	2001      	movne	r0, #1
 80069a6:	e452      	b.n	800624e <__ieee754_pow+0x226>
 80069a8:	4622      	mov	r2, r4
 80069aa:	462b      	mov	r3, r5
 80069ac:	f7f9 fbdc 	bl	8000168 <__aeabi_dsub>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f7fa f816 	bl	80009e4 <__aeabi_dcmpge>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f43f aefb 	beq.w	80067b4 <__ieee754_pow+0x78c>
 80069be:	e7e9      	b.n	8006994 <__ieee754_pow+0x96c>
 80069c0:	f04f 0a00 	mov.w	sl, #0
 80069c4:	e720      	b.n	8006808 <__ieee754_pow+0x7e0>
 80069c6:	4621      	mov	r1, r4
 80069c8:	e7d6      	b.n	8006978 <__ieee754_pow+0x950>
 80069ca:	f04f 0b00 	mov.w	fp, #0
 80069ce:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006a48 <__ieee754_pow+0xa20>
 80069d2:	f7ff bbb9 	b.w	8006148 <__ieee754_pow+0x120>
 80069d6:	f04f 0b00 	mov.w	fp, #0
 80069da:	f04f 0c00 	mov.w	ip, #0
 80069de:	f7ff bbb3 	b.w	8006148 <__ieee754_pow+0x120>
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7ff bb3c 	b.w	8006062 <__ieee754_pow+0x3a>
 80069ea:	9200      	str	r2, [sp, #0]
 80069ec:	f7ff bb88 	b.w	8006100 <__ieee754_pow+0xd8>
 80069f0:	2300      	movs	r3, #0
 80069f2:	f7ff bb72 	b.w	80060da <__ieee754_pow+0xb2>
 80069f6:	bf00      	nop
 80069f8:	652b82fe 	.word	0x652b82fe
 80069fc:	3c971547 	.word	0x3c971547
 8006a00:	00000000 	.word	0x00000000
 8006a04:	3fe62e43 	.word	0x3fe62e43
 8006a08:	fefa39ef 	.word	0xfefa39ef
 8006a0c:	3fe62e42 	.word	0x3fe62e42
 8006a10:	0ca86c39 	.word	0x0ca86c39
 8006a14:	be205c61 	.word	0xbe205c61
 8006a18:	72bea4d0 	.word	0x72bea4d0
 8006a1c:	3e663769 	.word	0x3e663769
 8006a20:	c5d26bf1 	.word	0xc5d26bf1
 8006a24:	3ebbbd41 	.word	0x3ebbbd41
 8006a28:	af25de2c 	.word	0xaf25de2c
 8006a2c:	3f11566a 	.word	0x3f11566a
 8006a30:	16bebd93 	.word	0x16bebd93
 8006a34:	3f66c16c 	.word	0x3f66c16c
 8006a38:	5555553e 	.word	0x5555553e
 8006a3c:	3fc55555 	.word	0x3fc55555
 8006a40:	3fe00000 	.word	0x3fe00000
 8006a44:	fff00000 	.word	0xfff00000
 8006a48:	3ff00000 	.word	0x3ff00000
 8006a4c:	4090cbff 	.word	0x4090cbff
 8006a50:	3f6f3400 	.word	0x3f6f3400

08006a54 <fabs>:
 8006a54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4770      	bx	lr
 8006a5c:	0000      	movs	r0, r0
	...

08006a60 <scalbn>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	4616      	mov	r6, r2
 8006a64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	b992      	cbnz	r2, 8006a96 <scalbn+0x36>
 8006a70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a74:	4303      	orrs	r3, r0
 8006a76:	d03c      	beq.n	8006af2 <scalbn+0x92>
 8006a78:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <scalbn+0xe0>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f7f9 fd2c 	bl	80004d8 <__aeabi_dmul>
 8006a80:	4b30      	ldr	r3, [pc, #192]	; (8006b44 <scalbn+0xe4>)
 8006a82:	4604      	mov	r4, r0
 8006a84:	429e      	cmp	r6, r3
 8006a86:	460d      	mov	r5, r1
 8006a88:	da0f      	bge.n	8006aaa <scalbn+0x4a>
 8006a8a:	a329      	add	r3, pc, #164	; (adr r3, 8006b30 <scalbn+0xd0>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fd22 	bl	80004d8 <__aeabi_dmul>
 8006a94:	e006      	b.n	8006aa4 <scalbn+0x44>
 8006a96:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006a9a:	42ba      	cmp	r2, r7
 8006a9c:	d109      	bne.n	8006ab2 <scalbn+0x52>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	f7f9 fb64 	bl	800016c <__adddf3>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	e023      	b.n	8006af2 <scalbn+0x92>
 8006aaa:	460b      	mov	r3, r1
 8006aac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ab0:	3a36      	subs	r2, #54	; 0x36
 8006ab2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006ab6:	428e      	cmp	r6, r1
 8006ab8:	dd0e      	ble.n	8006ad8 <scalbn+0x78>
 8006aba:	a31f      	add	r3, pc, #124	; (adr r3, 8006b38 <scalbn+0xd8>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006ac4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006ac8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006acc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006ad0:	481d      	ldr	r0, [pc, #116]	; (8006b48 <scalbn+0xe8>)
 8006ad2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006ad6:	e7db      	b.n	8006a90 <scalbn+0x30>
 8006ad8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006adc:	4432      	add	r2, r6
 8006ade:	428a      	cmp	r2, r1
 8006ae0:	dceb      	bgt.n	8006aba <scalbn+0x5a>
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	dd08      	ble.n	8006af8 <scalbn+0x98>
 8006ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006aea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006af2:	4620      	mov	r0, r4
 8006af4:	4629      	mov	r1, r5
 8006af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006afc:	da0c      	bge.n	8006b18 <scalbn+0xb8>
 8006afe:	a30c      	add	r3, pc, #48	; (adr r3, 8006b30 <scalbn+0xd0>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006b08:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006b0c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006b10:	480e      	ldr	r0, [pc, #56]	; (8006b4c <scalbn+0xec>)
 8006b12:	f041 011f 	orr.w	r1, r1, #31
 8006b16:	e7bb      	b.n	8006a90 <scalbn+0x30>
 8006b18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b1c:	3236      	adds	r2, #54	; 0x36
 8006b1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b26:	4620      	mov	r0, r4
 8006b28:	4629      	mov	r1, r5
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <scalbn+0xf0>)
 8006b2e:	e7af      	b.n	8006a90 <scalbn+0x30>
 8006b30:	c2f8f359 	.word	0xc2f8f359
 8006b34:	01a56e1f 	.word	0x01a56e1f
 8006b38:	8800759c 	.word	0x8800759c
 8006b3c:	7e37e43c 	.word	0x7e37e43c
 8006b40:	43500000 	.word	0x43500000
 8006b44:	ffff3cb0 	.word	0xffff3cb0
 8006b48:	8800759c 	.word	0x8800759c
 8006b4c:	c2f8f359 	.word	0xc2f8f359
 8006b50:	3c900000 	.word	0x3c900000

08006b54 <with_errno>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	460d      	mov	r5, r1
 8006b5a:	4616      	mov	r6, r2
 8006b5c:	f7fe fd6a 	bl	8005634 <__errno>
 8006b60:	4629      	mov	r1, r5
 8006b62:	6006      	str	r6, [r0, #0]
 8006b64:	4620      	mov	r0, r4
 8006b66:	bd70      	pop	{r4, r5, r6, pc}

08006b68 <xflow>:
 8006b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b6a:	4615      	mov	r5, r2
 8006b6c:	461c      	mov	r4, r3
 8006b6e:	b180      	cbz	r0, 8006b92 <xflow+0x2a>
 8006b70:	4610      	mov	r0, r2
 8006b72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b76:	e9cd 0100 	strd	r0, r1, [sp]
 8006b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b7e:	4628      	mov	r0, r5
 8006b80:	4621      	mov	r1, r4
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	2222      	movs	r2, #34	; 0x22
 8006b88:	b003      	add	sp, #12
 8006b8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b8e:	f7ff bfe1 	b.w	8006b54 <with_errno>
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	e7ee      	b.n	8006b76 <xflow+0xe>

08006b98 <__math_uflow>:
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b9e:	f7ff bfe3 	b.w	8006b68 <xflow>

08006ba2 <__math_oflow>:
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006ba8:	f7ff bfde 	b.w	8006b68 <xflow>

08006bac <__ieee754_sqrt>:
 8006bac:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006d50 <__ieee754_sqrt+0x1a4>
 8006bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	ea3c 0c01 	bics.w	ip, ip, r1
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460d      	mov	r5, r1
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	d10e      	bne.n	8006be2 <__ieee754_sqrt+0x36>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	f7f9 fc87 	bl	80004d8 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 facb 	bl	800016c <__adddf3>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	4630      	mov	r0, r6
 8006bdc:	4629      	mov	r1, r5
 8006bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	2900      	cmp	r1, #0
 8006be4:	dc0d      	bgt.n	8006c02 <__ieee754_sqrt+0x56>
 8006be6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006bea:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006bee:	d0f4      	beq.n	8006bda <__ieee754_sqrt+0x2e>
 8006bf0:	b139      	cbz	r1, 8006c02 <__ieee754_sqrt+0x56>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f7f9 fab8 	bl	8000168 <__aeabi_dsub>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	f7f9 fd96 	bl	800072c <__aeabi_ddiv>
 8006c00:	e7e9      	b.n	8006bd6 <__ieee754_sqrt+0x2a>
 8006c02:	1512      	asrs	r2, r2, #20
 8006c04:	f000 8089 	beq.w	8006d1a <__ieee754_sqrt+0x16e>
 8006c08:	2500      	movs	r5, #0
 8006c0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c0e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c16:	07d2      	lsls	r2, r2, #31
 8006c18:	bf5c      	itt	pl
 8006c1a:	005b      	lslpl	r3, r3, #1
 8006c1c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c24:	bf58      	it	pl
 8006c26:	0064      	lslpl	r4, r4, #1
 8006c28:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006c2c:	0062      	lsls	r2, r4, #1
 8006c2e:	2016      	movs	r0, #22
 8006c30:	4629      	mov	r1, r5
 8006c32:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8006c36:	1076      	asrs	r6, r6, #1
 8006c38:	190f      	adds	r7, r1, r4
 8006c3a:	429f      	cmp	r7, r3
 8006c3c:	bfde      	ittt	le
 8006c3e:	1bdb      	suble	r3, r3, r7
 8006c40:	1939      	addle	r1, r7, r4
 8006c42:	192d      	addle	r5, r5, r4
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	3801      	subs	r0, #1
 8006c48:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006c4c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006c50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006c54:	d1f0      	bne.n	8006c38 <__ieee754_sqrt+0x8c>
 8006c56:	4604      	mov	r4, r0
 8006c58:	2720      	movs	r7, #32
 8006c5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006c5e:	428b      	cmp	r3, r1
 8006c60:	eb0c 0e00 	add.w	lr, ip, r0
 8006c64:	dc02      	bgt.n	8006c6c <__ieee754_sqrt+0xc0>
 8006c66:	d113      	bne.n	8006c90 <__ieee754_sqrt+0xe4>
 8006c68:	4596      	cmp	lr, r2
 8006c6a:	d811      	bhi.n	8006c90 <__ieee754_sqrt+0xe4>
 8006c6c:	f1be 0f00 	cmp.w	lr, #0
 8006c70:	eb0e 000c 	add.w	r0, lr, ip
 8006c74:	da56      	bge.n	8006d24 <__ieee754_sqrt+0x178>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	db54      	blt.n	8006d24 <__ieee754_sqrt+0x178>
 8006c7a:	f101 0801 	add.w	r8, r1, #1
 8006c7e:	1a5b      	subs	r3, r3, r1
 8006c80:	4641      	mov	r1, r8
 8006c82:	4596      	cmp	lr, r2
 8006c84:	bf88      	it	hi
 8006c86:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006c8a:	eba2 020e 	sub.w	r2, r2, lr
 8006c8e:	4464      	add	r4, ip
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	3f01      	subs	r7, #1
 8006c94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006c98:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006c9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006ca0:	d1dd      	bne.n	8006c5e <__ieee754_sqrt+0xb2>
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d01b      	beq.n	8006cde <__ieee754_sqrt+0x132>
 8006ca6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006d54 <__ieee754_sqrt+0x1a8>
 8006caa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006d58 <__ieee754_sqrt+0x1ac>
 8006cae:	e9da 0100 	ldrd	r0, r1, [sl]
 8006cb2:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cb6:	f7f9 fa57 	bl	8000168 <__aeabi_dsub>
 8006cba:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 fe83 	bl	80009d0 <__aeabi_dcmple>
 8006cca:	b140      	cbz	r0, 8006cde <__ieee754_sqrt+0x132>
 8006ccc:	e9da 0100 	ldrd	r0, r1, [sl]
 8006cd0:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cd4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006cd8:	d126      	bne.n	8006d28 <__ieee754_sqrt+0x17c>
 8006cda:	463c      	mov	r4, r7
 8006cdc:	3501      	adds	r5, #1
 8006cde:	106b      	asrs	r3, r5, #1
 8006ce0:	0864      	lsrs	r4, r4, #1
 8006ce2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006ce6:	07ea      	lsls	r2, r5, #31
 8006ce8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006cec:	bf48      	it	mi
 8006cee:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006cf8:	e76d      	b.n	8006bd6 <__ieee754_sqrt+0x2a>
 8006cfa:	0ae3      	lsrs	r3, r4, #11
 8006cfc:	3915      	subs	r1, #21
 8006cfe:	0564      	lsls	r4, r4, #21
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0fa      	beq.n	8006cfa <__ieee754_sqrt+0x14e>
 8006d04:	02d8      	lsls	r0, r3, #11
 8006d06:	d50a      	bpl.n	8006d1e <__ieee754_sqrt+0x172>
 8006d08:	f1c2 0020 	rsb	r0, r2, #32
 8006d0c:	fa24 f000 	lsr.w	r0, r4, r0
 8006d10:	1e55      	subs	r5, r2, #1
 8006d12:	4094      	lsls	r4, r2
 8006d14:	4303      	orrs	r3, r0
 8006d16:	1b4a      	subs	r2, r1, r5
 8006d18:	e776      	b.n	8006c08 <__ieee754_sqrt+0x5c>
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	e7f0      	b.n	8006d00 <__ieee754_sqrt+0x154>
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	3201      	adds	r2, #1
 8006d22:	e7ef      	b.n	8006d04 <__ieee754_sqrt+0x158>
 8006d24:	4688      	mov	r8, r1
 8006d26:	e7aa      	b.n	8006c7e <__ieee754_sqrt+0xd2>
 8006d28:	f7f9 fa20 	bl	800016c <__adddf3>
 8006d2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4640      	mov	r0, r8
 8006d36:	4649      	mov	r1, r9
 8006d38:	f7f9 fe40 	bl	80009bc <__aeabi_dcmplt>
 8006d3c:	b120      	cbz	r0, 8006d48 <__ieee754_sqrt+0x19c>
 8006d3e:	1ca1      	adds	r1, r4, #2
 8006d40:	bf08      	it	eq
 8006d42:	3501      	addeq	r5, #1
 8006d44:	3402      	adds	r4, #2
 8006d46:	e7ca      	b.n	8006cde <__ieee754_sqrt+0x132>
 8006d48:	3401      	adds	r4, #1
 8006d4a:	f024 0401 	bic.w	r4, r4, #1
 8006d4e:	e7c6      	b.n	8006cde <__ieee754_sqrt+0x132>
 8006d50:	7ff00000 	.word	0x7ff00000
 8006d54:	20000060 	.word	0x20000060
 8006d58:	20000068 	.word	0x20000068

08006d5c <_init>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr

08006d68 <_fini>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr
